<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhangzef</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="zhangzef.com/"/>
  <updated>2020-02-15T16:36:35.000Z</updated>
  <id>zhangzef.com/</id>
  
  <author>
    <name>张泽</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo博客主页自定义排序</title>
    <link href="zhangzef.com/2020/02/15/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/"/>
    <id>zhangzef.com/2020/02/15/Hexo博客主页自定义排序/</id>
    <published>2020-02-15T15:56:10.000Z</published>
    <updated>2020-02-15T16:36:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参数讲解"><a href="#参数讲解" class="headerlink" title="参数讲解"></a>参数讲解</h2><p>打开站点配置文件（也就是博客根目录下的_config.yml，不是主题配置文件，可以用notepad++来修改，比较轻便好用），用Ctrl+F搜索<strong>index_generator</strong>，下面那个参数<strong>order_by</strong>就是管理主页博客排序顺序的，默认为按date的降序排序。</p><h2 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h2><ol><li>将站点配置文件<strong>order_by</strong>的<strong>-date</strong>换成<strong>-top</strong>（top这个属性是自定义的，换成别的名字也可以，不过后续操作要一致）。<img src="http://image.zhangzef.com/20200216000521.png" alt="img"></li><li>然后在<strong>每一篇博客</strong>博客的开头编写位置添加一个属性<strong>top</strong>，属性值用数字，主页的博客顺序就会从大到小降序排列，top值最大的博文就会被置顶。（注意：一定要在<strong>每一篇博客</strong>都添加一个top属性，老博客要一篇一篇修改，不然就会出现很奇怪的排序现象，亲测）<img src="http://image.zhangzef.com/20200216001113.png" alt="img"></li><li>如果不想每次都重新创建top属性，可以直接修改博客模板：博客根目录下有一个scaffolds文件夹，里面的post.md就是创建新博客的模板，直接在这里添加一个top属性，以后hexo n时就自带top属性了。</li></ol><h2 id="按更新时间排序"><a href="#按更新时间排序" class="headerlink" title="按更新时间排序"></a>按更新时间排序</h2><p>跟自定义排序类似</p><p>给<strong>每一篇</strong>博文都添加一个updated属性，每次更新博文的时候将这个属性更新一下，时间格式要和原来的date格式一样，可以直接用输入法输入（微软输入法不行，换了吧），然后将站点配置文件的<strong>order_by</strong>属性改成<strong>-updated</strong>就行了。（注意，如果你开启了在博客显示博文的更新时间，则网站里显示的更新于的时间则会和updated保持一致，因此<strong>每次更新博文后要手动更新一下updated的时间</strong>）<img src="http://image.zhangzef.com/20200216003126.png" alt="img" style="zoom:50%;"></p><p>如果想修改博客模板，要修改scaffolds文件夹下的post.md文件成这样（就是每次创建时获取时间）：<img src="http://image.zhangzef.com/20200216003437.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参数讲解&quot;&gt;&lt;a href=&quot;#参数讲解&quot; class=&quot;headerlink&quot; title=&quot;参数讲解&quot;&gt;&lt;/a&gt;参数讲解&lt;/h2&gt;&lt;p&gt;打开站点配置文件（也就是博客根目录下的_config.yml，不是主题配置文件，可以用notepad++来修改，比较轻便好用
      
    
    </summary>
    
      <category term="博客优化" scheme="zhangzef.com/categories/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="hexo" scheme="zhangzef.com/tags/hexo/"/>
    
      <category term="博客自定义排序" scheme="zhangzef.com/tags/%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/"/>
    
      <category term="博客按更新时间排序" scheme="zhangzef.com/tags/%E5%8D%9A%E5%AE%A2%E6%8C%89%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>张泽锋and郭奕宏 一周年</title>
    <link href="zhangzef.com/2020/02/14/%E5%BC%A0%E6%B3%BD%E9%94%8Band%E9%83%AD%E5%A5%95%E5%AE%8F-%E4%B8%80%E5%91%A8%E5%B9%B4/"/>
    <id>zhangzef.com/2020/02/14/张泽锋and郭奕宏-一周年/</id>
    <published>2020-02-14T11:11:29.000Z</published>
    <updated>2020-02-15T15:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="张泽锋and郭奕宏"><a href="#张泽锋and郭奕宏" class="headerlink" title="张泽锋and郭奕宏"></a>张泽锋and郭奕宏</h2><p><img src="http://image.zhangzef.com/20200214221939.png" alt="img" style="zoom:15%;"></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>今天是2月14号，2020年的情人节，对于所有情侣来说是一个特别的日子，对于我们来说这一天更是意义非凡。</p><p>经过一年时间的磕磕绊绊，我们有高兴，有悲伤，有时和睦，有时争吵，体验了情侣间最难相处的关系——异地恋。对于我们来说这一年有喜有忧，但是在你开心的时候所有的忧愁都好像一扫而空，只剩下晴空万里，可能在这里你就是那个晴天女孩吧。一篇博客记录不出我们期待见面时望眼欲穿的模样，也记录不下我们的喜怒哀乐，但是也许在将来追忆往事，会带来别样的感动。</p><p>2019年2月13日，我们俩相约见面，一起去看电影，像以往一样。当我们走出商场时，外面下起鹅毛大雪，但我们却不约而同地一起去吃饭。也许是天意降下了这场雪，寒冷的空气和雪花将我们的手握在了一起。晚上各自回家我们约好一起玩星露谷直到深夜。</p><p>2019年2月14日，当我从睡梦中醒来已是正午，下意识地拿起手机看时间，当看到你给我发来的消息时，我的心脏猛地一下砸向胸膛，大脑被震的一片空白。至今我还记得那句简单但是触动心灵的话，我想这可能就是砰然心动的感觉吧</p><blockquote><p><strong>Some of us get dipped in flat, some in satin, some in gloss. But every once in a while, you find someone who’s iridescent. And when you do,nothing will ever compare.</strong></p></blockquote><p>19年劳动节，我们终于有机会见面，我坐着火车不远万里从开封来到上海看你，我觉得那个劳动节可能是我有生以来过的最快乐的劳动节了吧。尽管几天的玩乐把我们累的筋疲力竭，但是时间总是会带走那些烦恼，留下美好的回忆。我们一起吃火锅小龙虾，一起喝奶茶看电影，一起坐过山车，一起观赏上海夜景。。。至今还记得你想在海底捞免费做美甲的小心愿，和看电影时我去上厕所你为我录下中间的部分，谷木游龙的惊险刺激和那三个小时的排队，还有嘉善那个令我永生难忘没放盐的小龙虾。五月这个即将立夏的季节里，留下了春天里最难忘的记忆。</p><p>大二下学期的期末考试，乘着我们俩考试的时间差，你从上海来到开封找我。前一天晚上我激动的难以入睡，直到夜里两三点才睡着。在开封没带你玩什么，不过带你吃了我们附近的名吃摇滚炒鸡，尝了开封不新鲜的小龙虾，喝了冰镇的深海炸弹，最遗憾的就是没能让你感受到化三驴肉汤的魅力。</p><p>大二暑假时，我在学校学习，你在家里。记得我们每天晚上都一起会玩星露谷。暑假的时间相对较松，我们断断续续见了许多次面。最让我愧疚的就是那个失败的生日，以后我一定会把那份遗憾补回来的，不过当你收到波妞时的那个反应像个乐坏了的孩子。原来我们经常一起玩胡闹厨房，知道你特别喜欢玩胡闹厨房，但是第一版只能单机玩，我们很难有时间一起玩。当时正好有胡闹厨房2，我就顺便给我们俩一人买了一个，这样以后就可以一起玩了。后来我怕你用键盘玩着太难受了，就趁着七夕送你了一个和我同款的手柄，虽说不上好用，但是用起来比键盘要舒服多了，等以后我们一定要一起换xbox的手柄。就这样我们用了不到一个暑假的时间就将胡闹厨房2给通关了，等以后有机会了一定要将一也通关。</p><p>2019年中秋节，我陪你一起去学校开学，帮你提行李收拾东西，但奈何第一天进不去你们寝室，没有帮到你太多。后来我们又一起吃了谭鸭血，那个火锅真是太好吃了！！！还有那忘不了的鱿鱼蘸小龙虾汤汁。。。但是时间很短，我就要会到开封上学了。。。</p><p>从那之后大三整整一个学期我们再也没有机会见面了。。。只剩下国庆时我们每天的视频</p><p>大三期末的时候我们都太累了，导致我们的感情出了裂缝，不过幸好在寒假时，我们又将裂缝补上，让他慢慢愈合。</p><p>现在疫情严重，我们离得那么近却难以见上一面。之后的一年更是我们人生中关键的一年，我们要相濡以沫，砥砺前行，多一份包容，多一份理解，少一份争吵，为我们心中的理想而努力。千言万语道不尽，只待花开再逢时。</p><p>最后我想用周总理的话来结尾：</p><blockquote><p><strong>我一生都是坚定不移的唯物主义者，唯有你，我希望有来生</strong></p></blockquote><h2 id="这一年"><a href="#这一年" class="headerlink" title="这一年"></a>这一年</h2><p><img src="http://image.zhangzef.com/20200214220710.jpg" style="zoom: 15%;"></p><p><img src="http://image.zhangzef.com/20200214220708.jpg" style="zoom:50%;"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;张泽锋and郭奕宏&quot;&gt;&lt;a href=&quot;#张泽锋and郭奕宏&quot; class=&quot;headerlink&quot; title=&quot;张泽锋and郭奕宏&quot;&gt;&lt;/a&gt;张泽锋and郭奕宏&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://image.zhangzef.com/202002
      
    
    </summary>
    
      <category term="关于我们" scheme="zhangzef.com/categories/%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%AC/"/>
    
    
  </entry>
  
  <entry>
    <title>kuangbin专题四 最短路练习</title>
    <link href="zhangzef.com/2020/02/05/kuangbin%E4%B8%93%E9%A2%98%E5%9B%9B-%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%BB%83%E4%B9%A0/"/>
    <id>zhangzef.com/2020/02/05/kuangbin专题四-最短路练习/</id>
    <published>2020-02-05T13:45:42.000Z</published>
    <updated>2020-02-16T15:22:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>tips：大家评论的时候写一下邮箱和昵称呀，头像是根据昵称和邮箱随机生成的😁</p><p><a href="https://vjudge.net/article/187" target="_blank" rel="noopener">kuangbin专题合集</a></p><p><a href="https://www.zhihu.com/question/51727516/answer/127265733" target="_blank" rel="noopener">ACM正确入门方式——数学lover</a></p><h2 id="题目列表"><a href="#题目列表" class="headerlink" title="题目列表"></a>题目列表</h2><ol><li><strong><a href="https://vjudge.net/problem/POJ-2387" target="_blank" rel="noopener">POJ 2387</a></strong> Til the Cows Come Home    <font color="green">AC: 2020-02-05 21:08:20</font></li><li><a href="https://vjudge.net/problem/POJ-2253" target="_blank" rel="noopener"><strong>POJ 2253</strong></a> Frogger    <font color="green">AC: 2020-02-11 20:17:15</font></li><li><strong><a href="https://vjudge.net/problem/POJ-1797" target="_blank" rel="noopener">POJ 1797</a></strong> Heavy Transportation    <font color="green">AC: 2020-02-16 23:14:29</font></li><li><a href="https://vjudge.net/problem/POJ-3268" target="_blank" rel="noopener"><strong>POJ 3268</strong></a> Silver Cow Party</li><li><a href="https://vjudge.net/problem/POJ-1860" target="_blank" rel="noopener"><strong>POJ 1860</strong></a> Currency Exchange</li><li><a href="https://vjudge.net/problem/POJ-3259" target="_blank" rel="noopener"><strong>POJ 3259</strong></a> Wormholes</li><li><a href="https://vjudge.net/problem/POJ-1502" target="_blank" rel="noopener"><strong>POJ 1502</strong></a> MPI Maelstrom</li><li><a href="https://vjudge.net/problem/POJ-3660" target="_blank" rel="noopener"><strong>POJ 3660</strong></a> Cow Contest</li><li><a href="https://vjudge.net/problem/POJ-2240" target="_blank" rel="noopener"><strong>POJ 2240</strong></a> Arbitrage</li><li><a href="https://vjudge.net/problem/POJ-1511" target="_blank" rel="noopener"><strong>POJ 1511</strong></a> Invitation Cards</li><li><a href="https://vjudge.net/problem/POJ-3159" target="_blank" rel="noopener"><strong>POJ 3159</strong></a> Candies</li><li><a href="https://vjudge.net/problem/POJ-2502" target="_blank" rel="noopener"><strong>POJ 2502</strong></a> Subway</li><li><a href="https://vjudge.net/problem/POJ-1062" target="_blank" rel="noopener"><strong>POJ 1062</strong></a> 昂贵的聘礼</li><li><a href="https://vjudge.net/problem/POJ-1847" target="_blank" rel="noopener"><strong>POJ 1847</strong></a> Tram    <font color="green">AC: 2018-07-22 01:13:19</font></li><li><a href="https://vjudge.net/problem/LightOJ-1074" target="_blank" rel="noopener"><strong>LightOJ 1074</strong></a> Extended Traffic</li><li><a href="https://vjudge.net/problem/HDU-4725" target="_blank" rel="noopener"><strong>HDU 4725</strong></a> The Shortest Path in Nya Graph</li><li><a href="https://vjudge.net/problem/HDU-3416" target="_blank" rel="noopener"><strong>HDU 3416</strong></a> Marriage Match IV</li><li><a href="https://vjudge.net/problem/HDU-4370" target="_blank" rel="noopener"><strong>HDU 4370</strong></a> 0 or 1</li><li><a href="https://vjudge.net/problem/POJ-3169" target="_blank" rel="noopener"><strong>POJ 3169</strong></a> Layout</li></ol><h2 id="POJ-2387-Til-the-Cows-Come-Home"><a href="#POJ-2387-Til-the-Cows-Come-Home" class="headerlink" title="POJ 2387    Til the Cows Come Home"></a><a href="https://vjudge.net/problem/POJ-2387" target="_blank" rel="noopener">POJ 2387    Til the Cows Come Home</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有N个点，T条边，每条边都是双向边。让你求出从点N走到点1的最短路。。。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>（wrtm，sb题坑死我了，写的我怀疑智商，一个dijkstra模板题WA了六发。。。）<br>dijkstra模板题，没什么好说的，注意是双向边，如果用邻接矩阵的话要注意可能有重边，邻接表就不用管有没有重边了。<br>最主要的是他题目中说的每条边的范围是1-100，然后我最大值就用1000了，结果一直WA，我佛了。。。最后改成了1&lt;&lt;30才过的。。。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Edge</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> t, d;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Edge</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t = t;</span><br><span class="line">        <span class="keyword">this</span>.d = d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Edge o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.d &gt; o.d) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.d == o.d) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> t = cin.nextInt();</span><br><span class="line">        <span class="keyword">int</span> n = cin.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> dis[] = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];</span><br><span class="line">        List[] lists = <span class="keyword">new</span> List[n + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lists.length; i++) &#123;</span><br><span class="line">            lists[i] = <span class="keyword">new</span> ArrayList&lt;Edge&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = cin.nextInt(), v = cin.nextInt(), d = cin.nextInt();</span><br><span class="line">            lists[u - <span class="number">1</span>].add(<span class="keyword">new</span> Edge(v - <span class="number">1</span>, d));</span><br><span class="line">            lists[v - <span class="number">1</span>].add(<span class="keyword">new</span> Edge(u - <span class="number">1</span>, d));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dis[i] = (i == n - <span class="number">1</span>) ? <span class="number">0</span> : (<span class="number">1</span> &lt;&lt; <span class="number">30</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Edge&gt; pQueue = <span class="keyword">new</span> PriorityQueue&lt;Edge&gt;();</span><br><span class="line">        Edge now = <span class="keyword">new</span> Edge(n - <span class="number">1</span>, dis[n - <span class="number">1</span>]);</span><br><span class="line">        pQueue.add(now);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!pQueue.isEmpty()) &#123;</span><br><span class="line">            now = pQueue.poll();</span><br><span class="line">            <span class="keyword">int</span> x = now.t;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lists[x].size(); i++) &#123;</span><br><span class="line">                Edge next = (Edge) lists[x].get(i);</span><br><span class="line">                <span class="keyword">int</span> y = next.t, w = next.d;</span><br><span class="line">                <span class="keyword">if</span> (dis[x] + w &lt; dis[y]) &#123;</span><br><span class="line">                    dis[y] = dis[x] + w;</span><br><span class="line">                    pQueue.add(<span class="keyword">new</span> Edge(y, dis[y]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(dis[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="POJ-2253-Frogger"><a href="#POJ-2253-Frogger" class="headerlink" title="POJ 2253    Frogger"></a><a href="https://vjudge.net/problem/POJ-2253" target="_blank" rel="noopener">POJ 2253    Frogger</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>有两只青蛙分别在两个石头上，他们中间有一些石头，青蛙Freddy想要跳到青蛙Fiona那里，求出两个青蛙之间的青蛙距离。（那么什么是青蛙距离呢，一开始看题的时候我也一脸懵逼，这个minimax distance是个神tm的玩意儿？？？）</p><p>青蛙距离：两个点之间有若干条路径可以互通，青蛙距离就是取<strong>每条路径中的最长边</strong>中的<strong>最小值</strong><br>假如从点a到点b有两条路径分别为：a-&gt;c-&gt;b，a-&gt;e-&gt;b；其中<strong>ac长度为6</strong>，<strong>cb长度为9</strong>；<strong>ae长度为3</strong>，<strong>eb长度为10</strong>。那么第一条路径中最长的一条边就是cb，第二条路径中最长的一条边就是eb，青蛙路径就是取<strong>cb和eb中较小的一个</strong>，即a到b的青蛙距离为9。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>其实就是把最短路的定义改了一下，原来最短路的定义是两点之间的最短距离，现在是两点之间路径中最长边的最小值，就把dijkstra、SPFA或Floyd中的松弛操作的公式改一下就行了，其他照旧。因为这个题是完全图，所以用邻接矩阵比较容易一些。<br>别给我说两点之间的距离公式不会。。。</p><p><img src="http://image.zhangzef.com/20200214182253.png" alt="img" style="zoom: 50%;"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> dis[] = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">300</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span>[][] mp = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">300</span>][<span class="number">300</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> vis[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vis.length; i++) &#123;</span><br><span class="line">vis[i] = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">double</span> mn = <span class="number">100000.0</span>;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!vis[j] &amp;&amp; dis[j]&lt;mn) &#123;</span><br><span class="line">mn = dis[j];</span><br><span class="line">x = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mn == <span class="number">100000.0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">vis[x] = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">dis[j] = Math.min(dis[j], Math.max(mp[x][j],mn));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">n = cin.nextInt();</span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">List&lt;Point&gt; points = <span class="keyword">new</span> ArrayList&lt;Point&gt;();</span><br><span class="line">dis[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">mp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">x = cin.nextInt();</span><br><span class="line">y = cin.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; points.size(); j++) &#123;</span><br><span class="line"><span class="keyword">double</span> z = Math.sqrt((points.get(j).x - x) * (points.get(j).x - x)</span><br><span class="line">+ (points.get(j).y - y) * (points.get(j).y - y));<span class="comment">//两点之间的距离公式</span></span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">dis[i] = z;</span><br><span class="line">&#125;</span><br><span class="line">mp[i][j] = z;</span><br><span class="line">mp[j][i] = z;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">points.add(<span class="keyword">new</span> Point(x, y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dijkstra();</span><br><span class="line">System.out.println(<span class="string">"Scenario #"</span> + t + <span class="string">"\nFrog Distance = "</span> + String.format(<span class="string">"%.3f"</span>, dis[<span class="number">1</span>]) + <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="POJ-1797-Heavy-Transportation"><a href="#POJ-1797-Heavy-Transportation" class="headerlink" title="POJ 1797    Heavy Transportation"></a><a href="https://vjudge.net/problem/POJ-1797" target="_blank" rel="noopener">POJ 1797    Heavy Transportation</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>这题和青蛙跳（上一题POJ2253）那一题正好相反，求每种路径中权重最小的一节之中的最大值</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>可以用堆优化，但是好麻烦，懒得想了，直接邻接矩阵+普通djikstra。。。把松弛操作改成Max(dis, Min(x, y))，注意组数据输出时要输出两个换行。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">dis[i] = mp[<span class="number">0</span>][i];</span><br><span class="line">vis[i] = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> mx = -INF;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (mx &lt; dis[j] &amp;&amp; !vis[j]) &#123;</span><br><span class="line">x = j;</span><br><span class="line">mx = dis[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mx == -INF) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">vis[x] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">dis[j] = Math.max(dis[j], Math.min(mx, mp[x][j]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> dis[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> mp[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> INF = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> vis[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> t = cin.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> n = cin.nextInt();</span><br><span class="line"><span class="keyword">int</span> m = cin.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1010</span>; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j2 = <span class="number">0</span>; j2 &lt; <span class="number">1010</span>; j2++) &#123;</span><br><span class="line">mp[j][j2] = -INF;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x, y, z;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">x = cin.nextInt()-<span class="number">1</span>;</span><br><span class="line">y = cin.nextInt()-<span class="number">1</span>;</span><br><span class="line">z = cin.nextInt();</span><br><span class="line"></span><br><span class="line">mp[x][y] = z;</span><br><span class="line">mp[y][x] = z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dijkstra(n);</span><br><span class="line">System.out.println(<span class="string">"Scenario #"</span> + (i+<span class="number">1</span>) + <span class="string">":\n"</span> + dis[n-<span class="number">1</span>] + <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;tips：大家评论的时候写一下邮箱和昵称呀，头像是根据昵称和邮箱随机生成的😁&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://vjudge.net/article/187&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kuangbin专题合集&lt;/a&gt;&lt;/
      
    
    </summary>
    
      <category term="刷题" scheme="zhangzef.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="ACM" scheme="zhangzef.com/tags/ACM/"/>
    
      <category term="最短路" scheme="zhangzef.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="蓝桥杯" scheme="zhangzef.com/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
      <category term="dijkstra" scheme="zhangzef.com/tags/dijkstra/"/>
    
  </entry>
  
  <entry>
    <title>吃瓜程序</title>
    <link href="zhangzef.com/2020/01/12/%E5%90%83%E7%93%9C%E7%A8%8B%E5%BA%8F/"/>
    <id>zhangzef.com/2020/01/12/吃瓜程序/</id>
    <published>2020-01-12T14:27:59.000Z</published>
    <updated>2020-02-15T15:09:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文纯属娱乐，寒假了没事找事干（话说我好像也不是没事，该准备考研了）,用C#控制台实现了一下好瓜坏瓜从假设空间求对应数据集的版本空间。</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>假设空间</strong>：属性所有可能取值组成的可能的样本。</p><p><strong>版本空间</strong>：与已知数据集一致的所有假设的子集集合。</p><p><img src="http://image.zhangzef.com/20200214185055.png" alt="img" style="zoom: 80%;"></p><p>（绿色加号代表正类样本，红色小圈代表负类样本）</p><p>GB 是最大泛化正假设边界(maximally General positive hypothesis Boundary),；</p><p>SB 是最大精确正假设边界(maximally Specific positive hypothesis Boundary)</p><p>GB与SB之间所围成的区域就是版本空间。</p><h1 id="西瓜问题"><a href="#西瓜问题" class="headerlink" title="西瓜问题"></a>西瓜问题</h1><p>先写出假设空间，再根据训练数据集求其版本空间</p><ol><li>假设空间，即所有可能的组合（加上空集）</li><li>再根据训练数据集，与正类（即好瓜）不匹配的删除，与负类（即坏瓜）匹配的删除。</li></ol><p><strong>上代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">namespace ConsoleApp1</span><br><span class="line">&#123;</span><br><span class="line">    struct Gua                  //瓜的结构体</span><br><span class="line">    &#123;</span><br><span class="line">        public string Se;       //色泽</span><br><span class="line">        public string Gen;      //根蒂</span><br><span class="line">        public string Qiao;     //敲声</span><br><span class="line">        public bool isEmpty;    //是否为空集</span><br><span class="line">        public bool isHaoGua;   //是否为好瓜，用于标记训练数据集</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static string print(Gua gua)    //用于输出瓜的属性，即toString函数</span><br><span class="line">        &#123;</span><br><span class="line">            if (gua.isEmpty)</span><br><span class="line">            &#123;</span><br><span class="line">                return &quot;∅&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            return &quot;色泽=&quot; + gua.Se + &quot;, 根蒂=&quot; + gua.Gen + &quot;, 敲声=&quot; + gua.Qiao;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            string[] seze = &#123; &quot;*&quot;, &quot;青绿&quot;, &quot;乌黑&quot; &#125;;                //色泽</span><br><span class="line">            string[] gendi = &#123; &quot;*&quot;, &quot;蜷缩&quot;, &quot;硬挺&quot;, &quot;稍蜷&quot; &#125;;       //根蒂</span><br><span class="line">            string[] qiaosheng = &#123; &quot;*&quot;, &quot;浊响&quot;, &quot;清脆&quot;, &quot;沉闷&quot; &#125;;   //敲声</span><br><span class="line">            List&lt;Gua&gt; Space = new List&lt;Gua&gt;();                      //初始为假设空间的列表</span><br><span class="line">            List&lt;Gua&gt; TrainData = new List&lt;Gua&gt;();                  //训练数据集</span><br><span class="line">            Gua gua = new Gua();                                    //添加空集</span><br><span class="line">            gua.isEmpty = true;</span><br><span class="line">            gua.isHaoGua = false;</span><br><span class="line">            Space.Add(gua);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            foreach (var item in seze)                  //求假设空间</span><br><span class="line">            &#123;</span><br><span class="line">                foreach (var item1 in gendi)</span><br><span class="line">                &#123;</span><br><span class="line">                    foreach (var item2 in qiaosheng)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Gua g = new Gua();</span><br><span class="line">                        g.Se = item;</span><br><span class="line">                        g.Gen = item1;</span><br><span class="line">                        g.Qiao = item2;</span><br><span class="line">                        g.isEmpty = false;</span><br><span class="line">                        g.isHaoGua = false;</span><br><span class="line">                        Space.Add(g);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //此处为输入训练数据集</span><br><span class="line">            Gua hao = new Gua();        //该数据为书中表1.1的数据1</span><br><span class="line">            hao.isHaoGua = true;</span><br><span class="line">            hao.isEmpty = false;</span><br><span class="line">            hao.Se = seze[1];</span><br><span class="line">            hao.Gen = gendi[1];</span><br><span class="line">            hao.Qiao = qiaosheng[1];</span><br><span class="line">            TrainData.Add(hao);</span><br><span class="line"></span><br><span class="line">            Gua hao1 = new Gua();       //该数据为书中表1.1的数据2</span><br><span class="line">            hao1.isHaoGua = true;</span><br><span class="line">            hao1.isEmpty = false;</span><br><span class="line">            hao1.Se = seze[2];</span><br><span class="line">            hao1.Gen = gendi[1];</span><br><span class="line">            hao1.Qiao = qiaosheng[1];</span><br><span class="line">            TrainData.Add(hao1);</span><br><span class="line"></span><br><span class="line">            Gua huai = new Gua();       //该数据为书中表1.1的数据3</span><br><span class="line">            huai.isHaoGua = false;</span><br><span class="line">            huai.isEmpty = false;</span><br><span class="line">            huai.Se = seze[1];</span><br><span class="line">            huai.Gen = gendi[2];</span><br><span class="line">            huai.Qiao = qiaosheng[2];</span><br><span class="line">            TrainData.Add(huai);</span><br><span class="line"></span><br><span class="line">            Gua huai1 = new Gua();      //该数据为书中表1.1的数据4</span><br><span class="line">            huai1.isHaoGua = false;</span><br><span class="line">            huai1.isEmpty = false;</span><br><span class="line">            huai1.Se = seze[2];</span><br><span class="line">            huai1.Gen = gendi[3];</span><br><span class="line">            huai1.Qiao = qiaosheng[3];</span><br><span class="line">            TrainData.Add(huai1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            //通过训练数据集对假设空间进行剔除，求其版本空间</span><br><span class="line">            foreach (var item in TrainData)</span><br><span class="line">            &#123;</span><br><span class="line">                for (int i = Space.Count-1; i &gt;= 0; i--)</span><br><span class="line">                &#123;</span><br><span class="line">                    var item1 = Space[i];</span><br><span class="line">                    if (item.isHaoGua)//如果有好瓜</span><br><span class="line">                    &#123;</span><br><span class="line">                        if (item1.isEmpty)//如果有好瓜则不可能存在空集，删除空集</span><br><span class="line">                        &#123;</span><br><span class="line">                            Space.Remove(item1);</span><br><span class="line">                            continue;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        if ((item1.Se.Equals(item.Se) || item1.Se.Equals(&quot;*&quot;)) &amp;&amp; (item1.Gen.Equals(item.Gen) || item1.Gen.Equals(&quot;*&quot;))</span><br><span class="line">                            &amp;&amp; (item1.Qiao.Equals(item.Qiao) || item1.Qiao.Equals(&quot;*&quot;)))    //和好瓜相匹配的数据不删除</span><br><span class="line">                        &#123;</span><br><span class="line">                            continue;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else</span><br><span class="line">                        &#123;</span><br><span class="line">                            Space.Remove(item1);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                    &#123;</span><br><span class="line">                        if ((item1.Se.Equals(item.Se) || item1.Se.Equals(&quot;*&quot;)) &amp;&amp; (item1.Gen.Equals(item.Gen) || item1.Gen.Equals(&quot;*&quot;))</span><br><span class="line">                            &amp;&amp; (item1.Qiao.Equals(item.Qiao) || item1.Qiao.Equals(&quot;*&quot;)))    //和坏瓜相匹配的数据删除</span><br><span class="line">                        &#123;</span><br><span class="line">                            Space.Remove(item1);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            foreach (var item in Space)         //输出</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(print(item));</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文纯属娱乐，寒假了没事找事干（话说我好像也不是没事，该准备考研了）,用C#控制台实现了一下好瓜坏瓜从假设空间求对应数据集的版本空间。&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h
      
    
    </summary>
    
      <category term="机器学习" scheme="zhangzef.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="西瓜书" scheme="zhangzef.com/tags/%E8%A5%BF%E7%93%9C%E4%B9%A6/"/>
    
      <category term="机器学习" scheme="zhangzef.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC--二、SpringMVC请求参数绑定和常用注解</title>
    <link href="zhangzef.com/2019/11/19/SpringMVC--%E4%BA%8C%E3%80%81SpringMVC%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A%E5%92%8C%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    <id>zhangzef.com/2019/11/19/SpringMVC--二、SpringMVC请求参数绑定和常用注解/</id>
    <published>2019-11-19T09:42:51.000Z</published>
    <updated>2020-02-15T15:09:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="请求参数绑定"><a href="#请求参数绑定" class="headerlink" title="请求参数绑定"></a>请求参数绑定</h2><h3 id="绑定机制"><a href="#绑定机制" class="headerlink" title="绑定机制"></a>绑定机制</h3><p>我们都知道，表单中请求参数都是基于key=value的。 SpringMVC绑定请求参数的过程是通过把表单提交请求参数，作为控制器中方法参数进行绑定的。</p><h3 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h3><h4 id="基本类型参数：-包括基本类型和String类型"><a href="#基本类型参数：-包括基本类型和String类型" class="headerlink" title="基本类型参数： 包括基本类型和String类型"></a>基本类型参数： 包括基本类型和String类型</h4><p>我们在表单中的参数名称必须和控制器中方法的形参名称保持一致。(严格区分大小写)</p><p>index.jsp文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"param/test"</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Controller类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/param"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ParamTest</span><span class="params">(String name, User user)</span></span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">'\t'</span> + user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    String password;</span><br><span class="line">    Integer age;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里直接使用实体类的时候，表单中的name命名可以当作基本类型，但是当实体类中使用其他实体类，要使用如下命名方式</p><h4 id="POJO类型参数：-包括实体类，以及关联的实体类"><a href="#POJO类型参数：-包括实体类，以及关联的实体类" class="headerlink" title="POJO类型参数： 包括实体类，以及关联的实体类"></a>POJO类型参数： 包括实体类，以及关联的实体类</h4><p>中文释义为简单的java对象，其实就是Java bean，好像是为了避免和EJB混淆所创造的简称<br>要求表单中参数名称和POJO类的属性名称保持一致。并且控制器方法的参数类型是POJO类型。例如：name.firstname<br>用于这里的实体类<strong>都要实现Serializable接口</strong></p><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"param/test"</span>&gt;</span><br><span class="line">    姓：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name.firstname"</span>&gt;&lt;br&gt;</span><br><span class="line">    名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name.secondname"</span>&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>Controller类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/param"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ParamTest</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    String password;</span><br><span class="line">    Name name;<span class="comment">//自定义类型JavaBean</span></span><br><span class="line">    Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", name="</span> + name +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Name <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(Name name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Name类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Name&#123;"</span> +</span><br><span class="line">                <span class="string">"firstname='"</span> + firstname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", secondname='"</span> + secondname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String firstname, secondname;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstname</span><span class="params">(String firstname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstname = firstname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSecondname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> secondname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecondname</span><span class="params">(String secondname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.secondname = secondname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组和集合类型参数：-包括List结构和Map结构的集合（包括数组）"><a href="#数组和集合类型参数：-包括List结构和Map结构的集合（包括数组）" class="headerlink" title="数组和集合类型参数： 包括List结构和Map结构的集合（包括数组）"></a>数组和集合类型参数： 包括List结构和Map结构的集合（包括数组）</h4><ul><li>要求集合类型的请求参数必须在POJO中。在表单中请求参数名称要和POJO中集合属性名称相同。<br>给List集合中的元素赋值，使用下标。 例如：list[0].user<br>给Map集合中的元素赋值，使用键值对。例如：map[‘one’].user</li><li>接收的请求参数是json格式数据。需要借助一个注解实现。</li></ul><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"param/test"</span>&gt;</span><br><span class="line">    姓一：&lt;input type=<span class="string">"text"</span> name=<span class="string">"nameList[0].firstname"</span>&gt;&lt;br&gt;</span><br><span class="line">    名一：&lt;input type=<span class="string">"text"</span> name=<span class="string">"nameList[0].secondname"</span>&gt;&lt;br&gt;</span><br><span class="line">    姓二：&lt;input type=<span class="string">"text"</span> name=<span class="string">"nameList[1].firstname"</span>&gt;&lt;br&gt;</span><br><span class="line">    名二：&lt;input type=<span class="string">"text"</span> name=<span class="string">"nameList[1].secondname"</span>&gt;&lt;br&gt;</span><br><span class="line">    姓三：&lt;input type=<span class="string">"text"</span> name=<span class="string">"nameMap['one'].firstname"</span>&gt;&lt;br&gt;</span><br><span class="line">    名三：&lt;input type=<span class="string">"text"</span> name=<span class="string">"nameMap['one'].secondname"</span>&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>Controller类同上</p><p>User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    String password;</span><br><span class="line">    Integer age;</span><br><span class="line">    List&lt;Name&gt; nameList;</span><br><span class="line">    Map&lt;String, Name&gt; nameMap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", nameList="</span> + nameList +</span><br><span class="line">                <span class="string">", nameMap="</span> + nameMap +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Name&gt; <span class="title">getNameList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nameList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNameList</span><span class="params">(List&lt;Name&gt; nameList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nameList = nameList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Name&gt; <span class="title">getNameMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nameMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNameMap</span><span class="params">(Map&lt;String, Name&gt; nameMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nameMap = nameMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Name类同上</p><h3 id="请求参数乱码问题"><a href="#请求参数乱码问题" class="headerlink" title="请求参数乱码问题"></a>请求参数乱码问题</h3><p>在web.xml中配置Spring提供的过滤器类：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置过滤器，解决中文乱码的问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filterclass</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定字符集 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/*代表拦截所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h3><p>任何变量从jsp传到控制器用的都是字符串，当其到控制器时，Spring有自定义的类型转换器将其转换为特定的类型的变量，当有些变量无法通过Spring自定义类型转换器转换类型时，我们可以自己定义一个类型转换器来帮助转换。</p><p>例如Data类，默认日期格式为1999/10/1，当我们输入1999-10-1时则会发生错误，Spring自定义类型转换器无法转换，此时我们自己定义一个类型转换器，来讲1999-10-1格式的日期字符串转换成Data类。</p><h4 id="定义一个类型转换器类"><a href="#定义一个类型转换器类" class="headerlink" title="定义一个类型转换器类"></a>定义一个类型转换器类</h4><p>自定义的类型转换器类需要继承一个<strong>Converter</strong>接口，要看清楚是Spring核心包中的Converter接口：<img src="http://image.zhangzef.com/20200214184006.png" alt="img"></p><p>类中的两个泛型S和T分别写要从类型S转换到类型T</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToData</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (source==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"值空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> dateFormat.parse(source);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置自定义类型转换器"><a href="#配置自定义类型转换器" class="headerlink" title="配置自定义类型转换器"></a>配置自定义类型转换器</h4><p>在resources中的xml配置文件中配置自定义类型转换器，就是你配置视图解析器的那个配置文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionServiceFactoryBean"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.utils.StringToData"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置spring开启注解mvc的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionServiceFactoryBean"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里还要修改开启注解mvc的支持，因为在开启注解mvc的支持时是默认开启了处理器映射器、处理器适配器、视图解析器三大组件，而现在想用类型转换器，则必须在这里配置开启。</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="RequestParam"></a>RequestParam</h3><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><p>作用：把请求中的指定名称的参数传递给控制器中的形参赋值</p><p>属性：</p><ol><li>value：请求参数中的名称（当你使用了RequestParam注解之后就必须按照value中的命名来传递参数，不能再像请求参数绑定中，把参数命名成相同的名字了。）</li><li>required：请求参数中是否必须提供此参数，默认值是true（即必须提供，如果不提供将报错）</li></ol><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="anno/testRp?name=haha"&gt;testRequestParam&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"anno"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testRp"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRp</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>, required = <span class="keyword">false</span>)</span> String username)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (username==<span class="keyword">null</span>)</span><br><span class="line">            System.out.println(<span class="string">"无用户名"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(username);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中我们把required改为false，则当没有参数传递给username时它为null。当使用RequestParam时则必须按照它的value在jsp页面命名，不能像请求参数绑定中命名成相同的名字。例如在这个例子中，jsp页面想要传递参数给控制器中的username，就必须给控制器传递一个名为name的参数，而不能传递一个名为username的参数。</p><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="RequestBody"></a>RequestBody</h3><h4 id="使用说明-1"><a href="#使用说明-1" class="headerlink" title="使用说明"></a>使用说明</h4><p>作用：用于获取请求体的内容，直接使用得到是key=value&amp;key=value…结构的数据。（注意：get方法不可以，因为get没有请求体，它把参数都封装到地址栏了）</p><p>属性：</p><ol><li>required：是否必须有请求体，默认值是true。当取值为true时,get请求方式会报错。如果取值为false，get请求得到是null。</li></ol><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><h5 id="index-jsp-1"><a href="#index-jsp-1" class="headerlink" title="index.jsp"></a>index.jsp</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"anno/testRequestBody"</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"anno"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testRequestBody"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestBody</span><span class="params">(@RequestBody String body)</span></span>&#123;</span><br><span class="line">        System.out.println(body);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本例中的请求体输出示例：username=int64Saturday&amp;password=111&amp;age=111</p><h3 id="PathVaribale"><a href="#PathVaribale" class="headerlink" title="PathVaribale"></a>PathVaribale</h3><h4 id="使用说明-2"><a href="#使用说明-2" class="headerlink" title="使用说明"></a>使用说明</h4><p>作用：用于绑定url中的占位符。例如：请求url中 /delete/{id}，这个{id}就是url占位符。<br>url支持占位符是spring3.0之后加入的。是springmvc支持rest风格URL的一个重要标志。</p><p>那么什么时rest风格的URL呢，一般rest风格都称为restful风格，它其实就是一种规范，区别于我们平时普通的url，见下图</p><p><img src="http://image.zhangzef.com/20200214184007.png" alt="img" style="zoom:50%;"></p><p>（图中的FindById()方法少写了个参数id）从图中可看出普通的url每个方法都会对应一个地址，但是restful风格的url相同类下的每个方法地址都是相同的。restful风格的url是通过http协议的四种方法来寻找要执行的方法，即：</p><ol><li>GET 用来获取资源</li><li>POST 用来新建资源</li><li>PUT 用来更新资源</li><li>DELETE 用来删除资源。</li></ol><p>但是当遇到相同的方法时，如上图的FindAll()方法和FindById(id)方法，它会通过不同的参数来寻找特定的方法，有些类似函数的重载。上图中的{id}是占位符，当我们想调用FindById(id)方法时，参数id=10，此时的url应该为：/user/10</p><p>但是form表单只支持GET和POST方法，而DELETE、PUT等方法并不支持，Spring3.0添加了一个过滤器能帮我们模拟这些方法，但是配置比较麻烦，不如其他的一些类实现容易，这里就不赘述了，想了解的可以自行百度。</p><p>属性：</p><ol><li>value：用于指定url中占位符名称。</li><li>required：是否必须提供占位符。</li></ol><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><h5 id="index-jsp-2"><a href="#index-jsp-2" class="headerlink" title="index.jsp"></a>index.jsp</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"anno/10"</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h5 id="Controller-2"><a href="#Controller-2" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"anno"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/&#123;sid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testPathVaribale</span><span class="params">(@PathVariable(value = <span class="string">"sid"</span>)</span> String id)</span>&#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后控制台输出结果为10。</p><h3 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="RequestHeader"></a>RequestHeader</h3><h4 id="使用说明-3"><a href="#使用说明-3" class="headerlink" title="使用说明"></a>使用说明</h4><p>作用：用于获取请求消息头。http请求头有很多种，详情见百度百科：<a href="https://baike.baidu.com/item/http%E8%AF%B7%E6%B1%82%E5%A4%B4/6623287?fr=aladdin" target="_blank" rel="noopener">http请求头</a></p><p>属性：</p><ol><li>value：提供消息头名称  </li><li>required：是否必须有此消息头</li></ol><p>注：  在实际开发中一般不怎么用。</p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><h5 id="index-jsp-3"><a href="#index-jsp-3" class="headerlink" title="index.jsp"></a>index.jsp</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="anno/testRequestHeader"&gt;testRequestHeader&lt;/a&gt;</span><br></pre></td></tr></table></figure><h5 id="Controller-3"><a href="#Controller-3" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testRequestHeader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestHeader</span><span class="params">(@RequestHeader(value = <span class="string">"Accept"</span>)</span> String header)</span>&#123;</span><br><span class="line">    System.out.println(header);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CookieValue"><a href="#CookieValue" class="headerlink" title="CookieValue"></a>CookieValue</h3><h4 id="使用说明-4"><a href="#使用说明-4" class="headerlink" title="使用说明"></a>使用说明</h4><p>作用：用于把指定 cookie 名称的值传入控制器方法参数。</p><p>属性：</p><ol><li>value：指定 cookie 的名称。  </li><li>required：是否必须有此 cookie。</li></ol><p>注：  在实际开发中一般不怎么用。</p><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><h5 id="index-jsp-4"><a href="#index-jsp-4" class="headerlink" title="index.jsp"></a>index.jsp</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="anno/testCookieValue"&gt;testRequestHeader&lt;/a&gt;</span><br></pre></td></tr></table></figure><h5 id="Controller-4"><a href="#Controller-4" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testCookieValue"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testCookieValue</span><span class="params">(@CookieValue(value = <span class="string">"JSESSIONID"</span>)</span> String cookieValue)</span>&#123;</span><br><span class="line">    System.out.println(cookieValue);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="ModelAttribute"></a>ModelAttribute</h3><h4 id="使用说明-5"><a href="#使用说明-5" class="headerlink" title="使用说明"></a>使用说明</h4><p>作用：该注解是 SpringMVC4.3 版本以后新加入的。它可以用于修饰方法和参数。 </p><ol><li>出现在方法上，表示当前方法会在控制器的方法执行之前，先执行。它可以修饰没有返回值的方法，也可以修饰有具体返回值的方法。  </li><li>出现在参数上，获取指定的数据给参数赋值。</li></ol><p>属性：</p><ol><li>value：用于获取数据的 key。key 可以是 POJO 的属性名称，也可以是 map 结构的 key。</li></ol><p>应用场景：</p><p>当表单提交数据不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据。</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><h5 id="index-jsp-5"><a href="#index-jsp-5" class="headerlink" title="index.jsp"></a>index.jsp</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"anno/testModelAttribute"</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h5 id="Controller-5"><a href="#Controller-5" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testModelAttribute"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span> <span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testModelAttribute执行了..."</span> + user.getUsername());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"showUser执行了..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后控制台输出结果为：<br>showUser执行了…<br>testModelAttribute执行了…int64Saturday</p><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><p>有返回值，表单中没有输入age的文本框，如果不进行配置，则age为null</p><h5 id="index-jsp-6"><a href="#index-jsp-6" class="headerlink" title="index.jsp"></a>index.jsp</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"anno/testModelAttribute"</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h5 id="Controller-6"><a href="#Controller-6" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testModelAttribute"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span> <span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testModelAttribute执行了..."</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">showUser</span><span class="params">(String username)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="comment">//模拟数据库查询</span></span><br><span class="line">    user.setAge(<span class="number">10</span>);</span><br><span class="line">    user.setPassword(<span class="string">"111"</span>);</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    System.out.println(<span class="string">"showUser执行了..."</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h4><p>无返回值，没有返回值时，需要方法提供一个map结构，将User对象存入map中，然后在控制器方法中用ModelAttribute修饰形参从map中取出该对象。</p><h5 id="index-jsp-7"><a href="#index-jsp-7" class="headerlink" title="index.jsp"></a>index.jsp</h5><p>同上</p><h5 id="Controller-7"><a href="#Controller-7" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUser</span><span class="params">(String username, Map&lt;String, User&gt; map)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="comment">//模拟数据库查询</span></span><br><span class="line">    user.setAge(<span class="number">10</span>);</span><br><span class="line">    user.setPassword(<span class="string">"111"</span>);</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    map.put(<span class="string">"user"</span>, user);</span><br><span class="line">    System.out.println(<span class="string">"showUser执行了..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SessionAttribute"><a href="#SessionAttribute" class="headerlink" title="SessionAttribute"></a>SessionAttribute</h3><h4 id="使用说明-6"><a href="#使用说明-6" class="headerlink" title="使用说明"></a>使用说明</h4><p>作用：用于多次执行控制器方法间的参数共享，作用于类上。</p><p>属性：</p><ol><li>value：用于指定存入的属性名称</li><li>type：用于指定存入的数据类型</li></ol><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><h5 id="index-jsp-8"><a href="#index-jsp-8" class="headerlink" title="index.jsp"></a>index.jsp</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="anno/testSaveSessionAttribute"&gt;SaveSessionAttribute&lt;/a&gt;&lt;br&gt;</span><br><span class="line">&lt;a href="anno/testGetSessionAttribute"&gt;GetSessionAttribute&lt;/a&gt;&lt;br&gt;</span><br><span class="line">&lt;a href="anno/testDeleteSessionAttribute"&gt;DeleteSessionAttribute&lt;/a&gt;</span><br></pre></td></tr></table></figure><h5 id="Controller-8"><a href="#Controller-8" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"anno"</span>)</span><br><span class="line"><span class="meta">@SessionAttributes</span>(value = &#123;<span class="string">"username"</span>, <span class="string">"password"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testSaveSessionAttribute"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSaveSessionAttribute</span> <span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"向session中保存了数据"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"username"</span>, <span class="string">"root"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"password"</span>, <span class="string">"1234"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testGetSessionAttribute"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testGetSessionAttribute</span> <span class="params">(ModelMap modelMap)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"从session中获取了数据"</span>);</span><br><span class="line">        String username = (String)modelMap.get(<span class="string">"username"</span>);</span><br><span class="line">        String password = (String)modelMap.get(<span class="string">"password"</span>);</span><br><span class="line">        System.out.println(<span class="string">"username:"</span> + username + <span class="string">"\tpassword:"</span> + password);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testDeleteSessionAttribute"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testDeleteSessionAttribute</span> <span class="params">(SessionStatus sessionStatus)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"从session中删除了数据"</span>);</span><br><span class="line">        <span class="comment">//设置完成，就是这些操作做完了，它会帮你把session中的数据清除</span></span><br><span class="line">        sessionStatus.setComplete();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>超链接点击步骤：存值-&gt;取值-&gt;删除-&gt;取值<br>控制台输出：</p><blockquote><p>  向session中保存了数据<br>  从session中获取了数据<br>  username:root    password:1234<br>  从session中删除了数据<br>  从session中获取了数据<br>  username:null    password:null</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;请求参数绑定&quot;&gt;&lt;a href=&quot;#请求参数绑定&quot; class=&quot;headerlink&quot; title=&quot;请求参数绑定&quot;&gt;&lt;/a&gt;请求参数绑定&lt;/h2&gt;&lt;h3 id=&quot;绑定机制&quot;&gt;&lt;a href=&quot;#绑定机制&quot; class=&quot;headerlink&quot; title=&quot;绑
      
    
    </summary>
    
      <category term="JavaWeb" scheme="zhangzef.com/categories/JavaWeb/"/>
    
    
      <category term="Spring" scheme="zhangzef.com/tags/Spring/"/>
    
      <category term="框架" scheme="zhangzef.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC" scheme="zhangzef.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC--一、SpringMVC入门</title>
    <link href="zhangzef.com/2019/11/14/SpringMVC--%E4%B8%80%E3%80%81SpringMVC%E5%85%A5%E9%97%A8/"/>
    <id>zhangzef.com/2019/11/14/SpringMVC--一、SpringMVC入门/</id>
    <published>2019-11-14T12:59:18.000Z</published>
    <updated>2020-02-15T15:09:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三层架构和MVC"><a href="#三层架构和MVC" class="headerlink" title="三层架构和MVC"></a>三层架构和MVC</h2><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><ol><li>咱们开发服务器端程序，一般都基于两种形式，一种C/S架构程序，一种B/S架构程序</li><li>使用Java语言基本上都是开发B/S架构的程序，B/S架构又分成了三层架构</li><li>三层架构<ol><li>表现层：WEB层，用来和客户端进行数据交互的。表现层一般会采用MVC的设计模型</li><li>业务层：处理公司具体的业务逻辑的</li><li>持久层：用来操作数据库的</li></ol></li></ol><p><img src="http://image.zhangzef.com/20200214184141.png" alt="img"></p><h3 id="MVC模型"><a href="#MVC模型" class="headerlink" title="MVC模型"></a>MVC模型</h3><ol><li>MVC全名是Model View Controller 模型视图控制器，每个部分各司其职。<ol start="2"><li>Model：数据模型，JavaBean的类，用来进行数据封装。</li><li>View：指JSP、HTML用来展示数据给用户</li><li>Controller：用来接收用户的请求，整个流程的控制器。用来进行数据校验等。</li></ol></li></ol><h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><p>而SpringMVC就是一种基于Java的实现MVC设计模型的请求驱动类型的轻量级Web框架，属于 Spring FrameWork 的后续产品，已经融合在Spring Web Flow里面。</p><h2 id="SpringMVC入门案例"><a href="#SpringMVC入门案例" class="headerlink" title="SpringMVC入门案例"></a>SpringMVC入门案例</h2><h3 id="导入的包"><a href="#导入的包" class="headerlink" title="导入的包"></a>导入的包</h3><p>创建maven项目，在pom.xml文件中导入如下包：</p><ol><li>spring-context</li><li>spring-web</li><li>spring-webmvc</li><li>servlet-api</li><li>jsp-api</li></ol><h3 id="配置核心控制器（DispatcherServlet）"><a href="#配置核心控制器（DispatcherServlet）" class="headerlink" title="配置核心控制器（DispatcherServlet）"></a>配置核心控制器（DispatcherServlet）</h3><p>web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringMVC核心控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置Servlet的初始化参数，读取springmvc的配置文件(我这里是springmvc.xml)，创建spring容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置servlet启动时加载对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置mapping为/，任何请求都会经过servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置源文件"><a href="#配置源文件" class="headerlink" title="配置源文件"></a>配置源文件</h3><p>在src/main/resources文件下创建一个xml用于配置springmvc各种组件，这里创建springmvc.xml，</p><h4 id="导入命名空间"><a href="#导入命名空间" class="headerlink" title="导入命名空间"></a>导入命名空间</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置组件"><a href="#配置组件" class="headerlink" title="配置组件"></a>配置组件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置spring创建容器时要扫描的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--要跳转的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后缀名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置spring开启注解mvc的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写view层"><a href="#编写view层" class="headerlink" title="编写view层"></a>编写view层</h3><p>index.jsp：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">hello&lt;br&gt;</span><br><span class="line">&lt;a href="hello"&gt;翻译&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在WEB-INF目录下创建pages文件夹，编写success.jsp：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a&gt;你好&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h3><p>HelloController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">translate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"translate..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例过程分析"><a href="#案例过程分析" class="headerlink" title="案例过程分析"></a>案例过程分析</h3><ol><li>服务器启动，应用被加载。读取到web.xml中的配置创建spring容器并且初始化容器中的对象。因为配置了load-on-startup标签，所以会创建DispatcherServlet对象，就会加载springmvc.xml配置文件。开启了注解扫描，那么HelloController对象就会被创建。</li><li>浏览器发送请求（即index.jsp），被DispatherServlet捕获，该Servlet并不处理请求，而是把请求转发出去。转发的路径是根据请求URL，匹配@RequestMapping中的内容（即HelloController的translate）。</li><li>根据执行方法的返回值，再根据配置的视图解析器，去指定的目录下查找指定名称的JSP文件。</li><li>渲染结果视图，响应浏览器。</li></ol><p>响应流程：</p><p><img src="http://image.zhangzef.com/20200214184142.png" alt="img"></p><h2 id="入门案例涉及的组件"><a href="#入门案例涉及的组件" class="headerlink" title="入门案例涉及的组件"></a>入门案例涉及的组件</h2><h4 id="DispatcherServlet：前端控制器"><a href="#DispatcherServlet：前端控制器" class="headerlink" title="DispatcherServlet：前端控制器"></a>DispatcherServlet：前端控制器</h4><p>用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。</p><h4 id="HandlerMapping：处理器映射器"><a href="#HandlerMapping：处理器映射器" class="headerlink" title="HandlerMapping：处理器映射器"></a>HandlerMapping：处理器映射器</h4><p>HandlerMapping负责根据用户请求找到Handler即处理器，SpringMVC提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p><h4 id="Handler：处理器"><a href="#Handler：处理器" class="headerlink" title="Handler：处理器"></a>Handler：处理器</h4><p>它就是我们开发中要编写的具体业务控制器。由DispatcherServlet把用户请求转发到Handler。由Handler对具体的用户请求进行处理。</p><h4 id="HandlAdapter：处理器适配器"><a href="#HandlAdapter：处理器适配器" class="headerlink" title="HandlAdapter：处理器适配器"></a>HandlAdapter：处理器适配器</h4><p>通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p><h4 id="View-Resolver：视图解析器"><a href="#View-Resolver：视图解析器" class="headerlink" title="View Resolver：视图解析器"></a>View Resolver：视图解析器</h4><p>View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。</p><h4 id="View：视图"><a href="#View：视图" class="headerlink" title="View：视图"></a>View：视图</h4><p>SpringMVC框架提供了很多的View视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是jsp。<br>一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</p><h4 id="mvc-annotation-driven说明"><a href="#mvc-annotation-driven说明" class="headerlink" title="mvc:annotation-driven说明"></a>mvc:annotation-driven说明</h4><p>在SpringMVC的各个组件中，处理器映射器、处理器适配器、视图解析器称为SpringMVC的三大组件。 使用mvc:annotation-driven自动加载RequestMappingHandlerMapping（处理映射器）和RequestMappingHandlerAdapter（处理适配器），可用在SpringMVC.xml配置文件中使用mvc:annotation-driven替代注解处理器和适配器的配置。</p><p>它就相当于在xml中配置了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Begin --&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- HandlerMapping --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- HandlerAdapter --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- HadnlerExceptionResolvers --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">     <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- End --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="RequestMapping注解"></a>RequestMapping注解</h3><p>RequestMapping注解的作用是建立请求URL和处理方法之间的对应关系</p><p>RequestMapping注解可以作用在方法和类上：</p><ol><li>作用在类上：请求URL的第一级访问目录。此处不写的话，就相当于应用的根目录。写的话需要以/开头。 它出现的目的是为了使我们的URL可以按照模块化管理，例如：<br> 账户模块：<br> /account/add<br> /account/update<br> /account/delete<br> …<br> 订单模块：<br> /order/add<br> /order/update<br> /order/delete<br> 前面相同的部分就是把RequsetMapping写在类上，使我们的URL更加精细。</li><li>作用在方法上：URL的二级访问目录</li><li>细节：路径可以不编写 / 表示应用的根目录开始</li><li>细节：${ pageContext.request.contextPath }也可以省略不写，但是路径上不能写 /</li></ol><p>RequestMapping的属性</p><ol><li>path 指定请求路径的url</li><li>value value属性和path属性是一样的</li><li>mthod 指定该方法的请求方式（get方法和post方法）</li><li>params 用于指定限制请求参数的条件。它支持简单的表达式。要求请求参数的key和value必须和配置的一模一样。例如：<br> params = {“accountName”}，表示请求参数必须有accountName<br> params = {“moeny!100”}，表示请求参数中money不能是100。</li><li>headers 发送的请求中必须包含的请求头（不常用）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;三层架构和MVC&quot;&gt;&lt;a href=&quot;#三层架构和MVC&quot; class=&quot;headerlink&quot; title=&quot;三层架构和MVC&quot;&gt;&lt;/a&gt;三层架构和MVC&lt;/h2&gt;&lt;h3 id=&quot;三层架构&quot;&gt;&lt;a href=&quot;#三层架构&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="JavaWeb" scheme="zhangzef.com/categories/JavaWeb/"/>
    
    
      <category term="Spring" scheme="zhangzef.com/tags/Spring/"/>
    
      <category term="框架" scheme="zhangzef.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC" scheme="zhangzef.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Python3杂记</title>
    <link href="zhangzef.com/2019/11/11/Python3%E6%9D%82%E8%AE%B0/"/>
    <id>zhangzef.com/2019/11/11/Python3杂记/</id>
    <published>2019-11-11T15:05:10.000Z</published>
    <updated>2020-02-15T15:08:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="amp-开头的编码显示成中文"><a href="#amp-开头的编码显示成中文" class="headerlink" title="&amp;#开头的编码显示成中文"></a>&amp;#开头的编码显示成中文</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> html</span><br><span class="line"></span><br><span class="line">print(html.unescape(<span class="string">'&amp;#20013;&amp;#22269;'</span>))</span><br><span class="line"><span class="comment">#中国</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;amp-开头的编码显示成中文&quot;&gt;&lt;a href=&quot;#amp-开头的编码显示成中文&quot; class=&quot;headerlink&quot; title=&quot;&amp;amp;#开头的编码显示成中文&quot;&gt;&lt;/a&gt;&amp;amp;#开头的编码显示成中文&lt;/h1&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="Python3" scheme="zhangzef.com/categories/Python3/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring--四、Spring中的JdbcTemplate和事务控制</title>
    <link href="zhangzef.com/2019/11/08/Spring--%E5%9B%9B%E3%80%81Spring%E4%B8%AD%E7%9A%84JdbcTemplate%E5%92%8C%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6/"/>
    <id>zhangzef.com/2019/11/08/Spring--四、Spring中的JdbcTemplate和事务控制/</id>
    <published>2019-11-08T02:48:17.000Z</published>
    <updated>2020-02-15T15:08:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring中的JdbcTemplate"><a href="#Spring中的JdbcTemplate" class="headerlink" title="Spring中的JdbcTemplate"></a>Spring中的JdbcTemplate</h2><h3 id="JdbcTemplate概述"><a href="#JdbcTemplate概述" class="headerlink" title="JdbcTemplate概述"></a>JdbcTemplate概述</h3><p>它是spring框架中提供的一个对象，是对原始Jdbc API对象的简单封装。spring框架为我们提供了很多的操作模板类。</p><ul><li>操作关系型数据的： <ul><li>JdbcTemplate </li><li>HibernateTemplate</li></ul></li><li>操作nosql数据库的： <ul><li>RedisTemplate</li></ul></li><li>操作消息队列的： <ul><li>JmsTemplate</li></ul></li></ul><p><img src="http://image.zhangzef.com/20200214184348.jpg" alt="img" style="zoom:67%;"></p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>需要导入的jar包（版本可自行选择）：</p><ul><li>spring-jdbc-5.1.9.RELEASE.jar（JDBC）</li><li>spring-tx-5.1.9.RELEASE.jar（关于事务的）</li><li>spring-context-5.1.9.RELEASE.jar（IOC）</li></ul><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置数据源（Spring内置数据源）"><a href="#配置数据源（Spring内置数据源）" class="headerlink" title="配置数据源（Spring内置数据源）"></a>配置数据源（Spring内置数据源）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test?serverTimezone=UTC"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置JdbcTemplate"><a href="#配置JdbcTemplate" class="headerlink" title="配置JdbcTemplate"></a>配置JdbcTemplate</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="操作示例"><a href="#操作示例" class="headerlink" title="操作示例"></a>操作示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</span><br><span class="line">    String username, password;</span><br><span class="line">    <span class="keyword">double</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"UserManager&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Spring容器</span></span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line"><span class="comment">//根据id获取bean对象</span></span><br><span class="line">JdbcTemplate jt = (JdbcTemplate)ac.getBean(<span class="string">"jdbcTemplate"</span>);</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="comment">//BeanPropertyRowMapper是将查询的每一行封装成一个对象，放到集合中</span></span><br><span class="line"><span class="comment">//这里就是将查询到的username、password、money三个属性封装成一个UserManager类</span></span><br><span class="line">List&lt;UserManager&gt; userManagers =  jt.query(<span class="string">"select * from user"</span>,</span><br><span class="line">                                           <span class="keyword">new</span> BeanPropertyRowMapper&lt;UserManager(UserManager.class));</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">jt.update(<span class="string">"delete from user where username = ?"</span>,<span class="string">"aaa"</span>);</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">jt.update(<span class="string">"insert into user(username,password,money)values(?,?)"</span>,<span class="string">"aaa"</span>,<span class="string">"fff"</span>,<span class="number">5000</span>);</span><br><span class="line"><span class="comment">//更新</span></span><br><span class="line">jt.update(<span class="string">"update user set money = money-? where username = ?"</span>,<span class="number">300</span>,<span class="string">"aaa"</span>);</span><br></pre></td></tr></table></figure><h3 id="在DAO中使用JdbcTemplate"><a href="#在DAO中使用JdbcTemplate" class="headerlink" title="在DAO中使用JdbcTemplate"></a>在DAO中使用JdbcTemplate</h3><p>实体类如上所示</p><h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><p>在DAO类中定义JdbcTemplate</p><p>UserManager的DAO类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManagerDao</span> <span class="keyword">implements</span> <span class="title">IUserManagerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserManager <span class="title">FindUserByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        List&lt;UserManager&gt; userManagers = jdbcTemplate.query(<span class="string">"select * from user where username=?"</span>,</span><br><span class="line">                <span class="keyword">new</span> BeanPropertyRowMapper&lt;UserManager&gt;(UserManager.class), username);</span><br><span class="line">        <span class="keyword">return</span> userManagers.isEmpty()?<span class="keyword">null</span>:userManagers.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserManager&gt; <span class="title">FindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(<span class="string">"select * from user"</span>,</span><br><span class="line">                <span class="keyword">new</span> BeanPropertyRowMapper&lt;UserManager&gt;(UserManager.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateUserByName</span><span class="params">(UserManager userManager)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"update user set password=?, money=? where username=?"</span>,</span><br><span class="line">                userManager.getPassword(), userManager.getMoney(), userManager.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过xml文件配置该DAO类：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test?serverTimezone=UTC"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userManagerDao"</span> <span class="attr">class</span>=<span class="string">"com.dao.Impl.UserManagerDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有一个小问题，当DAO类过多时以下代码会有很多重复代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JdbcTemplate jdbcTemplate;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><p>让DAO类继承JdbcDaoSupport</p><p>JdbcDaoSupport是spring框架为我们提供的一个类，该类中定义了一个JdbcTemplate对象，我们可以直接获取使用，只需要继承该类就可以了。而且此时我们不需要再用xml文件注入jdbcTemplate了，而可以直接给UserManagerDao类注入一个dataSource对象（因为JdbcDaoSupport类有dataSource的set方法，他会自动用dataSource创建JdbcTemplate），可见xml文件配置方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManagerDao</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">IUserManagerDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserManager <span class="title">FindUserByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        List&lt;UserManager&gt; userManagers = </span><br><span class="line">            <span class="keyword">super</span>.getJdbcTemplate().query(<span class="string">"select * from user where username=?"</span>,</span><br><span class="line">                <span class="keyword">new</span> BeanPropertyRowMapper&lt;UserManager&gt;(UserManager.class), username);</span><br><span class="line">        <span class="keyword">return</span> userManagers.isEmpty()?<span class="keyword">null</span>:userManagers.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserManager&gt; <span class="title">FindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getJdbcTemplate().query(<span class="string">"select * from user"</span>,</span><br><span class="line">                <span class="keyword">new</span> BeanPropertyRowMapper&lt;UserManager&gt;(UserManager.class));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateUserByName</span><span class="params">(UserManager userManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.getJdbcTemplate().update(<span class="string">"update user set password=?, money=? where username=?"</span>,</span><br><span class="line">                userManager.getPassword(), userManager.getMoney(), userManager.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test?serverTimezone=UTC"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userManagerDao"</span> <span class="attr">class</span>=<span class="string">"com.dao.Impl.UserManagerDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p>当使用第二种方法时确实减少了代码的冗余，但是当使用注解配置时，由于JdbcDaoSupport类是Spring的类，我们无法修改，则<strong>第二种方法</strong>只有当使用<strong>xml文件配置</strong>时才可以使用，<strong>第一种方法</strong>可以在使用<strong>注解</strong>时使用。</p><h2 id="Spring中的事务控制"><a href="#Spring中的事务控制" class="headerlink" title="Spring中的事务控制"></a>Spring中的事务控制</h2><h3 id="Spring中的事务控制概述"><a href="#Spring中的事务控制概述" class="headerlink" title="Spring中的事务控制概述"></a>Spring中的事务控制概述</h3><p>事务控制即让由一系列动作组成的事务保持原子性、一致性、隔离性、持久性。</p><ul><li>原子性（Atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。</li><li>一致性（Consistency）：一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不会是部分完成部分失败。在现实中的数据不应该被破坏。</li><li>隔离性（Isolation）：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。</li><li>持久性（Durability）：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。通常情况下，事务的结果被写到持久化存储器中。</li></ul><p>举一个经典的例子就是银行转账，银行转账分为几步：转账开始，账户一扣钱，账户二加钱，转账结束。但是当账户一扣过钱之后系统出现了某种异常转账行为不能继续进行。如果没有事务控制这次转账将会被强行结束，而事务控制则会保持其一致性，开启回滚事务，让所有信息恢复到转账开始前的状态。</p><p>Spring的事务控制都是基于AOP的，分为两种，一种是<strong>声明式事务控制</strong>（即用配置的方式来实现），一种是<strong>编程式事务控制</strong>（即用编程的方式来实现）。</p><h3 id="Spring事务控制API介绍"><a href="#Spring事务控制API介绍" class="headerlink" title="Spring事务控制API介绍"></a>Spring事务控制API介绍</h3><p><img src="http://image.zhangzef.com/20200214184346.jpg" alt="img"></p><h4 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h4><p>事务管理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">()</span></span>;<span class="comment">//获取事务的状态信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>;<span class="comment">//提交事务</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>;<span class="comment">//回滚事务</span></span><br></pre></td></tr></table></figure><h4 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h4><p>事务的定义信息对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span></span>;<span class="comment">//获取事务对象名</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getIsolationLevel</span><span class="params">()</span></span>;<span class="comment">//获取事务隔离级</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getPropagationBehavior</span><span class="params">()</span></span>;<span class="comment">//获取事务传播行为</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTimeout</span><span class="params">()</span></span>;<span class="comment">//获取事务超时时间</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isReadOnly</span><span class="params">()</span></span>;<span class="comment">//获取事务是否只读</span></span><br></pre></td></tr></table></figure><ul><li>读写型事务：增、删、改</li><li>只读型事务：查询</li></ul><h5 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h5><p><img src="http://image.zhangzef.com/20200214184345.png" alt="img"></p><h5 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h5><ul><li><strong>REQUIRED:如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值）</strong> </li><li><strong>SUPPORTS:支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</strong> </li><li>MANDATORY：使用当前的事务，如果当前没有事务，就抛出异常 </li><li>REQUERS_NEW:新建事务，如果当前在事务中，把当前事务挂起。 </li><li>NOT_SUPPORTED:以非事务方式执行操作，如果当前存在事务，就把当前事务挂起 </li><li>NEVER:以非事务方式运行，如果当前存在事务，抛出异常 </li><li>NESTED:如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行REQUIRED类似的操作。</li></ul><h5 id="超时时间"><a href="#超时时间" class="headerlink" title="超时时间"></a>超时时间</h5><p>默认值是-1，没有超时限制。如果有，以秒为单位进行设置。</p><h5 id="是否是只读事务"><a href="#是否是只读事务" class="headerlink" title="是否是只读事务"></a>是否是只读事务</h5><p>建议查询时设置为只读。</p><h4 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h4><p>描述了某个时间点上十五对象的状态信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>;<span class="comment">//刷新事务</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasSavepoint</span><span class="params">()</span></span>;<span class="comment">//获取是否存在存储点</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isCompleted</span><span class="params">()</span></span>;<span class="comment">//获取事务是否完成</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isNewTransaction</span><span class="params">()</span></span>;<span class="comment">//获取事务是否为新事务</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isRollbackOnly</span><span class="params">()</span></span>;<span class="comment">//获取事务是否回滚</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setRollbackOnly</span><span class="params">()</span></span>;<span class="comment">//设置事务回滚</span></span><br></pre></td></tr></table></figure><h3 id="基于XML的声明式事务控制"><a href="#基于XML的声明式事务控制" class="headerlink" title="基于XML的声明式事务控制"></a>基于XML的声明式事务控制</h3><h4 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h4><h5 id="设置打包方式和导包"><a href="#设置打包方式和导包" class="headerlink" title="设置打包方式和导包"></a>设置打包方式和导包</h5><p>先设置打包方式为jar包，导入jar包：</p><ul><li>spring-jdbc</li><li>spring-tx</li><li>spring-context</li><li>aspectjweaver</li><li>数据库驱动</li></ul><h5 id="创建Spring配置文件并导入约束（此处需要导入tx和aop的命名空间）"><a href="#创建Spring配置文件并导入约束（此处需要导入tx和aop的命名空间）" class="headerlink" title="创建Spring配置文件并导入约束（此处需要导入tx和aop的命名空间）"></a>创建Spring配置文件并导入约束（此处需要导入tx和aop的命名空间）</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx/spring-tx.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="准备数据库和实体类"><a href="#准备数据库和实体类" class="headerlink" title="准备数据库和实体类"></a>准备数据库和实体类</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">account</span>( </span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment, </span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">40</span>), </span><br><span class="line">    money <span class="built_in">float</span> </span><br><span class="line">)<span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_general_ci;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Float money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="准备Dao层接口和实现类"><a href="#准备Dao层接口和实现类" class="headerlink" title="准备Dao层接口和实现类"></a>准备Dao层接口和实现类</h5><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function">Account <span class="title">findAccountByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list =</span><br><span class="line">                getJdbcTemplate().query(<span class="string">"select * from account where id = ?"</span>,</span><br><span class="line">                        <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account.class), id);</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()?<span class="keyword">null</span>:list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list =</span><br><span class="line">                getJdbcTemplate().query(<span class="string">"select * from account where name = ?"</span>,</span><br><span class="line">                        <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account.class), name);</span><br><span class="line">        <span class="keyword">if</span> (list.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果不唯一"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        getJdbcTemplate().update(<span class="string">"update account set money = ? where id = ?"</span>,</span><br><span class="line">                account.getMoney(), account.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="准备业务层接口及实现类"><a href="#准备业务层接口及实现类" class="headerlink" title="准备业务层接口及实现类"></a>准备业务层接口及实现类</h5><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targetName, Float money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(IAccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targetName, Float money)</span> </span>&#123;</span><br><span class="line">        Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">        Account target = accountDao.findAccountByName(targetName);</span><br><span class="line"></span><br><span class="line">        source.setMoney(source.getMoney()-money);</span><br><span class="line">        target.setMoney(target.getMoney()+money);</span><br><span class="line"></span><br><span class="line">        accountDao.updateAccount(source);</span><br><span class="line">        accountDao.updateAccount(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在配置文件中配置数据源，业务层及持久层"><a href="#在配置文件中配置数据源，业务层及持久层" class="headerlink" title="在配置文件中配置数据源，业务层及持久层"></a>在配置文件中配置数据源，业务层及持久层</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test?serverTimezone=UTC"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置Dao--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.dao.Impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置service--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.service.Impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基于XML的配置步骤"><a href="#基于XML的配置步骤" class="headerlink" title="基于XML的配置步骤"></a>基于XML的配置步骤</h4><h5 id="配置事务管理器"><a href="#配置事务管理器" class="headerlink" title="配置事务管理器"></a>配置事务管理器</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置事务的通知及属性"><a href="#配置事务的通知及属性" class="headerlink" title="配置事务的通知及属性"></a>配置事务的通知及属性</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务的通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务的属性</span></span><br><span class="line"><span class="comment">        name为业务的核心方法名称，可以用通配符*代替</span></span><br><span class="line"><span class="comment">        find*即表示以find开头的方法，他比单用通配符优先级更高</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:method</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>read-only：是否是只读事务。默认false，不只读。 </li><li>isolation：指定事务的隔离级别。默认值是使用数据库的默认隔离级别。 </li><li>propagation：指定事务的传播行为。 </li><li>timeout：指定超时时间。默认值为：-1。永不超时。 </li><li>rollback-for：用于指定一个异常，当执行产生该异常时，事务回滚。产生其他异常，事务不回滚。没有默认值，任何异常都回滚。 </li><li>no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时，事务回滚。没有默认值，任何异常都回滚。</li></ul><h5 id="配置AOP切入点表达式及切入点表达式和事务通知的对应关系"><a href="#配置AOP切入点表达式及切入点表达式和事务通知的对应关系" class="headerlink" title="配置AOP切入点表达式及切入点表达式和事务通知的对应关系"></a>配置AOP切入点表达式及切入点表达式和事务通知的对应关系</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.service.Impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--建立切入点表达式和事务通知的对应关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    IAccountService accountService = (IAccountService) ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">    accountService.transfer(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="number">100f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于注解的声明式事务控制"><a href="#基于注解的声明式事务控制" class="headerlink" title="基于注解的声明式事务控制"></a>基于注解的声明式事务控制</h3><h4 id="环境搭建-2"><a href="#环境搭建-2" class="headerlink" title="环境搭建"></a>环境搭建</h4><h5 id="设置打包方式和导包-1"><a href="#设置打包方式和导包-1" class="headerlink" title="设置打包方式和导包"></a>设置打包方式和导包</h5><p>和基于XML配置相同</p><h5 id="创建spring的配置文件导入约束并配置扫描的包"><a href="#创建spring的配置文件导入约束并配置扫描的包" class="headerlink" title="创建spring的配置文件导入约束并配置扫描的包"></a>创建spring的配置文件导入约束并配置扫描的包</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="创建数据库表和实体类"><a href="#创建数据库表和实体类" class="headerlink" title="创建数据库表和实体类"></a>创建数据库表和实体类</h5><p>和基于XML配置相同</p><h5 id="创建Dao接口和实现类并使用注解让spring管理"><a href="#创建Dao接口和实现类并使用注解让spring管理" class="headerlink" title="创建Dao接口和实现类并使用注解让spring管理"></a>创建Dao接口和实现类并使用注解让spring管理</h5><p>注意：当使用注解时不能再继承JdbcDaoSupport了，必须手动创建JdbcTemplate类并用@Autowried注入，还要在bean.xml文件中配置JdbcTemplate。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list =</span><br><span class="line">                jdbcTemplate.query(<span class="string">"select * from account where id = ?"</span>,</span><br><span class="line">                        <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account.class), id);</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()?<span class="keyword">null</span>:list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list =</span><br><span class="line">                jdbcTemplate.query(<span class="string">"select * from account where name = ?"</span>,</span><br><span class="line">                        <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account.class), name);</span><br><span class="line">        <span class="keyword">if</span> (list.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果不唯一"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"update account set money = ? where id = ?"</span>,</span><br><span class="line">                account.getMoney(), account.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建业务层接口和实现类并使用注解让spring管理"><a href="#创建业务层接口和实现类并使用注解让spring管理" class="headerlink" title="创建业务层接口和实现类并使用注解让spring管理"></a>创建业务层接口和实现类并使用注解让spring管理</h5><p>去掉set方法，使用Autowried自动注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targetName, Float money)</span> </span>&#123;</span><br><span class="line">        Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">        Account target = accountDao.findAccountByName(targetName);</span><br><span class="line"></span><br><span class="line">        source.setMoney(source.getMoney()-money);</span><br><span class="line">        target.setMoney(target.getMoney()+money);</span><br><span class="line"></span><br><span class="line">        accountDao.updateAccount(source);</span><br><span class="line">        accountDao.updateAccount(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="其他xml配置"><a href="#其他xml配置" class="headerlink" title="其他xml配置"></a>其他xml配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test?serverTimezone=UTC"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基于注解的配置步骤"><a href="#基于注解的配置步骤" class="headerlink" title="基于注解的配置步骤"></a>基于注解的配置步骤</h4><h5 id="配置事务管理器-1"><a href="#配置事务管理器-1" class="headerlink" title="配置事务管理器"></a>配置事务管理器</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="在业务层使用-Transactional注解"><a href="#在业务层使用-Transactional注解" class="headerlink" title="在业务层使用@Transactional注解"></a>在业务层使用@Transactional注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>, propagation = Propagation.SUPPORTS)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">false</span>, propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targetName, Float money)</span> </span>&#123;</span><br><span class="line">        Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">        Account target = accountDao.findAccountByName(targetName);</span><br><span class="line"></span><br><span class="line">        source.setMoney(source.getMoney()-money);</span><br><span class="line">        target.setMoney(target.getMoney()+money);</span><br><span class="line"></span><br><span class="line">        accountDao.updateAccount(source);</span><br><span class="line">        accountDao.updateAccount(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该注解的属性和xml中的属性含义一致。该注解可以出现在接口上，类上和方法上。 </p><ul><li>出现接口上，表示该接口的所有实现类都有事务支持。 </li><li>出现在类上，表示类中所有方法有事务支持 </li><li>出现在方法上，表示方法有事务支持。 </li></ul><p>以上三个位置的优先级：方法&gt;类&gt;接口</p><h5 id="在配置文件中开启spring对注解事务的支持"><a href="#在配置文件中开启spring对注解事务的支持" class="headerlink" title="在配置文件中开启spring对注解事务的支持"></a>在配置文件中开启spring对注解事务的支持</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启spring对注解事务的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h4><p>同上</p><h2 id="Spring5的部分新特性"><a href="#Spring5的部分新特性" class="headerlink" title="Spring5的部分新特性"></a>Spring5的部分新特性</h2><h3 id="JDK升级"><a href="#JDK升级" class="headerlink" title="JDK升级"></a>JDK升级</h3><p>spring5.0在2017年9月发布了它的GA（通用）版本。该版本是基于jdk8编写的，所以jdk8以下版本将无法使用。同时，可以兼容jdk9版本。 tomcat版本要求8.5及以上。</p><p>jdk1.8版本（就是JDK8）运行时间如下：</p><p><img src="http://image.zhangzef.com/20200214184344.png" alt="img"></p><p>当切换到jdk1.7版本之后，运行时间如下：</p><p><img src="http://image.zhangzef.com/20200214184347.png" alt="img"></p><p>在框架中创建对象通常都是用<strong>反射</strong>来创建对象的。</p><h3 id="核心容器的更新"><a href="#核心容器的更新" class="headerlink" title="核心容器的更新"></a>核心容器的更新</h3><p>Spring Framework 5.0 现在支持候选组件索引作为类路径扫描的替代方案。该功能已经在类路径扫描器中添加，以简化添加候选组件标识的步骤。 </p><p>应用程序构建任务可以定义当前项目自己的 META-INF/spring.components 文件。在编译时，源模型是自包含的，JPA 实体和 Spring 组件是已被标记的。 </p><p>从索引读取实体而不是扫描类路径对于<strong>小于 200 个类的小型项目是没有明显差异</strong>。但对<strong>大型项目影响较大</strong>。加载组件索引开销更低。因此，随着类数的增加，索引读取的启动时间将保持不变。 </p><p>加载组件索引的耗费是廉价的。因此当类的数量不断增长，加上构建索引的启动时间仍然可以维持一个常数, 不过对于组件扫描而言，启动时间则会有明显的增长。 </p><p>这个对于我们处于大型 Spring 项目的开发者所意味着的，是应用程序的启动时间将被大大缩减。虽然 20 或者 30 秒钟看似没什么，但如果每天要这样登上好几百次，加起来就够你受的了。使用了组件索引的话，就能帮助你每天过的更加高效。 </p><p>你可以在 Spring 的 <a href="https://github.com/spring-projects/spring-framework/issues/16509" target="_blank" rel="noopener">Jira</a>上了解更多关于组件索引的相关信息。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>关于Spring框架的东西大概就这么多了。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring中的JdbcTemplate&quot;&gt;&lt;a href=&quot;#Spring中的JdbcTemplate&quot; class=&quot;headerlink&quot; title=&quot;Spring中的JdbcTemplate&quot;&gt;&lt;/a&gt;Spring中的JdbcTemplate&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="JavaWeb" scheme="zhangzef.com/categories/JavaWeb/"/>
    
    
      <category term="Spring" scheme="zhangzef.com/tags/Spring/"/>
    
      <category term="框架" scheme="zhangzef.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring--三、Spring的AOP（面向切面编程）</title>
    <link href="zhangzef.com/2019/10/28/Spring--%E4%B8%89%E3%80%81Spring%E7%9A%84AOP%EF%BC%88%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B%EF%BC%89/"/>
    <id>zhangzef.com/2019/10/28/Spring--三、Spring的AOP（面向切面编程）/</id>
    <published>2019-10-28T15:47:51.000Z</published>
    <updated>2020-02-15T15:08:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AOP概述"><a href="#AOP概述" class="headerlink" title="AOP概述"></a>AOP概述</h2><h3 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h3><blockquote><p>  在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p></blockquote><p>简单的说它就是把我们程序重复的代码抽取出来，在需要执行的时候，使用<strong>动态代理</strong>的技术，在<strong>不修改源码</strong>的基础上，对我们的<strong>已有方法进行增强</strong>。</p><h3 id="AOP的作用及优势"><a href="#AOP的作用及优势" class="headerlink" title="AOP的作用及优势"></a>AOP的作用及优势</h3><ul><li>作用： 在程序运行期间，不修改源码对已有方法进行增强。 </li><li>优势： <ul><li>减少重复代码 </li><li>提高开发效率 </li><li>维护方便</li></ul></li></ul><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p>先举个小栗子，即自产自销，在很久以前我们购买电脑都是直接从厂家手里购买，但是当生产厂家逐渐扩大，销售网络也逐渐扩大，生产厂家则无法顾及越来越大的销售业务，这时候代理商就出现了。他们通过赚取差价来帮助生产厂家销售产品，生产厂家就能专心生产，而中间赚取差价和销售这个操作就是对原有生产商功能的加强。</p><p><img src="http://image.zhangzef.com/20200214184246.png" alt="img" style="zoom:50%;"></p><p>所以我们现在知道，要想实现AOP，就需要来看一看<strong>代理</strong>是个什么东西。</p><h2 id="代理Proxy"><a href="#代理Proxy" class="headerlink" title="代理Proxy"></a>代理Proxy</h2><p>为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用，代理也可以对被代理类进行增强。</p><p>按照代理的创建时期，代理类可以分为两种： </p><ul><li>静态：由程序员创建代理类或特定工具自动生成源代码再对其编译。在程序运行前代理类的.class文件就已经存在了。</li><li><p>动态：在程序运行时运用反射机制动态创建而成。</p><p>注意：被代理类必须继承一个接口，或继承一个类（但是需要第三方类库（CGLib，被代理类不能用final修饰）支持来代理）</p></li></ul><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理就是程序员自己手动编写的源代码来对被代理对象进行增强。下面讲一个例子：</p><ul><li>IUserManager接口是用于规范UserManager类的一个接口。</li><li>UserManager类是被代理类，他有创建用户和删除用户两个方法。</li><li>UserManagerProxy类是代理类，他将UserManager类的两个方法进行增强（即在不修改源码的基础上添加了一些功能）。</li></ul><p>IUserManager：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserManager：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> <span class="keyword">implements</span> <span class="title">IUserManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加了用户："</span> +  name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除了用户："</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserManagerProxy：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManagerProxy</span> <span class="keyword">implements</span> <span class="title">IUserManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserManager usr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserManagerProxy</span><span class="params">(UserManager usr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.usr = usr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"start...addUser"</span>);</span><br><span class="line">            <span class="keyword">this</span>.usr.addUser(name);</span><br><span class="line">            System.out.println(<span class="string">"end...addUser"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"error...addUser"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"start...deleteUser"</span>);</span><br><span class="line">            <span class="keyword">this</span>.usr.deleteUser(name);</span><br><span class="line">            System.out.println(<span class="string">"end...deleteUser"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"error..deleteUser"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IUserManager userManager = <span class="keyword">new</span> UserManagerProxy(<span class="keyword">new</span> UserManager());</span><br><span class="line">        userManager.addUser(<span class="string">"zzz"</span>);</span><br><span class="line">        userManager.deleteUser(<span class="string">"zzz"</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>  添加了用户：zzz<br>  end…addUser<br>  start…deleteUser<br>  删除了用户：zzz<br>  end…deleteUser</p></blockquote><p>看完源码不难发现，其实也就是继承相同的接口，来实现相同的方法，在新类里面来对原有的方法进行增添并调用原有的方法。</p><p>缺点：</p><ul><li>代理类和委托类实现了相同的接口，代理类通过委托类实现了相同的方法。这样就出现了大量的代码重复。如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。</li><li>代理对象只服务于一种类型的对象，如果要服务多类型的对象。势必要为每一种对象都进行代理，静态代理在程序规模稍大时就无法胜任了。</li><li>静态代理类只能为特定的接口(Service)服务。如想要为多个接口服务则需要建立很多个代理类。</li></ul><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>静态代理一个类只能为一个接口服务，那么必定会产生很多代理类，所以能不能让一个代理类完成全部代理功能呢，这时候就需要<strong>动态代理</strong>来实现了。</p><p>动态代理是利用Java的反射机制在运行时动态代理对象，对于要执行<strong>相同扩展操作</strong>的类或方法由一个统一的类的invoke方法来实现。动态代理需要用到java.lang.reflect.InvocationHandler接口和java.lang.reflect.Proxy类的newProxyInstance()方法。</p><p>InvocationHandler接口的实现类是用于对被代理对象（例如UserManager类）功能进行扩展的类，当被代理对象使用某个方法（例如addUser方法）时，会被InvocationHandler接口的实现类<strong>拦截</strong>，在InvocationHandler实现类的invoke方法中调用被代理对象的方法，并进行一些代码的扩充。那么Proxy的newProxyInstance方法就是将被代理对象和代理对象绑定起来的方法，将被代理对象的<strong>类加载器</strong>和<strong>被代理类实现的接口对象</strong>还有<strong>InvocationHandler实现类</strong>传入该方法中就能进行绑定。</p><p>java.lang.reflect.InvocationHandler接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该接口的实现类用于拦截被代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy     被代理的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method    需要调用的方法，</span></span><br><span class="line"><span class="comment">     *    Method类是一个方法类，可以接收方法对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args      方法调用时所需要的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java.lang.reflect.Proxy类的newProxyInstance方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 该方法用于指定被代理对象关联到哪个InvocationHandler上</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> loader        一个ClassLoader（类加载器）对象，</span></span><br><span class="line"><span class="comment">*                      定义了由哪个ClassLoader对象来对生成的代理对象进行加载</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> interfaces    一个Interface对象的数组，</span></span><br><span class="line"><span class="comment">*                      表示的是我将要给我需要代理的对象提供一组什么接口，</span></span><br><span class="line"><span class="comment">*                      如果我提供了一组接口给它，</span></span><br><span class="line"><span class="comment">*                      那么这个代理对象就宣称实现了该接口(多态)，</span></span><br><span class="line"><span class="comment">*                      这样我就能调用这组接口中的方法了</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> h             一个InvocationHandler对象，</span></span><br><span class="line"><span class="comment">*                      表示的是当我这个动态代理对象在调用方法的时候，</span></span><br><span class="line"><span class="comment">*                      会关联到哪一个InvocationHandler对象上</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          InvocationHandler h)</span></span></span><br></pre></td></tr></table></figure><p>这里用到的UserManager类和IUserManager接口和静态代理部分相同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> <span class="keyword">implements</span> <span class="title">IUserManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加了用户："</span> +  name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除了用户："</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来要实现java.lang.reflect.InvocationHandler接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态代理类只能代理接口（不支持抽象类），代理类都需要实现InvocationHandler类，</span></span><br><span class="line"><span class="comment"> * 实现invoke方法。该invoke方法就是调用被代理接口的所有方法时需要调用的，</span></span><br><span class="line"><span class="comment"> * 该invoke方法返回的值是被调用方法的返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//被代理的目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object targetObject;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定关系，也就是关联到哪个接口（与具体的实现类绑定）的哪些方法将被调用时，</span></span><br><span class="line"><span class="comment">     * 执行invoke方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newProxyInstance</span><span class="params">(Object targetObject)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.targetObject = targetObject;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 该方法用于指定类加载器，被代理接口，</span></span><br><span class="line"><span class="comment">         * 及关联的InvocationHandler对象，</span></span><br><span class="line"><span class="comment">         * 返回一个代理对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(targetObject.getClass().getClassLoader(),</span><br><span class="line">                targetObject.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//就是前面的InvocationHandler接口的invoke方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object ret = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"start..."</span> + method.getName());</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 这里的invoke方法不是InvocationHandler接口中的方法了</span></span><br><span class="line"><span class="comment">             * 他是Method类中的invoke方法</span></span><br><span class="line"><span class="comment">             * @参数一 调用该方法的对象（例如当调用addUser时就是UserManager对象）</span></span><br><span class="line"><span class="comment">             * @参数二 调用方法时的参数列表</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span> 返回被调用方法的返回值</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            ret = method.invoke(targetObject, args);</span><br><span class="line">            System.out.println(<span class="string">"end..."</span> + method.getName());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"error..."</span> + method.getName());</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LogHandler logHandler = <span class="keyword">new</span> LogHandler();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 此处是创建一个IUserManager接口，</span></span><br><span class="line"><span class="comment">         * 用newProxyInstance方法创建一个代理对象，</span></span><br><span class="line"><span class="comment">         * 用强制类型转换将其转换为IUserManager类型。</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * 注意：这里要定义接口（IUserManager），</span></span><br><span class="line"><span class="comment">         * 不能定义被代理类（UserManager），</span></span><br><span class="line"><span class="comment">         * 因为这里创建的代理对象是继承自接口（IUserManager）的Object对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        IUserManager iUserManager =</span><br><span class="line">                (IUserManager)logHandler.newProxyInstance(<span class="keyword">new</span> UserManager());</span><br><span class="line">        iUserManager.addUser(<span class="string">"zzz"</span>);</span><br><span class="line">        iUserManager.deleteUser(<span class="string">"zzz"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>  start…addUser<br>  添加了用户：zzz<br>  end…addUser<br>  start…deleteUser<br>  删除了用户：zzz<br>  end…deleteUser</p></blockquote><p>动态代理的优点：</p><ul><li>动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）。这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。而且动态代理的应用使我们的类职责更加单一，复用性更强。</li></ul><p>缺点：</p><ul><li>性能低下，应尽量避免在性能敏感系统中使用</li></ul><p>AOP（AspectOrientedProgramming）：将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码—解耦。</p><p>正是因为在所有的类里，核心代码之前的操作和核心代码之后的操作都做的是同样的逻辑，因此我们需要将它们提取出来，单独分析，设计和编码，这就是我们的AOP思想。一句话说，AOP只是在对OOP的基础上进行进一步抽象，使我们的类的职责更加单一。</p><h2 id="Spring中的AOP"><a href="#Spring中的AOP" class="headerlink" title="Spring中的AOP"></a>Spring中的AOP</h2><h3 id="Spring中AOP的细节"><a href="#Spring中AOP的细节" class="headerlink" title="Spring中AOP的细节"></a>Spring中AOP的细节</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>我们学习spring的aop，就是通过配置的方式，实现动态代理。</p><h4 id="AOP相关术语"><a href="#AOP相关术语" class="headerlink" title="AOP相关术语"></a>AOP相关术语</h4><ul><li>Joinpoint(连接点): 所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法,因为spring只支持方法类型的连接点。 </li><li>Pointcut(切入点): 所谓切入点是指我们要对哪些Joinpoint进行拦截的定义。</li><li>Advice(通知/增强): <ul><li>所谓通知是指拦截到Joinpoint之后所要做的事情就是通知。 </li><li>通知的类型：前置通知(事务开始前),后置通知（事务开始后）,异常通知（发生异常时）,最终通知（在finally里面的）,环绕通知（整个invoke方法）。</li><li><img src="http://image.zhangzef.com/20200214184245.jpg" alt="img" style="zoom: 80%;"></li></ul></li><li>Introduction(引介): 引介是一种特殊的通知在不修改类代码的前提下, Introduction可以在运行期为类动态地添加一些方法或Field。</li><li>Target(目标对象): 代理的目标对象。</li><li>Weaving(织入): 是指把增强应用到目标对象来创建新的代理对象的过程。 spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入。</li><li>Proxy（代理）: 一个类被AOP织入增强后，就产生一个结果代理类。</li><li>Aspect(切面): 是切入点和通知（引介）的结合。</li></ul><h4 id="学习spring中的AOP要明确的事"><a href="#学习spring中的AOP要明确的事" class="headerlink" title="学习spring中的AOP要明确的事"></a>学习spring中的AOP要明确的事</h4><ul><li>开发阶段（我们做的） <ul><li>编写核心业务代码（开发主线）：大部分程序员来做，要求熟悉业务需求。 </li><li>把公用代码抽取出来，制作成通知。（开发阶段最后再做）：AOP编程人员来做。 </li><li>在配置文件中，声明切入点与通知间的关系，即切面。：AOP编程人员来做。</li></ul></li><li>运行阶段（Spring框架完成的）： Spring框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</li></ul><h3 id="基于XML的AOP配置"><a href="#基于XML的AOP配置" class="headerlink" title="基于XML的AOP配置"></a>基于XML的AOP配置</h3><p>在学习基于XML的AOP配置之前先来看看我们的接口及其实现类和公共代码部分：</p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> <span class="keyword">implements</span> <span class="title">IUserManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加了账户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除了账户"</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新了账户"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="公共代码"><a href="#公共代码" class="headerlink" title="公共代码"></a>公共代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beforePringLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置通知开始记录事务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterReturningPrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置通知开始记录事务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterThrowingPringLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常通知开始记录事务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterPringLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"最终通知开始记录事务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知</span></span><br><span class="line"><span class="comment">     * 问题：</span></span><br><span class="line"><span class="comment">     *      当我们配置了环绕通知之后，切入点方法没有执行，而通知方法执行了。</span></span><br><span class="line"><span class="comment">     * 分析：</span></span><br><span class="line"><span class="comment">     *      通过对比动态代理中的环绕通知代码，</span></span><br><span class="line"><span class="comment">     *      发现动态代理的环绕通知有明确的切入点方法调用，而我们的代码中没有。</span></span><br><span class="line"><span class="comment">     * 解决：</span></span><br><span class="line"><span class="comment">     *      Spring框架为我们提供了一个接口：ProceedingJoinPoint。</span></span><br><span class="line"><span class="comment">     *      该接口有一个方法proceed()，此方法就相当于明确调用切入点方法。</span></span><br><span class="line"><span class="comment">     *      该接口可以作为环绕通知的方法参数，在程序执行时，</span></span><br><span class="line"><span class="comment">     *      spring框架会为我们提供该接口的实现类供我们使用。</span></span><br><span class="line"><span class="comment">     * spring中的环绕通知：</span></span><br><span class="line"><span class="comment">     *      它是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">aroundPrintLog</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span></span>&#123;</span><br><span class="line">        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.beforePringLog();</span><br><span class="line">            Object args[] = proceedingJoinPoint.getArgs();<span class="comment">//得到方法执行所需的参数</span></span><br><span class="line">            rtValue = proceedingJoinPoint.proceed(args);<span class="comment">//明确调用业务层方法（切入点方法）</span></span><br><span class="line">            <span class="keyword">this</span>.afterReturningPrintLog();</span><br><span class="line">            <span class="keyword">return</span> rtValue;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable a)&#123;</span><br><span class="line">            <span class="keyword">this</span>.afterThrowingPringLog();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(a);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.afterPringLog();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="XML文件配置"><a href="#XML文件配置" class="headerlink" title="XML文件配置"></a>XML文件配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上面这部分在spring的某个页面中复制的--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置UserManager类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"UserManager"</span> <span class="attr">class</span>=<span class="string">"UserManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring中基于XML的AOP配置步骤（此处直接引用黑马教程中的注释，自己写的例子没写什么包）</span></span><br><span class="line"><span class="comment">        1、把通知Bean也交给spring来管理</span></span><br><span class="line"><span class="comment">        2、使用aop:config标签表明开始AOP的配置</span></span><br><span class="line"><span class="comment">        3、使用aop:aspect标签表明配置切面</span></span><br><span class="line"><span class="comment">                id属性：是给切面提供一个唯一标识</span></span><br><span class="line"><span class="comment">                ref属性：是指定通知类bean的Id。</span></span><br><span class="line"><span class="comment">        4、在aop:aspect标签的内部使用对应标签来配置通知的类型</span></span><br><span class="line"><span class="comment">               我们现在示例是让printLog方法在切入点方法执行之前之前：所以是前置通知</span></span><br><span class="line"><span class="comment">               aop:before：表示配置前置通知</span></span><br><span class="line"><span class="comment">                    method属性：用于指定Logger类中哪个方法是前置通知</span></span><br><span class="line"><span class="comment">                    pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            切入点表达式的写法：</span></span><br><span class="line"><span class="comment">                关键字：execution(表达式)</span></span><br><span class="line"><span class="comment">                表达式：</span></span><br><span class="line"><span class="comment">                    访问修饰符  返回值  包名.包名.包名...类名.方法名(参数列表)</span></span><br><span class="line"><span class="comment">                标准的表达式写法：</span></span><br><span class="line"><span class="comment">                    public void com.itheima.service.impl.AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">                访问修饰符可以省略</span></span><br><span class="line"><span class="comment">                    void com.itheima.service.impl.AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">                返回值可以使用通配符，表示任意返回值</span></span><br><span class="line"><span class="comment">                    * com.itheima.service.impl.AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">                包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.</span></span><br><span class="line"><span class="comment">                    * *.*.*.*.AccountServiceImpl.saveAccount())</span></span><br><span class="line"><span class="comment">                包名可以使用..表示当前包及其子包</span></span><br><span class="line"><span class="comment">                    * *..AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">                类名和方法名都可以使用*来实现通配</span></span><br><span class="line"><span class="comment">                    * *..*.*()</span></span><br><span class="line"><span class="comment">                参数列表：</span></span><br><span class="line"><span class="comment">                    可以直接写数据类型：</span></span><br><span class="line"><span class="comment">                        基本类型直接写名称           int</span></span><br><span class="line"><span class="comment">                        引用类型写包名.类名的方式   java.lang.String</span></span><br><span class="line"><span class="comment">                    可以使用通配符表示任意类型，但是必须有参数</span></span><br><span class="line"><span class="comment">                    可以使用..表示有无参数均可，有参数可以是任意类型</span></span><br><span class="line"><span class="comment">                全通配写法：</span></span><br><span class="line"><span class="comment">                    * *..*.*(..)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                实际开发中切入点表达式的通常写法：</span></span><br><span class="line"><span class="comment">                    切到业务层实现类下的所有方法</span></span><br><span class="line"><span class="comment">                        * com.itheima.service.impl.*.*(..)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Logger类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Logger"</span> <span class="attr">class</span>=<span class="string">"Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置AOP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"Logger"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置通知的类型，并且建立通知方法和切入点方法的关联--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置前置通知：在切入点方法执行之前执行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"pringLog"</span> </span></span><br><span class="line"><span class="tag">                        <span class="attr">pointcut</span>=<span class="string">"execution(* *..*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置后置通知：在切入点方法正常执行之后值。它和异常通知永远只能执行一个--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturningPrintLog"</span> </span></span><br><span class="line"><span class="tag">                                 <span class="attr">pointcut</span>=<span class="string">"execution(* *..*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置异常通知：在切入点方法执行产生异常之后执行。它和后置通知永远只能执行一个--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowingPringLog"</span> </span></span><br><span class="line"><span class="tag">                                <span class="attr">pointcut</span>=<span class="string">"execution(* *..*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置最终通知：无论切入点方法是否正常执行它都会在其后面执行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterPringLog"</span> </span></span><br><span class="line"><span class="tag">                       <span class="attr">pointcut</span>=<span class="string">"execution(* *..*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="通用化切入点表达式"><a href="#通用化切入点表达式" class="headerlink" title="通用化切入点表达式"></a>通用化切入点表达式</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"Logger"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切入点表达式 id属性用于指定表达式的唯一标识。expression属性用于指定表达式内容</span></span><br><span class="line"><span class="comment">              此标签写在aop:aspect标签内部只能当前切面使用。</span></span><br><span class="line"><span class="comment">              它还可以写在aop:aspect外面，此时就变成了所有切面可用</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* *..*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置通知的类型，并且建立通知方法和切入点方法的关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforePringLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置后置通知：在切入点方法正常执行之后值。它和异常通知永远只能执行一个--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturningPrintLog"</span> </span></span><br><span class="line"><span class="tag">                             <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置异常通知：在切入点方法执行产生异常之后执行。它和后置通知永远只能执行一个--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowingPringLog"</span> </span></span><br><span class="line"><span class="tag">                            <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置最终通知：无论切入点方法是否正常执行它都会在其后面执行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterPringLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="环绕通知配置"><a href="#环绕通知配置" class="headerlink" title="环绕通知配置"></a>环绕通知配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"Logger"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切入点表达式 id属性用于指定表达式的唯一标识。expression属性用于指定表达式内容</span></span><br><span class="line"><span class="comment">              此标签写在aop:aspect标签内部只能当前切面使用。</span></span><br><span class="line"><span class="comment">              它还可以写在aop:aspect外面，此时就变成了所有切面可用</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* *..*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置环绕通知 详细的注释请看Logger类中 配置环绕通知后无需再配置其他通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"aroundPrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        IUserManager userManager = (IUserManager) ac.getBean(<span class="string">"UserManager"</span>);<span class="comment">//注意这里要定义接口类型</span></span><br><span class="line">        userManager.addUser();</span><br><span class="line">        userManager.deleteUser(<span class="number">1</span>);</span><br><span class="line">        System.out.println(userManager.updateUser());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于注解的AOP配置"><a href="#基于注解的AOP配置" class="headerlink" title="基于注解的AOP配置"></a>基于注解的AOP配置</h3><ol><li>配置spring容器中要扫描的包</li><li>在业务层类添加注解@Service</li><li>在通知类添加注解@Component并添加@Aspect注解（表示当前是一个切面类）</li><li>开启Spring对注解AOP的支持（见xml文件）</li><li>配置切入点表达式（见通知类代码）</li><li>在各个通知方法上分别添加注解（见通知类代码）（建议<strong>只对环绕通知添加注解，其他通知不添加注解</strong>，但是给出的代码中所有通知都加上了注解）</li></ol><h4 id="实现类-1"><a href="#实现类-1" class="headerlink" title="实现类"></a>实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"UserManager"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> <span class="keyword">implements</span> <span class="title">IUserManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加了账户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除了账户"</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新了账户"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通知类"><a href="#通知类" class="headerlink" title="通知类"></a>通知类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"Logger"</span>)</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* *..*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//@Before("pt()")</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beforePringLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置通知开始记录事务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@AfterReturning("pt()")</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterReturningPrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置通知开始记录事务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@AfterThrowing("pt()")</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterThrowingPringLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常通知开始记录事务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@After("pt()")</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterPringLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"最终通知开始记录事务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"pt()"</span>)</span><br><span class="line">    <span class="function">Object <span class="title">aroundPrintLog</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span></span>&#123;</span><br><span class="line">        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.beforePringLog();</span><br><span class="line">            Object args[] = proceedingJoinPoint.getArgs();</span><br><span class="line">            rtValue = proceedingJoinPoint.proceed(args);</span><br><span class="line">            <span class="keyword">this</span>.afterReturningPrintLog();</span><br><span class="line">            <span class="keyword">return</span> rtValue;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable a)&#123;</span><br><span class="line">            <span class="keyword">this</span>.afterThrowingPringLog();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(a);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.afterPringLog();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XML文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring创建容器时要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.cla"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring开启注解AOP的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="不使用XML文件配置"><a href="#不使用XML文件配置" class="headerlink" title="不使用XML文件配置"></a>不使用XML文件配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"com.cla"</span>) </span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>接下来请看下一篇。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;AOP概述&quot;&gt;&lt;a href=&quot;#AOP概述&quot; class=&quot;headerlink&quot; title=&quot;AOP概述&quot;&gt;&lt;/a&gt;AOP概述&lt;/h2&gt;&lt;h3 id=&quot;什么是AOP&quot;&gt;&lt;a href=&quot;#什么是AOP&quot; class=&quot;headerlink&quot; title=&quot;什
      
    
    </summary>
    
      <category term="JavaWeb" scheme="zhangzef.com/categories/JavaWeb/"/>
    
    
      <category term="Spring" scheme="zhangzef.com/tags/Spring/"/>
    
      <category term="框架" scheme="zhangzef.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>C#杂记</title>
    <link href="zhangzef.com/2019/10/16/C%20Sharp%E6%9D%82%E8%AE%B0/"/>
    <id>zhangzef.com/2019/10/16/C Sharp杂记/</id>
    <published>2019-10-16T15:47:08.000Z</published>
    <updated>2020-02-15T15:08:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>写一些在学C#时不会的一些用法，在百度上搜出来的答案要不没正确的，要不是就是瞎xx说，要不就是说的不清不楚的。</p><h2 id="Wpf"><a href="#Wpf" class="headerlink" title="Wpf"></a>Wpf</h2><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><h4 id="label标签的内容居中显示"><a href="#label标签的内容居中显示" class="headerlink" title="label标签的内容居中显示"></a>label标签的内容居中显示</h4><p>注意，是内容、内容、内容。。。如图：<img src="http://image.zhangzef.com/20200214182212.png" alt="img" style="zoom:33%;"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Label Name=&quot;alb&quot; Content=&quot;20&quot; FontSize=&quot;60&quot; Margin=&quot;10,10,-2.333,-12.333&quot; Height=&quot;163&quot; HorizontalContentAlignment=&quot;Center&quot; VerticalContentAlignment=&quot;Center&quot;/&gt;</span><br></pre></td></tr></table></figure><p>是HorizontalContentAlignment和VerticalContentAlignment两个属性，一个是水平居中，一个是垂直居中，也可以设置其他对齐方式。</p><h3 id="MessageBox"><a href="#MessageBox" class="headerlink" title="MessageBox"></a>MessageBox</h3><p>MessageBox.Show(&lt;字符串&gt; Text, &lt;字符串&gt; Title, &lt;整型&gt; nType，MessageBoxIcon);</p><ul><li>第一个参数是 String 类型，表示提示框里面的 <strong>内容</strong>；</li><li>第二个参数是String 类型，表示提示框的 <strong>标题</strong>；</li><li>第三个参数是整数类型，表示消息框的  <strong>类型</strong>  ，一般的都使用系统提供的几种类型；</li><li>第四个参数是提示框的 <strong>图标</strong>，比如说警告、提示、问题等等。</li></ul><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><p>判断文件/文件夹是否存在（参数为字符串）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File.Exists(path);//文件</span><br><span class="line">Directory.Exists(path);//文件夹</span><br></pre></td></tr></table></figure><p>浏览文件的窗体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OpenFileDialog dialog = new OpenFileDialog();</span><br><span class="line">dialog.ShowDialog();//</span><br></pre></td></tr></table></figure><p>该方法会返回一个bool类型，当成功浏览时返回true，否则返回false。</p><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><h3 id="保留n位小数"><a href="#保留n位小数" class="headerlink" title="保留n位小数"></a>保留n位小数</h3><p>这里以两位小数为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">double x;</span><br><span class="line">x.ToString(&quot;0.00&quot;);</span><br></pre></td></tr></table></figure><p>如代码所示，想保留几位就在小数点后面放几个0。</p><p>或者这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">double a = 10.9876544;</span><br><span class="line">int b;</span><br><span class="line">b = Convert.ToInt32(a * 100);</span><br><span class="line">a = Convert.ToDouble(b);</span><br><span class="line">a /= 100;</span><br></pre></td></tr></table></figure><p>就是先将a乘100后转化乘整型，这样它的小数部分就丢弃了，之后再转化成double，再除以100。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写一些在学C#时不会的一些用法，在百度上搜出来的答案要不没正确的，要不是就是瞎xx说，要不就是说的不清不楚的。&lt;/p&gt;
&lt;h2 id=&quot;Wpf&quot;&gt;&lt;a href=&quot;#Wpf&quot; class=&quot;headerlink&quot; title=&quot;Wpf&quot;&gt;&lt;/a&gt;Wpf&lt;/h2&gt;&lt;h3 id
      
    
    </summary>
    
      <category term="C#" scheme="zhangzef.com/categories/C/"/>
    
    
      <category term="C#方法" scheme="zhangzef.com/tags/C-%E6%96%B9%E6%B3%95/"/>
    
      <category term="Wpf" scheme="zhangzef.com/tags/Wpf/"/>
    
  </entry>
  
  <entry>
    <title>Git教程</title>
    <link href="zhangzef.com/2019/10/15/Git%E6%95%99%E7%A8%8B/"/>
    <id>zhangzef.com/2019/10/15/Git教程/</id>
    <published>2019-10-15T14:53:37.000Z</published>
    <updated>2020-02-15T15:08:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>  本教程参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰的Git教程</a></p></blockquote><p>Git是一个分布式版本控制系统</p><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><p>安装过程请自行百度👀</p><p>安装之后要在命令行中设置自己的用户名和邮箱，需要在命令行中输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><h2 id="版本库-repository"><a href="#版本库-repository" class="headerlink" title="版本库(repository)"></a>版本库(repository)</h2><p>版本库：你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><p>创建版本库很简单，即用git打开一个空文件夹，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init//初始化一个仓库</span><br></pre></td></tr></table></figure><p>要想将文件添加到仓库中，需要分两步</p><p>第一步先把文件放到仓库目录或子目录中，然后输入如下命令(例如文件名为：readme.txt)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add readme.txt//将readme.txt文件添加到仓库中</span><br></pre></td></tr></table></figure><p>第二步需要用git commit提交到仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;wrote a readme file&quot;//将修改提交到仓库并说明</span><br></pre></td></tr></table></figure><p>其中- m “xxx”是对本次提交的说明，等同于注释，有助于别人对你提交的理解。</p><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>查看当前仓库的状态(例如什么文件被修改了)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>若想查看哪个文件具体修改了什么，可以用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff readme.txt//查看readme.txt文件具体修改了什么内容</span><br></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>版本退回有如下几个命令用于查看历史：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log//1.</span><br><span class="line">git log --pretty=oneline//2.</span><br><span class="line">git reflog//3.</span><br></pre></td></tr></table></figure><ol><li>查看详细历史提交记录(包括commit_id、作者、日期、提交注释)，确定要退回哪个版本，每个版本都有一个commit_id</li><li>可以让每个版本只输出一行，简化输出信息(只显示commit_id和提交注释)</li><li>查看历史命令</li></ol><p>版本退回命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^//1.</span><br></pre></td></tr></table></figure><ol><li>退回到当前版本的上一个版本，如果想退回上上一个版本就是… HEAD^^，前一百个版本可以用HEAD~100表示。–hard参数暂不讲解。这里的HEAD^也可以替换为想要退回版本的commit_id，由于commit_id很长，只用写前几位能区别于别的版本就行。</li></ol><blockquote><p>  例：</p><p>  ​       1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPL</p><p>  ​       e475afc93c209a690c39c13a46716e8fa000c366 add distributed</p><p>  ​       eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file</p><p>  这是我当前有的版本，我想回到add distributed版本，我可以再commit_id处填写”HEAD^”或者”e4751fc”</p></blockquote><p>带有(HEAD -&gt; master)的即为当前版本</p><p>当退回某一个版本之后再用git log就不能看到原来版本的commit_id了，此时可以用git reflog来查看历史命令，找到commit_id</p><h3 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h3><p>工作区就是我们创建的仓库文件夹。工作区有一个隐藏文件夹是.git，这里是版本库。版本库里面有一个<strong>stage</strong>（或index）叫暂存区，还有一个git自动创建的<strong>master</strong>分支，以及指向master分支的指针<strong>HEAD</strong> 。</p><p>当我们git add时是把文件提交到stage中，git commit时是把stage中的所有修改一次性提交到分支中</p><p><img src="http://image.zhangzef.com/20200214182724.png" alt="img" style="zoom: 50%;"></p><p>当你commit过之后，没有对工作区的文件进行修改，那么版本库就变成这样：</p><p><img src="http://image.zhangzef.com/20200214182725.png" alt="img" style="zoom:50%;"></p><h3 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h3><p>Git管理的是修改而非文件</p><p>当你对文件readme.txt进行如下操作时：第一次修改readme.txt-&gt;git add-&gt;第二次修改readme.txt-&gt;git commit。会发现master中的readme.txt文件是第一次修改过的而非第二此修改过的。</p><p>如果想让master中的readme.txt文件是第二次修改的：第一次修改readme.txt-&gt;git add(有没有都行)-&gt;第二次修改readme.txt-&gt;git add-&gt;git commit</p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>例如撤销对readme.txt文件的修改：</p><h4 id="当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时"><a href="#当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时" class="headerlink" title="当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时"></a>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- readme.txt//1.</span><br></pre></td></tr></table></figure><ol><li>把readme.txt文件在工作区的修改全部撤销</li></ol><h4 id="当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改"><a href="#当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改" class="headerlink" title="当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改"></a>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改</h4><p>在commit之前可以先用git status查看哪个文件被修改了，撤销可用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD readme.txt</span><br></pre></td></tr></table></figure><h4 id="已经提交了不合适的修改到版本库时，想要撤销本次提交"><a href="#已经提交了不合适的修改到版本库时，想要撤销本次提交" class="headerlink" title="已经提交了不合适的修改到版本库时，想要撤销本次提交"></a>已经提交了不合适的修改到版本库时，想要撤销本次提交</h4><p>直接使用版本退回就好了呀</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>例如删除工作区中的readme.txt文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm test.txt//删除</span><br><span class="line">git commit//提交</span><br></pre></td></tr></table></figure><p>在提交之前如果发现删错了可以用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- readme.txt</span><br></pre></td></tr></table></figure><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>git是分布式版本控制，同一个git仓库可以分布到不同的机器上面。而拿一个机器来当作服务器，全天24小时开机，其他人久都可以从这台服务器上把仓库克隆到自己的电脑上了，并且可以把各自的提交推送到服务器仓库中，也可以从服务器仓库拉取别人的提交。</p><p>现在我们不需要自己搭建服务器了，我们可以使用GitHub或者码云，但是在国内GitHub速度比较慢。。。下面先以GitHub为例讲解远程仓库。（码云的用法会在后面说到）</p><ol><li><p>创建SSH Key：在用户主目录下看看有没有（<strong>.ssh</strong>）目录，如果有再看看这个目录下有没有（<strong>id_rsa</strong>）和（<strong>id_rsa.pub</strong>）这两个文件，如果都有则可以直接跳到下一步。如果没有，则在用户主目录下用git bash here（Windows）或者用shell（Linux）打开，输入如下命令创建SSH Key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>这里要把邮箱换成自己的邮箱，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p><p>如果一切顺利的话，可以在用户主目录里找到（.<strong>ssh</strong>）目录，里面有（<strong>id_rsa</strong>）和（<strong>id_rsa.pub</strong>）两个文件，这两个就是SSH Key的秘钥对，（<strong>id_rsa</strong>）是私钥，不能泄露出去，（<strong>id_rsa.pub</strong>）是公钥，可以放心地告诉任何人。</p></li><li><p>​    登陆GitHub，打开“Account settings”，“SSH Keys”页面，然后，点“New SSH Key”，填上任意Title，在Key文本框里粘贴（<strong>id_rsa.pub</strong>）文件的内容，然后就可以在SSH keys界面看到你添加的密钥。</p></li></ol><p><img src="http://image.zhangzef.com/20200214182749.png" alt="img" style="zoom:50%;"></p><p>SSH Key用于绑定将你的电脑和GitHub绑定，GitHub是开源仓库，你在上面提交的代码可以被别人看到。</p><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><p>先在GitHub创建一个仓库：</p><p><img src="http://image.zhangzef.com/20200214182727.png" alt="img" style="zoom:50%;"></p><p>（这是仓库创建好的样子）我创建了一个名叫test的仓库，刚刚创建的仓库是空的。现在GitHub告诉我们可以从这个仓库克隆出新的仓库，也可以把一个已有的仓库与之关联，然后把本地仓库的内容推送到GitHub仓库。</p><p>我这里是在本地也新建了一个叫test的仓库，并且在仓库根目录创建了一个（<strong>README.md</strong>）的文件。之后根据前面讲过的命令，或者GitHub上面提示的命令将本地test仓库与GitHub上的远程仓库相关联，需要在新建的空文件夹下<strong>依次</strong>运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;wrote a readme file&quot;//1.</span><br><span class="line">git remote add origin https://github.com/ZhangZef/test.git//2.</span><br><span class="line">git push -u origin master//3.</span><br></pre></td></tr></table></figure><ol><li>这里双引号里面为提交注解，前面讲过</li><li>这里要把网址换成自己的GitHub仓库地址，提示页面中给出了。origin就是远程仓库的名字，在git中默认这样叫，也可以改成别的，不过不推荐，修改不利于以后和别人合作或者自己忘了。</li><li>git push是把当前分支master推送到远程仓库。由于远程库是空的，我们第一次推送时加上<strong>-u</strong>参数，git不但会把本地的master分支内容推送到远程新的master分支，还会把本地master分支和远程master分支关联起来，在以后的推送和拉取时可以简化命令。</li><li>如果已有本地仓库可直接执行后两个命令。</li></ol><p>这是推送成功后的样子：</p><p><img src="http://image.zhangzef.com/20200214182726.png" alt="img" style="zoom:50%;"></p><p>以后只要本地提交过，直接运行：（<strong>git push origin master</strong>）命令就可以提交</p><h3 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h3><p>将远程仓库克隆到本地可以用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:ZhangZef/test.git</span><br></pre></td></tr></table></figure><p>注意要把仓库地址换成自己的地址</p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建并合并分支"><a href="#创建并合并分支" class="headerlink" title="创建并合并分支"></a>创建并合并分支</h3><p>在git中，master是主分支。master是指向提交的分支，而HEAD是指向当前分支的指针。</p><p>一开始，master分支是一条线，git用master指向最新提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点，每次提交，master就向前移动一步。</p><p><img src="http://image.zhangzef.com/20200214182718.png" alt="img" style="zoom:50%;"></p><p>当我们新建了一个分支dev（自己命名）的时候，git就会新建一个叫dev的指针，指向master相同的提交。再把HEAD指向dev就表示当前分支在dev：</p><p><img src="http://image.zhangzef.com/20200214182715.png" alt="img" style="zoom: 50%;"></p><p>从现在开始，你对工作区的修改和提交就是针对dev分支的了，每提交一次，dev分支就向前挪一步：</p><p><img src="http://image.zhangzef.com/20200214182714.png" alt="img" style="zoom:50%;"></p><p>我们要想把dev合并到主分支master上，就是把master指针指向dev的位置就可以了：</p><p><img src="http://image.zhangzef.com/20200214182721.png" alt="img" style="zoom:50%;"></p><p>这时候我们可以把dev分支给删去，他不会修改工作区的任何内容，只会将dev指针删掉：</p><p><img src="http://image.zhangzef.com/20200214182719.png" alt="img" style="zoom:50%;"></p><p>下面来实际进行上述操作，创建并切换分支用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev//1.</span><br><span class="line">git branch dev//2.</span><br><span class="line">git checkout dev//3.</span><br><span class="line">git branch//4.</span><br></pre></td></tr></table></figure><ol><li>git checkout命令加上-b参数表示创建并切换，dev处可换成你起的分支名</li><li>git branch + name表示创建分支</li><li>切换到分支</li><li>查看当前分支，名字前面带*号的表示当前HEAD指向的分支</li></ol><p>我们创建一个新分支dev，并转向dev分支，并在dev分支中做修改然后提交：</p><p><img src="http://image.zhangzef.com/20200214182729.png" alt="img" style="zoom:50%;"></p><p>之后我们将dev的改变合并到master分支上，先将转向master分支，之后用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure><p><img src="http://image.zhangzef.com/20200214182728.png" alt="img" style="zoom: 50%;"></p><p>注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。</p><p>之后我们就可以将dev删除了，之后运行branch命令就看到只有master分支了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure><p><img src="http://image.zhangzef.com/20200214182730.png" alt="img" style="zoom: 67%;"></p><p>还有switch命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git switch -c dev//1.</span><br><span class="line">git switch master//2.</span><br></pre></td></tr></table></figure><ol><li>这个也是创先并转向新分支</li><li>这个是转向分支，和checkout用法类似</li></ol><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git branch//1.</span><br><span class="line">git branch &lt;name&gt;//2.</span><br><span class="line">git checkout &lt;name&gt;//3.</span><br><span class="line">git switch &lt;name&gt;//4.</span><br><span class="line">git checkout -b &lt;name&gt;//5.</span><br><span class="line">git switch -c &lt;name&gt;//6.</span><br><span class="line">git merge &lt;name&gt;//7.</span><br><span class="line">git branch -d &lt;name&gt;//8.</span><br></pre></td></tr></table></figure><ol><li>查看分支</li><li>创建分支</li><li>转向分支</li><li>转向分支</li><li>创建并转向分支</li><li>创建并转向分支</li><li>合并分支</li><li>删除分支</li></ol><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>当新建的分支和原来的分支同时向前推进，导致生成了分叉，这时候就发生了冲突，这节要来解决冲突。</p><p>我们先新建一个分支dev，并在dev分支修改文件并提交，这样dev分支就比master分支超前了一个提交：</p><p><img src="http://image.zhangzef.com/20200214182732.png" alt="img" style="zoom:50%;"></p><p>之后我们再切换回master分支，系统就提示我们当前分支比master分支超前了一个分支（这里他显示的超前两次，是因为我的master分支修改过之后没有对远程仓库提交，它显示的‘origin/master’意思是远程仓库的master分支）：</p><p><img src="http://image.zhangzef.com/20200214182734.png" alt="img" style="zoom: 67%;"></p><p>之后我们再在master修改一次并提交：</p><p><img src="http://image.zhangzef.com/20200214182731.png" alt="img" style="zoom:67%;"></p><p>会发现合并的时候git会提示我们发生冲突（conflict），这时分支的状态是这样的：</p><p><img src="http://image.zhangzef.com/20200214182720.png" alt="img" style="zoom:50%;"></p><p>我们可以用（<strong>git status</strong>）来查看哪些文件发生了冲突：</p><p><img src="http://image.zhangzef.com/20200214182733.png" alt="img" style="zoom:50%;"></p><p>这时git提示我们README.md文件发生了冲突，要我们手动解决冲突，之后我们打开README.md文件查看：</p><p><img src="http://image.zhangzef.com/20200214182735.png" alt="img" style="zoom: 33%;"></p><p>会发现两个分支中的提交分别在文件中提示出来，我们手动修改后再提交即可：</p><p><img src="http://image.zhangzef.com/20200214182736.png" alt="img" style="zoom: 50%;"></p><p>这是修改过的文件，我们将修改过的文件提交后可以用如下命令查看分支合并状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><p><img src="http://image.zhangzef.com/20200214182737.png" alt="img" style="zoom:50%;"></p><p>可以看到我们的分支已经合并完成，这时可以将dev分支删除。</p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>git无法自动合并冲突分支，合并后必须手动解决冲突，再提交，用如下命令可以查看分支合并图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph</span><br></pre></td></tr></table></figure><h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><p>在一般情况，合并分支时git会使用<strong>Fast forward</strong>模式进行合并。在这种模式下删除分支后会丢掉分支信息。</p><h4 id="fast-forward"><a href="#fast-forward" class="headerlink" title="fast forward"></a>fast forward</h4><p>那么什么是fast forward模式呢？假设现在有两个分支，一个是主分支master，另一个是dev分支。</p><blockquote><p>  当我们在dev分支做了一个提交为“new 444444”：<img src="http://image.zhangzef.com/20200214182739.png" alt="img" style="zoom:50%;">当HEAD指向dev时我们可以看到“new 444444”这次提交，当我们将HEAD指向master时则看不到这个“new 444444”提交：<img src="http://image.zhangzef.com/20200214182740.png" alt="img" style="zoom:50%;"></p><p>  这次我们使用fast forward模式进行合并，合并之后的分支图如图所示：<img src="http://image.zhangzef.com/20200214182741.png" alt="img" style="zoom:50%;">可以看出git将“new 444444”这次提交和master分支强行糅合到了一块儿。</p></blockquote><blockquote><p>  接下来我们来看关闭 fast forward模式的合并是什么样子的，这次我先删除了dev分支，又创建了新的dev分支，以避免和前面的混淆，其他操作类似，这次在dev的提交换成了“new 666666”：<img src="http://image.zhangzef.com/20200214182743.png" alt="img" style="zoom:50%;"></p><p>  可看出这次合并之后git并没有将“new 666666”这次提交和master分支强行糅合在一起。</p></blockquote><p>可用两张图总结一下，第一张为fast forward合并，第二张为非fast forward合并：</p><p><img src="http://image.zhangzef.com/20200214182744.png" alt="img" style="zoom: 50%;"></p><p><img src="http://image.zhangzef.com/20200214182748.png" alt="img" style="zoom: 50%;"></p><p>看到廖雪峰老师对fast forward这里讲解的不是很清楚，我对这里也有点迷，就动手实践了一下，唠叨唠叨。关闭fast forward可以避免丢失信息，对以后的代码分析很有用（看网上说的👀），不过fast forward模式确实将一部分信息给抹去了，比如上面第一个图，我们就看不出曾经有过dev的痕迹，而第二张图则可以看出原来有某个分支提交了这个功能。</p><h4 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h4><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p><p>所以，团队合作的分支看起来就像这样：</p><p><img src="http://image.zhangzef.com/20200214182723.png" alt="img" style="zoom: 80%;"></p><p>如图michael在他自己的分支上工作，bob在他自己的分支上工作，他们每次完成工作都把自己的分支合并到dev分支，当dev分支上的项目稳定下来，则将dev合并到master上。</p><h3 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h3><p>当你正在dev分支中做某项工作时，突然通知让你去修复master分支中的一个非常紧急bug-001，但是你手头的工作一时半会儿也做不完。这时候要先保护工作现场，就像调用函数时，系统会先保护工作现场，将各寄存器中的值压入栈中，再去调用别的函数。</p><p>git也提供了一个保护工作现场的功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>可以将当前未提交的修改先存起来，以便bug修复完成后恢复现场。恢复现场的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash list//1.</span><br><span class="line">git stash apply//2.</span><br><span class="line">git stash pop//3.</span><br></pre></td></tr></table></figure><ol><li>这个命令用于查看当前有哪些被保存起来的工作现场，这个list其实是一个栈结构，即后进先出。</li><li>第二条和第三条命令都是恢复工作现场，但是apply不会删除list中的记录，想要删除还要用（<strong>git stash drop</strong>），而pop是应用并删除。</li></ol><p>master分支中存在bug，那么说明dev分支中一定也存在bug。那么怎么方便快捷地修复dev上的bug呢？</p><p>要先再master分支中查看那个bug分支的commit_id（例如是aadbd3d……，取前几位就行），然后转到转到dev分支使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick aadbd3e</span><br></pre></td></tr></table></figure><p>这样就可以将那次bug修复直接合并到dev分支中，不过还需要手动解决冲突并提交。</p><h3 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h3><p>当新开发功能时，肯定不能从master分支中修改。这时候要从dev分支新建一个feature分支来开发新功能，但是当你开发完新功能提交过还<strong>未合并</strong>时又被要求取消这个功能，这时候用（<strong>git branch -d + 分支名</strong>）是删除不了的，因为分支还未合并。git会提示你要用（<strong>-D</strong>）来删除（例如分支名为feature）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D feature</span><br></pre></td></tr></table></figure><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。查看远程仓库的信息（第一个是查看信息，第二个是查看详细信息，remote中文翻译是偏僻的、偏远的😁）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p><img src="http://image.zhangzef.com/20200214182745.png" alt="img" style="zoom: 67%;"></p><h4 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h4><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上（比如说要推送master分支，origin是远程仓库的意思）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p><ul><li><strong>master</strong>分支是主分支，因此要时刻与远程同步；</li><li><strong>dev</strong>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li><li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li></ul><h4 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h4><p>想要抓取分支，先要获取你的工程在GitHub上的地址，先在GitHub中打开你的工程，之后（这个按钮是将地址信息复制到粘贴板）：</p><p><img src="http://image.zhangzef.com/20200214182746.png" alt="img" style="zoom:80%;"></p><p>之后使用（<strong>git clone</strong>）命令，例如上图中的工程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:ZhangZef/test.git</span><br></pre></td></tr></table></figure><p>但是在GitHub上我的工程有两个分支，一个是master分支，一个是dev分支，当你clone之后使用（<strong>git branch</strong>）命令时会发现只有一个master分支，这时候想将dev分支也抓取下来要用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure><p>后面带上（<strong>origin/dev</strong>）意思是将本地仓的dev分支和远程仓库的dev分支相关联，以后推送拉取的时候git会自动寻找远程仓库和当前推送拉取分支相关联的分支，如果远程仓库没有关联分支：</p><ul><li>拉取时则会<strong>拉取失败</strong></li><li>而推送时没有<strong>关联分支</strong>且无<strong>同名分支</strong>则会自动在远程仓库<strong>创建新分支</strong>，但是创建的新分支并<strong>不会</strong>和本地仓库的分支相<strong>关联</strong>，还要手动将远程仓库的分支和本地分支相关联</li><li>而推送时没有<strong>关联分支</strong>且有<strong>同名分支</strong>则不会发生任何事，没有推送上去，也没有创建新分支</li></ul><p>要想关联远程仓库和本地仓库的分支可用如下命令（例如要关联分支是dev）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/dev dev</span><br></pre></td></tr></table></figure><p>当然你也可以指定将本地dev和远程仓库的其他分支相关联，修改origin后面的分支名字即可，但是并<strong>不推荐</strong></p><h4 id="解决推送冲突"><a href="#解决推送冲突" class="headerlink" title="解决推送冲突"></a>解决推送冲突</h4><p>当你的小伙伴向远程仓库的dev推送分支推送之后，你再向远程仓库推送时git会提示你产生冲突，并且提示你要用（<strong>git pull</strong>）命令：</p><p><img src="http://image.zhangzef.com/20200214182747.png" alt="img" style="zoom:67%;"></p><p>此时就使用（<strong>git pull</strong>）将远程仓库的分支抓取下来，手动解决冲突再合并（拉取失败时记得关联远程仓库的分支和本地仓库分支）。</p><h3 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h3><p>当解决冲突时，后push的人要先pull，再add…commit…push，这样分支图就会变得很杂乱。利用git的<strong>rebase</strong>（变基）操作可以将解决冲突时的分支图整理成一条直线。（不太理解rebase的操作，回来再写吧，先跳过去）</p><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><p>标签用于标记某个commit，方便使用。</p><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;name&gt;//1.</span><br><span class="line">git tag &lt;name&gt; &lt;commit_id&gt;//2.</span><br><span class="line">git tag//3.</span><br><span class="line">git show &lt;tagname&gt;//4.</span><br><span class="line">git tag -a &lt;tagname&gt; -m &quot;......&quot;//5.</span><br></pre></td></tr></table></figure><ol><li>创建一个标签，默认指向当前HEAD指向的提交</li><li>指定某一个commit创建标签，用于指定以前的提交未添加标签</li><li>查看所有标签</li><li>显示某个标签（标签指向的commit）的信息</li><li>可以指定某个标签的注解</li></ol><h3 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git tag -d &lt;tagname&gt;//1.</span><br><span class="line">git push origin &lt;tagname&gt;//2.</span><br><span class="line">git push origin --tags//3.</span><br><span class="line">git push origin :refs/tags/&lt;tagname&gt;//4.</span><br></pre></td></tr></table></figure><ol><li>删除本地的某个标签</li><li>将某个标签推送到远程仓库</li><li>一次性推送全部尚未推送到远程的本地标签</li><li>删除远程标签，要先删除本地的标签，再使用这个命令删除远程的标签</li></ol><h2 id="使用GitHub"><a href="#使用GitHub" class="headerlink" title="使用GitHub"></a>使用GitHub</h2><p>想要修改别人的文件，就要先fork到自己的仓库，然后才能进行修改提交。当你想要别人能接受你的提交，你就可以在GitHub上发起一个pull request，之后要看别人接受不接受了。</p><h2 id="使用码云"><a href="#使用码云" class="headerlink" title="使用码云"></a>使用码云</h2><p>由于GitHub是国外的网站，国内用户访问时速度有时候令人抓狂。这时候你可以使用国内的git托管服务<a href="https://gitee.com/" target="_blank" rel="noopener">码云</a></p><p>不过码云的免费git仓库有<strong>5人</strong>的成员上限。</p><p>添加SSH Key的步骤就略过了。</p><p>在码云上的git操作和GitHub类似，就不赘述了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;  本教程参考&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;廖雪峰的Git教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockqu
      
    
    </summary>
    
      <category term="Git" scheme="zhangzef.com/categories/Git/"/>
    
    
      <category term="Git" scheme="zhangzef.com/tags/Git/"/>
    
      <category term="GitHub" scheme="zhangzef.com/tags/GitHub/"/>
    
      <category term="码云" scheme="zhangzef.com/tags/%E7%A0%81%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>《现代操作系统（第四版）》 课后习题答案--第一章</title>
    <link href="zhangzef.com/2019/10/07/%E3%80%8A%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%89%88%EF%BC%89%E3%80%8B-%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <id>zhangzef.com/2019/10/07/《现代操作系统（第四版）》-课后习题答案-第一章/</id>
    <published>2019-10-07T09:26:30.000Z</published>
    <updated>2020-02-15T15:07:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己写的，可能会有错误，望大家指正。</p><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><blockquote><p>  操作系统的两大主要作用是什么？（Page. 1）</p></blockquote><p>解：</p><ol><li>为用户程序提供一个更好、更简单、更清晰的计算机模型。</li><li>管理cpu、主存、磁盘、打印机、键盘、鼠标、显示器、网络接口等设备。</li></ol><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><blockquote><p>  在1.4节中描述了9中不同类型的操作系统，列举每种操作系统的应用（每种系统一种应用）。（Page. 20）</p></blockquote><p>解：</p><ol><li>大型机操作系统（Mainframe Operating Systems）：<ul><li>批处理系统应用于保险公司的索赔处理或连锁商店的索赔报告</li><li>事务处理系统应用于银行支票处理或航班预定</li><li>分时系统应用于大型数据库的查询</li></ul></li><li>服务器操作系统（Server Operating Systems）：<ul><li>应用于Web站点保存页面并处理进来的请求</li></ul></li><li>多处理器操作系统（Multiprocessor Operating Systems）：<ul><li>Windows和Linux都可以运行在多核处理器上，可谓计算机带来更高的性能</li></ul></li><li>个人计算机操作系统（Personal Computer Operating Systems）：<ul><li>应用于文字处理、电子表格、游戏和Internet访问</li></ul></li><li>掌上计算机操作系统（Handheld Computer Operating Systems）：<ul><li>手机的操作系统如Android和ios</li></ul></li><li>嵌入式操作系统（Embedded Operating Systems）：<ul><li>应用于微波炉、冰箱、电视机、智能家居、汽车等</li></ul></li><li>传感器节点操作系统（Sensor-Node Operating Systems）：<ul><li>应用于建筑物周边保护、国土边界保卫、森林火灾探测、气象预测等</li></ul></li><li>实时操作系统（Real-Time Operating Systems）：<ul><li>硬实时系统应用于工业过程控制、民用航空、军事等</li><li>软实时系统应用于数字音频或多媒体系统等</li></ul></li><li>智能卡操作系统（Smart Card Operating Systems）：<ul><li>应用于电子支付等</li></ul></li></ol><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><blockquote><p>  分时操作系统和多道程序系统的区别是什么？（Page. 6）</p></blockquote><p>解：</p><ul><li>分时操作系统：按一定时间间隔将计算机的轮流分配给程序使用，由于间隔非常短，所以就像每个程序独占一样。</li><li>多道程序系统：将内存分为几部分存放不同的程序，一个程序不能让cpu和I/O设备始终忙碌，当cpu的正在执行的作业需要等待某个动作完成才能继续进行（如I/O操作完成），如果是单道程序设计此时cpu会等待，而多道程序设计则会让cpu开始处理另一个作业，提高了cpu的利用率。</li><li>区别：分时操作系统是按一定时间间隔将计算资源分配给不同的程序，而多道程序系统则是在当前作业进行其他动作时才回去处理别的作业。</li></ul><h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><blockquote><p>  为了使用高速缓存，主存被划分为若干cache行，通常每行长32或64字节。每次缓存一整个cache行。每次缓存一整行而不是一个字节或一个字，这样做的优点是什么？</p></blockquote><p>解：</p><p>因为程序局部性原理，即当要访问某一个字或字节，则其后面的数据被访问的概率很大，这样就可以提高缓存命中的概率。</p><h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><blockquote><p>  在早期计算机中，每个字节的读写直接由CPU处理（即没有DMA）。对于多道程序而言这种组织方式有什么含义？</p></blockquote><p>解：</p><p>DMA（Direct Memory Access）直接存储器访问：当cpu要进行I/O操作时只需要对DMA控制器进行设置，之后DMA控制器会完成cpu给定的工作，而cpu可在此时空闲下来去处理别的事情。</p><p>如果每个字节的读写是由cpu读写，则在I/O操作时cpu就不能处理其他程序作业，此时cpu将被I/O操作占用，无法空闲下来，由于I/O操作远慢于cpu的处理速度，cpu运行效率会大幅度下降。若有DMA控制器则在较慢的I/O操作时cpu可以空闲下来去运行别的作业，会使进行I/O操作时cpu效率大幅度提高，也提高了多道程序设计的收益（多道程序概念看第三题）。</p><h2 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h2><blockquote><p>  与访问I/O设备相关的指令通常是特权指令，也就是说，他们能在内核态执行而在用户态则不行，说明为什么这些指令是特权指令。</p></blockquote><p>解：</p><p>特权指令：具有特殊权限的指令，只能由操作系统调用，在系统的内核态运行。</p><ol><li>操作系统的一个主要任务就是给用户提供一个良好的计算机模型，然而这一任务的一个主要准则就是弱化用户对硬件的感知，而I/O操作就是对硬件的直接操作。</li><li>进行I/O操作时操作系统往往要检查相应权限，如果I/O操作可以由用户任意调用，则会容易引发系统崩溃。</li></ol><h2 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h2><blockquote><p>  系列计算机的思想在20世界60年代由IBM引入System/360大型机。现在这种思想是消亡还是存活？</p></blockquote><p>解：</p><p>这还用问吗，看看不同版本的ipad、surface、相同系列不同配置的电脑。。。</p><h2 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h2><blockquote><p>  缓慢采用GUI的一个原因是支持他的硬件的成本高昂，为了支持25行80列的单色文本屏幕，需要多少视频RAM？对于1024x768像素24位色彩图需要多少RAM？在1980年每Kb 5美元，这些RAM成本是多少？现在成本多少？</p></blockquote><ol><li>每个文本一个字节，则25行80列最大就是25×80字节，即2000字节视频RAM</li><li>1024×768个像素，每个像素24位，一字节有8位，则总共是1024×768×24÷8，即2359296字节，2304KB。</li><li>1980年成本是11520美元，在今天按jd金士顿8g 2400的内存价格算是0.03125人民币每KB（进制为1024），则其成本是72人民币，按当前美元汇率是10.0732美元。 <img src="http://image.zhangzef.com/TIM截图20191007235755.png" style="zoom:33%;"><img src="http://image.zhangzef.com/TIM截图20191007235417.png" alt></li></ol><h2 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h2><blockquote><p>  在建立一个操作系统时有几个设计目的，例如资源利用、及时性、健壮性等，请列举两个可能相互矛盾的设计目的。</p></blockquote><p>解：</p><p>考虑硬实时操作系统，其及时性和可靠性较高，但是健壮性较差，当出错时会导致后续工作无法进行。</p><h2 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h2><blockquote><p>  内核态和用户态有哪些区别？解释在设计操作系统时存在两种不同的模式有什么帮助。</p></blockquote><p>解：</p><ul><li>内核态：可以无限制地对系统存储、外部设备进行访问，具有最高级别的权限，可以执行cpu的所有指令。</li><li>用户态：访问受限制，无法访问外部设备，无法执行特权指令。</li><li>区别：相对与用户态，内核态拥有的权力更高，而用户态访问设备都需要内核态来帮助。</li><li>对操作系统的帮助：<ul><li>可以使用户程序不需要接触底层物理设备的细节，仅由一个函数来实现一系列复杂的工作。</li><li>保护硬件信息，对用户程序进行限制，当用户程序需要进行某些硬件访问，可以向操作系统申请，操作系统会检查它的权限。</li></ul></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p>  这几题都是偏思维题，觉得这种题要先列举这些东西的性质，再对比总结。</p><p>  有些名词书上没有讲解，在网上的资料也比较少，可能不太准确</p></blockquote><h2 id="第十一题"><a href="#第十一题" class="headerlink" title="第十一题"></a>第十一题</h2><blockquote><p>  一个255GB大小的磁盘有65535个柱面，每个柱面255个扇区。每个扇区512字节。这个磁盘有多少盘片和磁头？假设平均寻道时间为11ms,平均旋转延迟为7ms,读取速度100MB/s,计算从一个扇区读取400kb需要的平均时间。</p></blockquote><p>解：</p><p><img src="http://image.zhangzef.com/TIM%E6%88%AA%E5%9B%BE20191008155307.png" alt="img" style="zoom:33%;"></p><p>如图，红色为一个柱面，蓝色为扇区，即每个盘面有若干柱面，每个柱面有若干扇区，每个盘面有一个磁头，每个盘片有两个盘面，也即两个磁头。（用触摸板画的👀）</p><ul><li>由此可得每个盘面的存储容量为255×512×65535=‭8556249600‬B=‭8355712.5KB≈8160MB≈8G</li><li>所以盘面数即磁头数为255÷8≈32</li><li>所以共有16个盘片</li><li>平均时间=寻道时间+旋转延迟+读取时间：11ms+7ms+400kb÷(100MB/s×1024÷1000)≈22ms</li></ul><h2 id="第十二题"><a href="#第十二题" class="headerlink" title="第十二题"></a>第十二题</h2><blockquote><p>  下面哪一条指令只能在内核态使用？</p><ul><li>a 禁止所有的中断</li><li>b 读日期-时间时钟</li><li>c 设置日期-时间时钟</li><li>d 改变存储器映像</li></ul></blockquote><p>解：a、c、d</p><h2 id="第十三题"><a href="#第十三题" class="headerlink" title="第十三题"></a>第十三题</h2><blockquote><p>  考虑一个有两个CPU的系统，且每一个CPU有两个线程（超线程）。假设有三个程序P0、P1、P2，分别以运行时间5ms, 10ms,20ms开始，运行这些程序需要多少时间？假设这三个程序都是100%限于CPU，在运行时无阻赛，并且一旦设定就不改变CPU。</p></blockquote><p>不太理解他的线程要怎么算，看百度百科英特尔超线程技术是将cpu内部使用频率较高的部件复制一份，这样就可以提高使用频率较低的部件的使用效率，就可以把他看成两个逻辑线程。但是看网上答案都没有考虑两个线程同时工作的问题。</p><h2 id="第十四题"><a href="#第十四题" class="headerlink" title="第十四题"></a>第十四题</h2><blockquote><p>  一台计算机有一个四级流水线，每一级都花费相同的时间执行其工作，即1ns, 这台机器每秒可执行多少条指令？</p></blockquote><p>解：</p><p>1s = 1000000000ns</p><p>分成四级流水线，应该是一条指令分成四部分，即每条指令执行时间为4ns，四级流水线图示：</p><p><img src="http://image.zhangzef.com/TIM%E6%88%AA%E5%9B%BE20191008170610.png" alt="img" style="zoom:33%;"></p><p>由图可推算出10亿ns可运行1000000000-3条指令</p><h2 id="第十五题"><a href="#第十五题" class="headerlink" title="第十五题"></a>第十五题</h2><blockquote><p>  假设一个计算机系统有高速缓存、内存(RAM)以及磁盘，操作系统用虚拟内存。读取缓存中的一个词需要1ns, RAM需要10ns, 磁盘需要10ms。如果缓存命中率是95%， 内存的是99%（缓存失效时），读取一个词的平均时间是多少？</p></blockquote><p>解：</p><p>10ms = 10000000ns</p><p>平均时间即：</p><ul><li><p>1ns×0.95(缓存命中)</p></li><li><p>+10ns×0.05×0.99(缓存未命中内存命中)</p></li><li><p>+10000000ns×0.05×0.01(缓存内存都未命中)</p></li><li><p>=5001.455ns</p></li></ul><h2 id="第十六题"><a href="#第十六题" class="headerlink" title="第十六题"></a>第十六题</h2><blockquote><p>  在用户程序进行一个系统调用，以读写磁盘文件时，该程序提供指示说明了所需要的文件，一个指向数据缓冲区的指针以及计数。然后，控制权转给操作系统，它调用相关的驱动程序。假设驱动程序启动磁盘并且直到中断发生才终止。在从磁盘读的情况下，很明显，调用者会被阻塞（因为文件中没有数据）。在向磁盘写时会发生什么情况？需要把调用者阻塞一直等到磁盘传送完成为止吗？</p></blockquote><p>不太懂。。。</p><h2 id="第十七题"><a href="#第十七题" class="headerlink" title="第十七题"></a>第十七题</h2><blockquote><p>  什么是陷阱指令？在操作系统中解释他的用途。</p></blockquote><p>解：</p><p>在网上看到好像和tarp指令类似的还有一个叫访管指令(还有人说两个大致相等，没搞明白两个有啥关系)，好像是因为内核态又叫管态，用户态又叫目态。</p><p>trap指令是一个非特权指令，他是从用户态进入到内核态唯一的入口，该指令允许用户程序调用特权指令。</p><h2 id="第十八题"><a href="#第十八题" class="headerlink" title="第十八题"></a>第十八题</h2><blockquote><p>  分时系统中为什么需要进程表？在只有一个进程存在的个人计算机系统中，该进程控制整个机器直到进程结束，这种机器也需要进程表吗？</p></blockquote><p>解：</p><p>进程表是用来管理进程，当分时系统将某些进程挂起时，他们将进入进程表，分时系统从进程表中取出另一个需要处理的进程。</p><p>当只有一个进程时不需要，因为他无需管理其他进程。</p><h2 id="第十九题"><a href="#第十九题" class="headerlink" title="第十九题"></a>第十九题</h2><blockquote><p>  说明有没有理由在一个非空的目录中安装一个文件系统。如果这样做，如何做？</p></blockquote><p>不太懂，希望有大佬能帮我解答一下。</p><h2 id="第二十题"><a href="#第二十题" class="headerlink" title="第二十题"></a>第二十题</h2><blockquote><p>  对于下列系统调用，给出引起失败的条件：fork,exec以及unlink.</p></blockquote><p>解：</p><ul><li>fork：如果在进程表中没有空闲的内存用于创建子进程，则调用失败</li><li>exec：当其参数中执行的文件名称错误时</li><li>unlink：要删除的目录不存在或者权限不足时</li></ul><h2 id="第二十一题"><a href="#第二十一题" class="headerlink" title="第二十一题"></a>第二十一题</h2><blockquote><p>  下列资源能使用哪种多路复用（时间、空间或者两者皆可）：CPU、内存、磁盘、网卡、打印机、键盘以及显示器？</p></blockquote><p>解：</p><ul><li>时间复用：CPU、网卡、打印机、键盘</li><li>空间复用：内存、磁盘、</li><li>两者皆可：显示器</li></ul><h2 id="第二十二题"><a href="#第二十二题" class="headerlink" title="第二十二题"></a>第二十二题</h2><blockquote><p>  在count = write(fd, buffer,nbytes);调用中，是否能将函数返回值传递给 count除nbtes变量以外的任何值吗？如果能，为什么？（这点书上翻译错了。。。）</p></blockquote><p>解：</p><p>write返回值：通常与参数nbytes相同，否则表示出错。</p><ol><li>若返回-1，表示write系统调用错误。</li><li>若返回值为0，则表示没有写入任何数据</li></ol><h2 id="第二十三题"><a href="#第二十三题" class="headerlink" title="第二十三题"></a>第二十三题</h2><blockquote><p>  有一个文件，其文件描述符是fd，内含下列字节序列：3，1，4，1，5，9，2，6，5，3，5。有如下系统调用：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;   lseek(fd, <span class="number">3</span>, SEEK_SET);</span><br><span class="line">&gt;   read(fd, &amp;buffer, <span class="number">4</span>);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>  其中lseek调用寻找文件中的字节3。在读操作完成之后，buffer中的内容是什么？</p></blockquote><p>解：</p><p>lseek：用于修改指针在文件中的位置。三个参数分别为文件描述、文件中的位置、说明相对于文件的起始位置，当前位置还是结尾。其返回值是文件中的绝对位置。</p><p>set我查的有start sth. happening的意思，也许在这里就是开始的意思吧，这个名字起的好抽象，以前都不知道set还有开始的意思。。。所以SEEK_SET就是从文件的开头，从开头算起第三个就是字符<strong>1</strong>了。</p><p>那read就是从字符1开始算4个字符即：1，5，9，2</p><blockquote><p>  我不太清楚他的指针是什么机制，但是当运行如下代码</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;   lseek(fd, <span class="number">0</span>, SEEK_SET);<span class="comment">//将指针设置在文件的起始位置</span></span><br><span class="line">&gt;   <span class="comment">//懒得打开Linux试了，还要重启换系统</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li>如果文件起始位置是1，写的时候是不会从0开始写的，因为0不是一个位置，而是从1开始写，也即指针位置的下一个位置，那么lseek就会把指针设置在下一个要读写位置的前面，即每次读写都从指针的下一位开始读写（好像有些类似STL中的rbegin迭代器，我也记不清楚了）。<strong>但是</strong>，这个说法和书上的说法相<strong>矛盾</strong>，书上Page. 32的1.6.2中说“在顺序读(写)时，该指针通常指向要读(写)的下一个字节”。</li><li>如果文件起始位置是0，那么lseek会将指针设置在第0位，按书上说，下一次将在第0位开始读(写)，所以题目中的3可能指的就是文件中的第四个字符。</li></ul></blockquote><h2 id="第二十四题"><a href="#第二十四题" class="headerlink" title="第二十四题"></a>第二十四题</h2><blockquote><p>  假设一个10MB的文件在磁盘连续扇区的同一个轨道上（轨道号：50）。磁盘的磁头臂此时位于第100号轨道。要想从磁盘上找回这个文件，需要多长时间？ 假设磁头臂从一个柱面移动到下一个柱面需要1ms，当文件的开始部分存储在的扇区旋转到磁头下需要5ms，并且读的速率是200MB/s。</p></blockquote><p>解：</p><p>读取文件时间：(10MB) ÷ (200MB/s) = 0.05s = 50ms</p><p>总时间：50ms + 50ms + 5ms = 105ms</p><h2 id="第二十五题"><a href="#第二十五题" class="headerlink" title="第二十五题"></a>第二十五题</h2><blockquote><p>  块特殊文件和字符特殊文件的基本差别是什么？</p></blockquote><p>解：</p><p>如果一个硬件设备是以字符流的方式被访问的话，那就应该将它归于字符设备；反过来，如果一个设备是随机（无序的）访问的，那么它就属于块设备。块设备常见的是硬盘，而字符设备常见的是键盘等。</p><p>块特殊文件和字符特殊文件又叫做块设备和字符设备，在百度查块特殊文件和字符特殊文件基本查不到什么有用的资料，还能索引到有道词典的翻译是什么鬼？？？辣鸡百度。。。而查块设备和字符设备还能查到一些有用的东西。</p><h2 id="第二十六题"><a href="#第二十六题" class="headerlink" title="第二十六题"></a>第二十六题</h2><blockquote><p>  在图1-17的例子中库调用称为read，而系统调用自身称为read，这两者都有相问的名字是正常的吗？ 如果不是，哪一个更重要？</p><p>  <img src="http://image.zhangzef.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8%E8%B0%83%E7%94%A8.jpg" alt="img" style="zoom: 33%;"></p></blockquote><p>解：</p><p>书上Page. 29说“第七步：跟随在TRAP指令后的内核代码开始检查系统调用编号，然后分配给正确的系统调用处理器，这通常是通过一张由系统调用编号所引用的、指向系统调用处理器的指针表来完成”，</p><p>即这些系统调用其实没有名字，只是一些编号。应该在用户态的read更重要，因为他要写成代码，更抽象且容易被理解。</p><h2 id="第二十七题"><a href="#第二十七题" class="headerlink" title="第二十七题"></a>第二十七题</h2><blockquote><p>  现代操作系统将进程的地址空间从机器物理内存中分离出来，列举这种设计的两个好处。</p></blockquote><p>解：</p><ol><li>他为虚拟内存提出奠定了基础，如果进程地址空间和机器内存一一对应，则就不可能有虚拟内存存在。</li><li>防止其他恶意程序或者有bug的程序修改别的程序的内存。</li></ol><h2 id="第二十八题"><a href="#第二十八题" class="headerlink" title="第二十八题"></a>第二十八题</h2><blockquote><p>  对程序员而言，系统调用就像对其他库过程的调用一样。有无必要让程序员了解哪一个库过程导致了系统调用？在什么情形下，为什么？</p></blockquote><p>解：</p><p>我认为，一个好的库，应该是更抽象、美观。他应该让程序员忽略那些硬件细节和系统细节以达到更高效的开发。</p><h2 id="第二十九题"><a href="#第二十九题" class="headerlink" title="第二十九题"></a>第二十九题</h2><blockquote><p>  图1-23说明有一批UNIX的系统调用没有与之相等价的Win32 API，对于所列出的每一个没有Win32等价的调用，若程序员要把一个UNIX程序转换到Windows下运行，会有什么后果？</p><p>  <img src="http://image.zhangzef.com/IMG_20191009_181417.jpg" alt="img" style="zoom:33%;"></p></blockquote><p>解：</p><ul><li>link：在win32中文件将不能以另一个名字出现在其他目录中</li><li>mount和unmount：在win32中不能合并两个文件系统，也就必须分清楚哪些文件是在哪个驱动器上面。</li><li>chmod：在Win32中不能灵活改变文件的保护属性</li><li>kill：在Win32中不能杀死失常的程序</li></ul><h2 id="第三十题"><a href="#第三十题" class="headerlink" title="第三十题"></a>第三十题</h2><blockquote><p>  可移植的操作系统是能从一个系统体系结构到另一个体系结构的移动不需要任何修改的操作系统。请解释为什么建立一个完全可移植性的操作系统是不可行的。描述一下在设计一个髙度可移植的操作系统时你设计的两个高级层是什么样的。</p></blockquote><p>解：</p><ol><li>因为不同的硬件往往都有着自己独有的指令集，而某些硬件专用于实现一些功能，不同功能的指令集往往各不相同。即使功能相同的硬件指令集也不尽相同。</li><li>应该有一个用于屏蔽硬件细节吧，类似于计算机网络中的物理层。另一个不知道。。。（什么鬼问题，我对操作系统还不了解了，上来问这种劝退问题）</li></ol><h2 id="第三十一题"><a href="#第三十一题" class="headerlink" title="第三十一题"></a>第三十一题</h2><blockquote><p>  请解释在建立基于微内核的操作系统时策略与机制的分离带来的好处。</p></blockquote><p>解：</p><p>让内核体积更小，将复杂的策略实现交给用户态，使内核做的事情更加专一，效率更高。</p><h2 id="第三十二题"><a href="#第三十二题" class="headerlink" title="第三十二题"></a>第三十二题</h2><blockquote><p>  虚拟机由于很多因素而十分流行，然而他们也有一些缺点，给出一个缺点。</p></blockquote><p>解：</p><p>虚拟机建立在宿主操作系统之上，会给处理器和内存带来很大的开销来使虚拟机看似和宿主操作系统相同。</p><h2 id="第三十三题"><a href="#第三十三题" class="headerlink" title="第三十三题"></a>第三十三题</h2><blockquote><p>  下面是单位转换的练习：</p><p>  a)一微年是多少秒？</p><p>  b)微米常称为micron。那么gigamicron是多长？</p><p>  c) 1TB存储器中有多少字节？</p><p>  d)地球的质量是6000 yottagram, 换算成kilogram是多少？</p></blockquote><p>解：</p><ul><li>0.000001×365×24×3600 = 31.536s</li><li>1000000000×0.000001 = 1000m</li><li>2^40字节</li><li>6×10^21 kg</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/qq475703980/article/details/82534394" target="_blank" rel="noopener">《现代操作系统（中文第四版）》课后习题答案 第一章 引论</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自己写的，可能会有错误，望大家指正。&lt;/p&gt;
&lt;h2 id=&quot;第一题&quot;&gt;&lt;a href=&quot;#第一题&quot; class=&quot;headerlink&quot; title=&quot;第一题&quot;&gt;&lt;/a&gt;第一题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;  操作系统的两大主要作用是什么？（Page. 1）&lt;
      
    
    </summary>
    
      <category term="操作系统" scheme="zhangzef.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="现代操作系统" scheme="zhangzef.com/tags/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="课后习题" scheme="zhangzef.com/tags/%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="zhangzef.com/2019/10/06/Maven/"/>
    <id>zhangzef.com/2019/10/06/Maven/</id>
    <published>2019-10-06T07:54:24.000Z</published>
    <updated>2020-02-15T15:07:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pan.baidu.com/s/1h8P7aILAm9oJ2LD9ZKdGpA" target="_blank" rel="noopener">视频分享</a>     提取码：x8tf</p><h2 id="Maven的好处及概要"><a href="#Maven的好处及概要" class="headerlink" title="Maven的好处及概要"></a>Maven的好处及概要</h2><h3 id="maven的好处及核心"><a href="#maven的好处及核心" class="headerlink" title="maven的好处及核心"></a>maven的好处及核心</h3><p>普通项目通过把jar包复制进工程，而Maven则是建立一个jar包仓库，通过坐标（即公司名称+项目名称+版本号）来向仓库中寻找坐标</p><p>maven的两大核心：</p><ul><li>依赖管理：对jar包的管理过程</li><li>项目构建：项目在编码完成后，对项目进行编译、测试、打包、部署等一系列操作通过命令来实现<ul><li>通过maven命令将web项目发布到tomcat：mvn tomcat:run</li></ul></li></ul><h2 id="maven的配置及仓库"><a href="#maven的配置及仓库" class="headerlink" title="maven的配置及仓库"></a>maven的配置及仓库</h2><h3 id="maven的组成"><a href="#maven的组成" class="headerlink" title="maven的组成"></a>maven的组成</h3><p>maven文件组成： <img src="http://image.zhangzef.com/20200214183839.png" alt="img" style="zoom: 67%;"></p><p>查询maven版本信息：cmd中键入mvn -v</p><h3 id="maven仓库类型"><a href="#maven仓库类型" class="headerlink" title="maven仓库类型"></a>maven仓库类型</h3><p><img src="http://image.zhangzef.com/20200214183840.png" alt="img" style="zoom: 67%;"></p><h2 id="maven项目标准目录结构"><a href="#maven项目标准目录结构" class="headerlink" title="maven项目标准目录结构"></a>maven项目标准目录结构</h2><ul><li>src：项目源码<ul><li>main：主要代码<ul><li>java：java代码</li><li>recources：配置文件</li><li>webapp：页面素材：jsp文件、css文件等等</li></ul></li><li>test：单元测试<ul><li>java：单元测试类</li></ul></li><li>tarjet：存放编译后的文件（不属于maven标准目录结构）</li></ul></li><li>pom.xml：maven项目核心配置文件</li></ul><h2 id="maven常用的命令"><a href="#maven常用的命令" class="headerlink" title="maven常用的命令"></a>maven常用的命令</h2><h3 id="clean：清理命令"><a href="#clean：清理命令" class="headerlink" title="clean：清理命令"></a>clean：清理命令</h3><p>将已生成的.class文件清理掉（将根目录下的tarjet目录清理掉）</p><h3 id="compile：编译命令"><a href="#compile：编译命令" class="headerlink" title="compile：编译命令"></a>compile：编译命令</h3><p>将.java文件编译成.class文件</p><h3 id="test：测试命令"><a href="#test：测试命令" class="headerlink" title="test：测试命令"></a>test：测试命令</h3><p>将项目根目录下：test/java目录下的单元测试类全部执行</p><p>类名必须是XxxxTest.java</p><h3 id="package：打包命令"><a href="#package：打包命令" class="headerlink" title="package：打包命令"></a>package：打包命令</h3><p>动态打包：</p><ul><li>web project ……war包</li><li>java project ……jar包</li></ul><p>将项目打包到根目录下target目录</p><h3 id="install：安装命令"><a href="#install：安装命令" class="headerlink" title="install：安装命令"></a>install：安装命令</h3><p>解决本地多个项目公用一个jar包</p><p>将项目打包到本地仓库</p><h3 id="maven项目的生命周期"><a href="#maven项目的生命周期" class="headerlink" title="maven项目的生命周期"></a>maven项目的生命周期</h3><p>在maven项目中存在三套生命周期，每一套生命周期都是相互独立，即执行每一套生命周期中的命令时不会执行其他生命周期中的命令。在一套生命周期中，执行后面的命令，前面的命令会自动执行。</p><p>例：当执行install时命令执行顺序：compile -&gt; test -&gt; package -&gt; install</p><ul><li>CleanLifeCycle：清理生命周期<ul><li>Clean命令</li></ul></li><li>DefaultLifeCycle：默认生命周期（主要）<ul><li>compile命令</li><li>test命令</li><li>package命令</li><li>install命令</li><li>deploy命令</li></ul></li><li>SiteLifeCy：站点生命周期<ul><li>site命令</li></ul></li></ul><h2 id="maven整合struts2框架"><a href="#maven整合struts2框架" class="headerlink" title="maven整合struts2框架"></a>maven整合struts2框架</h2><ol><li>通过工具生成web.xml</li><li>添加struts2依赖</li><li>创建struts.xml</li><li>创建action类</li><li>在web.xml中配置struts2框架核心过滤器</li><li>编写action中方法</li><li>在struts.xml中配置</li></ol><h2 id="maven概念模型"><a href="#maven概念模型" class="headerlink" title="maven概念模型"></a>maven概念模型</h2><p><img src="http://image.zhangzef.com/20200214183838.png" alt="img" style="zoom:50%;"></p><p>概念模型即两大核心：</p><ul><li>依赖管理：通过pom.xml文件完成</li><li>项目构建：通过生命周期完成</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1h8P7aILAm9oJ2LD9ZKdGpA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;视频分享&lt;/a&gt;     提取码：x8tf&lt;/p&gt;
&lt;h2 id=&quot;Maven的好处及概要&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="JavaWeb" scheme="zhangzef.com/categories/JavaWeb/"/>
    
    
      <category term="依赖管理" scheme="zhangzef.com/tags/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/"/>
    
      <category term="Maven" scheme="zhangzef.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Spring--二、Spring基于注解的IOC及IOC的案例</title>
    <link href="zhangzef.com/2019/10/04/Spring--%E4%BA%8C%E3%80%81Spring%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84IOC%E5%8F%8AIOC%E7%9A%84%E6%A1%88%E4%BE%8B/"/>
    <id>zhangzef.com/2019/10/04/Spring--二、Spring基于注解的IOC及IOC的案例/</id>
    <published>2019-10-04T04:37:47.000Z</published>
    <updated>2020-02-15T15:07:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>视频：<a href="https://www.bilibili.com/video/av47952931/?p=1" target="_blank" rel="noopener">Spring5教程IDEA版-4天-2018黑马</a></p><p><a href="https://pan.baidu.com/s/1V5WhXOqkjQ0CuEA8Zj504A" target="_blank" rel="noopener">教学资源</a>    提取码：cwbz</p><p>基于注解的IOC配置和xml配置实现的功能都是一样的，都是降低程序间的耦合，只是配置的形式不一样。</p><h2 id="Spring中IOC的常用注解"><a href="#Spring中IOC的常用注解" class="headerlink" title="Spring中IOC的常用注解"></a>Spring中IOC的常用注解</h2><h3 id="注解分类"><a href="#注解分类" class="headerlink" title="注解分类"></a>注解分类</h3><ol><li>用于创建对象的：作用和在xml配置文件中写一个<strong>bean</strong>标签实现的功能相同</li><li>用于注入数据的：作用和在xml配置中的bean标签中写一个<strong>property</strong>标签功能相同</li><li>用于改变作用范围的：作用和bean标签使用<strong>scope</strong>属性实现功能相同</li><li>和生命周期相关：作用和在bean标签中使用<strong>init-method</strong>和<strong>destory-method</strong>作用相同</li></ol><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h5 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h5><p>在基于注解的配置中，我们还要将aop的jar包拷贝到lib目录</p><h4 id="使用-Component注解配置管理的资源"><a href="#使用-Component注解配置管理的资源" class="headerlink" title="使用@Component注解配置管理的资源"></a>使用@Component注解配置管理的资源</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//账户的业务层实现类  </span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"accountService"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(IAccountDao accountDao)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//账户的持久层实现类 </span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"accountDao"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> DBAssit dbAssit; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>当我们使用注解注入时，set方法不用写。</p><h4 id="创建Spring的xml配置文件并开启对注解的支持"><a href="#创建Spring的xml配置文件并开启对注解的支持" class="headerlink" title="创建Spring的xml配置文件并开启对注解的支持"></a>创建Spring的xml配置文件并开启对注解的支持</h4><p>导入约束时需要多导入一个context名称空间下的约束，并且告知Spring在创建容器时要扫描的包。</p><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><p>相当于：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="用于创建对象的"><a href="#用于创建对象的" class="headerlink" title="用于创建对象的"></a>用于创建对象的</h4><h5 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h5><ul><li>作用：把资源让Spring来管理，相当于在xml中配置一个bean。</li><li>属性：<ul><li>value：指定bean的id。如果不指定value属性，默认bean的id是当前类的类名，首字母小写。</li></ul></li></ul><h5 id="Controller-Service-Repository"><a href="#Controller-Service-Repository" class="headerlink" title="@Controller     @Service     @Repository"></a>@Controller     @Service     @Repository</h5><p>这三个注解和Component注解的衍生，作用及属性都是一模一样的，只不过提供了更加明确的语义化：</p><ul><li>@Controller：一般用于<strong>表现层</strong>的注解</li><li>@Service：一般用于<strong>业务层</strong>的注解</li><li>@Repository：一般用于<strong>持久层</strong>的注解</li></ul><p>细节：如果注解中有且只有一个属性要赋值时，且名称是value，value在赋值时可以不写。</p><h4 id="用于注入数据的"><a href="#用于注入数据的" class="headerlink" title="用于注入数据的"></a>用于注入数据的</h4><p>相当于：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">ref</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h5><p>在Spring的IOC容器中寻找变量自动按类型匹配。（容器中的变量即用@Component或其他三个注解的对象）当使用注解注入属性时，set方法可以忽略。它只能注入其他bean类型。</p><p>作用：</p><ul><li>当只有一个变量的类型匹配时则成功。</li><li>当有多个变量的类型匹配时，使用要注解的对象变量名称作为bean的id，在Spring的IOC容器中查找，找到了就可以注入成功，找不到就报错。</li></ul><p>出现位置：</p><p>​    可以是变量上，也可以是方法上。</p><h5 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h5><p>作用：在自动按照类型注入的基础之上，再按照Bean的id注入。它在给字段注入时不能独立使用，必须和@Autowired一起使用；但是给方法参数注入时，可以独立使用。</p><p>属性：value：指定bean的id。</p><h5 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h5><p>作用：直接按照Bean的id注入。它也只能注入其他bean类型。</p><p>属性：name：指定bean的id</p><h5 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h5><p>作用：注入基本数据类型和String类型数据的</p><p>属性： value：用于指定值（可以支持Spring的SpEL表达式：${表达式}）</p><h4 id="用于改变作用范围的"><a href="#用于改变作用范围的" class="headerlink" title="用于改变作用范围的"></a>用于改变作用范围的</h4><p>相当于</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">scope</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h5><p>作用： 指定bean的作用范围。 </p><p>属性： value：指定范围的值。 取值：<strong>singleton</strong>    <strong>prototype</strong>    request    session    globalsession</p><h4 id="和生命周期相关（了解）"><a href="#和生命周期相关（了解）" class="headerlink" title="和生命周期相关（了解）"></a>和生命周期相关（了解）</h4><p>相当于</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">init-method</span>=<span class="string">""</span> <span class="attr">destroy-method</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></table></figure><h5 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h5><p>作用： 用于指定初始化方法。</p><h5 id="PreDestroy"><a href="#PreDestroy" class="headerlink" title="@PreDestroy"></a>@PreDestroy</h5><p>作用： 用于指定销毁方法。</p><h3 id="关于Spring注解和XML的选择问题"><a href="#关于Spring注解和XML的选择问题" class="headerlink" title="关于Spring注解和XML的选择问题"></a>关于Spring注解和XML的选择问题</h3><ul><li>注解的优势： 配置简单，维护方便（我们找到类，就相当于找到了对应的配置）。 </li><li>XML的优势： 修改时，不用改源码。不涉及重新编译和部署。</li></ul><p>两者比较：<img src="http://image.zhangzef.com/20200214184212.png" alt="img" style="zoom: 67%;"></p><h2 id="案例使用xml方式和注解方式实现单表的CRUD操作"><a href="#案例使用xml方式和注解方式实现单表的CRUD操作" class="headerlink" title="案例使用xml方式和注解方式实现单表的CRUD操作"></a>案例使用xml方式和注解方式实现单表的CRUD操作</h2><p>CRUD即增(Create)、查(Retrieve)、改(Update)、删(Delete)</p><p>此处可看链接视频的P35-P38</p><h2 id="改造基于注解的IOC案例，使用纯注解的方式实现"><a href="#改造基于注解的IOC案例，使用纯注解的方式实现" class="headerlink" title="改造基于注解的IOC案例，使用纯注解的方式实现"></a>改造基于注解的IOC案例，使用纯注解的方式实现</h2><p>经过上面的改造，我们还有几种配置需要从xml改成注解配置。</p><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><p>作用： 用于指定当前类是一个spring配置类，当创建容器时会从该类上加载注解。获取容器时需要使用AnnotationApplicationContext(有@Configuration注解的类.class)。 </p><p>属性： value:用于指定配置类的字节码</p><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>作用： 用于指定spring在初始化容器时要扫描的包。作用和在spring的xml配置文件中的： &lt;context:component-scan base-package=”com.itheima”/&gt;是一样的。 </p><p>属性： basePackages：用于指定要扫描的包。和该注解中的value属性作用一样。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.itheima"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><p>作用： 该注解只能写在方法上，表明使用此方法创建一个对象，将方法的返回值放入spring容器。 </p><p>属性： name：给当前@Bean注解方法创建的对象指定一个名称(即bean的id）（当不写时默认为当前方法的名字）。</p><p>细节：当我们使用注解配置方法时，如果方法有参数，spring框架会去容器中查找有没有可用的bean对象，查找方式和Autowired注解的作用是一样的。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name=<span class="string">"dbAssit"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> DBAssit <span class="title">createDBAssit</span><span class="params">(DataSource dataSource)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DBAssit(dataSource); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><p>作用： 用于导入其他配置类，在引入其他配置类时，可以不用再写@Configuration注解。当然，写上也没问题。 有import的为父配置类，导入的是子配置类。</p><p>属性： value[]：用于指定其他配置类的字节码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"com.itheima.spring"</span>) </span><br><span class="line"><span class="meta">@Import</span>(&#123; JdbcConfig.class&#125;) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h3><p>作用：用于加载.properties文件中的配置。例如我们配置数据源时，可以把连接数据库的信息写到properties配置文件中，就可以使用此注解指定properties配置文件的位置。</p><p>属性： value[]：用于指定properties文件位置。如果是在类路径下，需要写上classpath:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jdbc.properties文件： </span><br><span class="line">jdbc.driver=com.mysql.jdbc.Driver </span><br><span class="line">jdbc.url=jdbc:mysql:<span class="comment">//localhost:3306/day44_ee247_spring</span></span><br><span class="line">jdbc.username=root </span><br><span class="line">jdbc.password=<span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:jdbc.properties"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span></span>&#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="Spring和Junit的整合"><a href="#Spring和Junit的整合" class="headerlink" title="Spring和Junit的整合"></a>Spring和Junit的整合</h2><p>JUnit是一个Java编程语言的单元测试框架。</p><h3 id="问题及解决思路"><a href="#问题及解决思路" class="headerlink" title="问题及解决思路"></a>问题及解决思路</h3><p>在测试类中，每个测试方法都有以下两行代码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">IAccountService as = ac.getBean(<span class="string">"accountService"</span>,IAccountService.class);</span><br></pre></td></tr></table></figure><p>这两行代码的作用分别是获取容器和创建业务层对象，如果不写的话，直接会提示空指针异常。所以又不能轻易删掉。但是测试人员不会管你使用的到底是什么框架，所以可能他根本不知道容器是个什么东西，所以我们需要的是<strong>程序能自动帮我们创建容器</strong>。</p><p>Junit的一个注解可以让我们替换他的运行器，这时我们可以用这个注解将运行器替换为spring框架的运行器，它可以读取配置文件（或注解）来创建容器。我们只需要告诉它配置文件在哪就行了。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="导入jar包-1"><a href="#导入jar包-1" class="headerlink" title="导入jar包"></a>导入jar包</h4><p>导入spring-test的jar包和spring-aop的jar包。</p><h4 id="使用-RunWith注解替换原有运行器"><a href="#使用-RunWith注解替换原有运行器" class="headerlink" title="使用@RunWith注解替换原有运行器"></a>使用@RunWith注解替换原有运行器</h4><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h4 id="使用-ContextConfiguration指定spring配置文件的位置"><a href="#使用-ContextConfiguration指定spring配置文件的位置" class="headerlink" title="使用@ContextConfiguration指定spring配置文件的位置"></a>使用@ContextConfiguration指定spring配置文件的位置</h4><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class) </span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations= &#123;<span class="string">"classpath:bean.xml"</span>&#125;) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>@ContextConfiguration注解： </p><ul><li>locations属性：用于指定配置文件的位置。如果是类路径下，需要用classpath:表明 </li><li>classes属性：用于指定注解的类。当不使用xml配置时，需要用此属性指定注解类的位置。</li></ul><h4 id="使用-Autowired给测试类中的变量注入数据"><a href="#使用-Autowired给测试类中的变量注入数据" class="headerlink" title="使用@Autowired给测试类中的变量注入数据"></a>使用@Autowired给测试类中的变量注入数据</h4><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class) </span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations= &#123;<span class="string">"classpath:bean.xml"</span>&#125;) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123; </span><br><span class="line"><span class="meta">@Autowired</span> <span class="keyword">private</span> IAccountService as ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为什么不把测试类配到xml中"><a href="#为什么不把测试类配到xml中" class="headerlink" title="为什么不把测试类配到xml中"></a>为什么不把测试类配到xml中</h3><ol><li>当我们在xml中配置了一个bean，spring加载配置文件创建容器时，就会创建对象。</li><li>测试类只是我们在测试功能时使用，而在项目中它并不参与程序逻辑，也不会解决需求上的问题，所以创建完了，并没有使用。那么存在容器中就会造成资源的浪费。</li></ol><p>接下来请看下一篇。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;视频：&lt;a href=&quot;https://www.bilibili.com/video/av47952931/?p=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring5教程IDEA版-4天-2018黑马&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;h
      
    
    </summary>
    
      <category term="JavaWeb" scheme="zhangzef.com/categories/JavaWeb/"/>
    
    
      <category term="Spring" scheme="zhangzef.com/tags/Spring/"/>
    
      <category term="框架" scheme="zhangzef.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring--一、Spring概述及Spring中基于XML的IOC配置</title>
    <link href="zhangzef.com/2019/10/02/Spring--%E4%B8%80%E3%80%81Spring%E6%A6%82%E8%BF%B0%E5%8F%8ASpring%E4%B8%AD%E5%9F%BA%E4%BA%8EXML%E7%9A%84IOC%E9%85%8D%E7%BD%AE/"/>
    <id>zhangzef.com/2019/10/02/Spring--一、Spring概述及Spring中基于XML的IOC配置/</id>
    <published>2019-10-02T10:48:40.000Z</published>
    <updated>2020-02-15T15:07:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>视频：<a href="https://www.bilibili.com/video/av47952931/?p=1" target="_blank" rel="noopener">Spring5教程IDEA版-4天-2018黑马</a></p><p><a href="https://pan.baidu.com/s/1V5WhXOqkjQ0CuEA8Zj504A" target="_blank" rel="noopener">教学资源</a>    提取码：cwbz</p><h2 id="Spring的概述（了解）"><a href="#Spring的概述（了解）" class="headerlink" title="Spring的概述（了解）"></a>Spring的概述（了解）</h2><h3 id="spring是什么"><a href="#spring是什么" class="headerlink" title="spring是什么"></a>spring是什么</h3><p>Spring是分层的Java SE/EE应用 full-stack轻量级开源框架，以IoC（Inverse Of Control：反转控制）和AOP（Aspect Oriented Programming：面向切面编程）为内核，提供了展现层Spring MVC和持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE企业应用开源框架。而这次要讲的Spring框架是处于业务层的框架。</p><h3 id="Spring的优势"><a href="#Spring的优势" class="headerlink" title="Spring的优势"></a>Spring的优势</h3><blockquote><p>  <strong>方便解耦，简化开发</strong></p><p>  通过Spring提供的IoC容器，可以将对象间的依赖关系交由Spring进行控制，避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</p></blockquote><blockquote><p>  <strong>AOP编程的支持</strong></p><p>  通过Spring的AOP功能，方便进行面向切面的编程，许多不容易用传统OOP实现的功能可以通过AOP轻松应付。</p></blockquote><blockquote><p>  <strong>声明式事务的支持</strong></p><p>  可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务的管理，提高开发效率和质量。</p></blockquote><blockquote><p>  <strong>方便程序的测试</strong></p><p>  可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。</p></blockquote><blockquote><p>  <strong>方便集成各种优秀框架</strong></p><p>  Spring可以降低各种框架的使用难度，提供了对各种优秀框架（Struts、Hibernate、Hessian、Quartz等）的直接支持。</p></blockquote><blockquote><p>  <strong>降低JavaEE API的使用难度</strong></p><p>  Spring对JavaEE API（如JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些API的使用难度大为降低。</p></blockquote><blockquote><p>  <strong>Java源码是经典学习范例</strong></p><p>  Spring的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java设计模式灵活运用以及对Java技术的高深造诣。它的源代码无意是Java技术的最佳实践的范例。</p></blockquote><h3 id="Spring的体系结构"><a href="#Spring的体系结构" class="headerlink" title="Spring的体系结构"></a>Spring的体系结构</h3><p><img src="http://image.zhangzef.com/20200214184451.png" alt="img" style="zoom: 67%;"></p><p>Spring的两大核心为：AOP和IOC</p><p>AOP部分为：AOP、Aspects、Instrumentation、Messaging</p><p>IOC（核心容器）部分为Core Container部分</p><h2 id="IOC的概念和作用"><a href="#IOC的概念和作用" class="headerlink" title="IOC的概念和作用"></a>IOC的概念和作用</h2><h3 id="程序的耦合与解耦"><a href="#程序的耦合与解耦" class="headerlink" title="程序的耦合与解耦"></a>程序的耦合与解耦</h3><p>程序的耦合即程序间的依赖关系：①类之间的依赖关系。②方法间的依赖关系。</p><p>解耦即降低程序间的依赖关系，实际开发中应做到编译期不依赖，运行时才依赖：</p><ol><li>使用反射（Class.forName()）来创建对象，避免使用new来创建对象。</li><li>通过读取配置文件来获取要创建的对象的全限定类名。<ol><li>配置文件内容：唯一标识=全限定类名（key=value）</li></ol></li></ol><h3 id="工厂模式解耦"><a href="#工厂模式解耦" class="headerlink" title="工厂模式解耦"></a>工厂模式解耦</h3><p>在实际开发中我们可以把三层（参考JavaEE三层结构：Web(表现)层、业务层、DAO(数据)层）的对象都使用配置文件配置起来，当启动服务器应用加载的时候，让一个类中的方法通过读取配置文件，把这些对象创建出来并存起来。在接下来的使用的时候，直接拿过来用就好了。 </p><p>那么，这个读取配置文件，创建和获取三层对象的类就是工厂。</p><p>建议了解单例多例对象来提高工厂模式解耦效率。</p><h3 id="控制翻转-Inversion-Of-Control（IOC）"><a href="#控制翻转-Inversion-Of-Control（IOC）" class="headerlink" title="控制翻转-Inversion Of Control（IOC）"></a>控制翻转-Inversion Of Control（IOC）</h3><p>控制反转（IOC）即把创建对象的权利交给框架，是框架的重要特征，它包括依赖注入（Dependency Injection，简称DI）和依赖查找（Dependency Lookup）</p><p>原来我们创建对象是用new来<strong>主动</strong>创建的，即我们的项目对资源的使用是直接关联的，如图：<img src="http://image.zhangzef.com/20200214184452.png" alt="img" style="zoom:50%;"></p><p>现在，我们引入框架的工厂来帮我们创建生产对象，他负责给我们从指定容器中获取指定对象的类，这时候这个对象获取过来是不是我能用的，我们的应用本身已经无法得知了，工厂能得到哪个对象是根据配置文件中的全限定类名（key=value）获得的，我们的应用本身没有自主控制权。而原来的直接new的方法则应用本身是有自主控制权的。所以这种工厂模式降低了我们程序间的依赖关系，如图：<img src="http://image.zhangzef.com/20200214184454.png" alt="img" style="zoom:50%;"></p><p>即IOC用来削减计算机程序间的耦合。</p><h2 id="使用Spring的IOC解决程序耦合"><a href="#使用Spring的IOC解决程序耦合" class="headerlink" title="使用Spring的IOC解决程序耦合"></a>使用Spring的IOC解决程序耦合</h2><h3 id="Spring的开发包"><a href="#Spring的开发包" class="headerlink" title="Spring的开发包"></a>Spring的开发包</h3><p>官网：<a href="http://spring.io/" target="_blank" rel="noopener">http://spring.io/</a></p><p>Spring的目录结构：</p><ul><li>dcos：API和开发规范</li><li>libs：jar包和源码</li><li>schema：约束</li></ul><h3 id="Spring基于XML的IOC细节"><a href="#Spring基于XML的IOC细节" class="headerlink" title="Spring基于XML的IOC细节"></a>Spring基于XML的IOC细节</h3><h4 id="Spring中工厂的类结构图"><a href="#Spring中工厂的类结构图" class="headerlink" title="Spring中工厂的类结构图"></a>Spring中工厂的类结构图</h4><p><img src="http://image.zhangzef.com/20200214184449.png" alt="img" style="zoom: 67%;"></p><p><img src="http://image.zhangzef.com/20200214184450.png" alt="img" style="zoom:67%;"></p><h5 id="BeanFactory和ApplicationContext的区别"><a href="#BeanFactory和ApplicationContext的区别" class="headerlink" title="BeanFactory和ApplicationContext的区别"></a>BeanFactory和ApplicationContext的区别</h5><p>BeanFactory 才是Spring 容器中的顶层接口。ApplicationContext 是它的子接口。</p><p>BeanFactory 和ApplicationContext 的区别：创建对象的时间点不一样。</p><ul><li>ApplicationContext：只要一读取配置文件，默认情况下就会创建对象。单例对象适用。常用此接口，Spring会根据对象的单例多例来选择。</li><li>BeanFactory：什么使用什么时候创建对象。多例对象适用。</li></ul><h5 id="ApplicationContext接口的实现类"><a href="#ApplicationContext接口的实现类" class="headerlink" title="ApplicationContext接口的实现类"></a>ApplicationContext接口的实现类</h5><ul><li>ClassPathXmlApplicationContext：<br>它是从类的根路径下加载配置文件 推荐使用这种</li><li>FileSystemXmlApplicationContext：<br>它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</li><li>AnnotationConfigApplicationContext:<br>当我们使用注解配置容器对象时，需要使用此类来创建spring 容器。它用来读取注解。</li></ul><h4 id="IOC中bean标签和管理对象细节"><a href="#IOC中bean标签和管理对象细节" class="headerlink" title="IOC中bean标签和管理对象细节"></a>IOC中bean标签和管理对象细节</h4><h5 id="bean标签"><a href="#bean标签" class="headerlink" title="bean标签"></a>bean标签</h5><p>作用：</p><ul><li>用于配置对象让spring来创建的。 </li><li><p>默认情况下它调用的是类中的无参构造函数。如果没有无参构造函数则不能创建成功。</p><p>属性：</p></li><li><p>id：给对象在容器中提供一个唯一标识。用于获取对象。</p></li><li>class：指定类的全限定类名。用于反射创建对象。默认情况下调用无参构造函数。</li><li>scope：指定对象的作用范围。<ul><li>singleton :默认值，单例的.</li><li>prototype :多例的. </li><li>request :WEB项目中,Spring创建一个Bean的对象,将对象存入到request域中. </li><li>session :WEB项目中,Spring创建一个Bean的对象,将对象存入到session域中.</li><li>global session :WEB项目中,应用在Portlet环境.如果没有Portlet环境那么globalSession相当于session. </li></ul></li><li>init-method：指定类中的初始化方法名称。</li><li>destroy-method：指定类中销毁方法名称。</li></ul><h5 id="bean的作用范围和生命周期"><a href="#bean的作用范围和生命周期" class="headerlink" title="bean的作用范围和生命周期"></a>bean的作用范围和生命周期</h5><p>单例对象：scope=”singleton” </p><ul><li>一个应用只有一个对象的实例。它的作用范围就是整个引用。 </li><li>生命周期： <ul><li>对象出生：当应用加载，创建容器时，对象就被创建了。 </li><li>对象活着：只要容器在，对象一直活着。 </li><li>对象死亡：当应用卸载，销毁容器时，对象就被销毁了。 </li></ul></li></ul><p>多例对象：scope=”prototype” </p><ul><li>每次访问对象时，都会重新创建对象实例。 </li><li>生命周期： <ul><li>对象出生：当使用对象时，创建新的对象实例。</li><li>对象活着：只要对象在使用中，就一直活着。 </li><li>对象死亡：当对象长时间不用时，被java的垃圾回收器回收了。</li></ul></li></ul><h5 id="实例化bean的三种方式"><a href="#实例化bean的三种方式" class="headerlink" title="实例化bean的三种方式"></a>实例化bean的三种方式</h5><p>第一种方式：使用默认无参构造函数 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在默认情况下： 它会根据默认无参构造函数来创建类对象。如果bean中没有默认无参构造函数，将会创建失败。--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>第二种方式：spring管理静态工厂-使用静态工厂的方法创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*模拟一个静态工厂，创建业务层实现类*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IAccountService <span class="title">createAccountService</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此种方式是:</span></span><br><span class="line"><span class="comment">使用StaticFactory类中的静态方法createAccountService创建对象，并存入spring容器</span></span><br><span class="line"><span class="comment">id属性：指定bean的id，用于从容器中获取</span></span><br><span class="line"><span class="comment">class属性：指定静态工厂的全限定类名</span></span><br><span class="line"><span class="comment">factory-method属性：指定生产对象的静态方法</span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.itheima.factory.StaticFactory"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">"createAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第三种方式：spring管理实例工厂-使用实例工厂的方法创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*模拟一个实例工厂，创建业务层实现类</span></span><br><span class="line"><span class="comment">*此工厂创建对象，必须现有工厂实例对象，再调用方法 </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAccountService <span class="title">createAccountService</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此种方式是： </span></span><br><span class="line"><span class="comment">先把工厂的创建交给spring来管理。 然后在使用工厂的bean来调用里面的方法 </span></span><br><span class="line"><span class="comment">factory-bean属性：用于指定实例工厂bean的id。 </span></span><br><span class="line"><span class="comment">factory-method属性：用于指定实例工厂中创建对象的方法。</span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instancFactory"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.itheima.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-bean</span>=<span class="string">"instancFactory"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">"createAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Spring的依赖注入"><a href="#Spring的依赖注入" class="headerlink" title="Spring的依赖注入"></a>Spring的依赖注入</h4><h5 id="依赖注入的概念"><a href="#依赖注入的概念" class="headerlink" title="依赖注入的概念"></a>依赖注入的概念</h5><p>依赖注入是Spring框架核心IOC的具体实现</p><p>什么是依赖注入呢？即在当前类需要其他类的对象时，由Spring为我们提供，而不是自己创建，我们只需要在配置文件中说明依赖关系的维护。</p><p>依赖注入：</p><ul><li>能注入的数据有三类：<ul><li>基本类型和String</li><li>其他bean类型（在配置文件或注解配置过的bean）</li><li>复杂类型/集合类型</li></ul></li><li>注入的方式：<ul><li>使用构造函数提供</li><li>使用set方法提供</li><li>使用注解提供（下一篇）</li></ul></li></ul><h5 id="构造函数的依赖注入"><a href="#构造函数的依赖注入" class="headerlink" title="构造函数的依赖注入"></a>构造函数的依赖注入</h5><p>就是通过类的构造函数，给成员变量赋值。赋值操作是通过配置文件的方式，让Spring框架来帮我们注入。一般这种方式用于不经常更变的成员变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是我们需要调用的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="keyword">private</span> Integer age; </span><br><span class="line">    <span class="keyword">private</span> Date birthday; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">(String name, </span></span></span><br><span class="line"><span class="function"><span class="params">                              Integer age, Date birthday)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.name = name; </span><br><span class="line">        <span class="keyword">this</span>.age = age; </span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday; </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(name+<span class="string">","</span>+age+<span class="string">","</span>+birthday); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用构造函数的方式，给service中的属性传值 </span></span><br><span class="line"><span class="comment">要求： </span></span><br><span class="line"><span class="comment">类中需要提供一个对应参数列表的构造函数。 </span></span><br><span class="line"><span class="comment">涉及的标签： constructor-arg （bean标签内部）</span></span><br><span class="line"><span class="comment">       属性： </span></span><br><span class="line"><span class="comment">        index:指定参数在构造函数参数列表的索引位置 </span></span><br><span class="line"><span class="comment">        type:指定参数在构造函数中的数据类型</span></span><br><span class="line"><span class="comment">        name:指定参数在构造函数中的名称 用这个找给谁赋值</span></span><br><span class="line"><span class="comment">=======上面三个都是找给谁赋值，下面两个指的是赋什么值的============== </span></span><br><span class="line"><span class="comment">        value:它能赋的值是基本数据类型和String类型 </span></span><br><span class="line"><span class="comment">        ref:它能赋的值是其他bean类型，也就是说，必须得是在配置文件中配置过的bean </span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring注入的类型默认为字符串，要注入其他bean类型时，他不能强制转换成该类型，需要另外在配置文件中创建一个bean类型，让该类型的构造函数帮我们创建好，再将该类型通过配置文件传入要注入的对象。</p><p>优势：在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。</p><p>弊端：改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。</p><h5 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h5><p>就是利用类中提供set方法类设置成员变量的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="keyword">private</span> Integer age; </span><br><span class="line">    <span class="keyword">private</span> Date birthday; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.name = name; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.age = age; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(name+<span class="string">","</span>+age+<span class="string">","</span>+birthday); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过配置文件给bean中的属性传值：使用set方法的方式 </span></span><br><span class="line"><span class="comment">涉及的标签： property（bean标签里面）</span></span><br><span class="line"><span class="comment">属性： </span></span><br><span class="line"><span class="comment">name：找的是类中set方法后面的部分 </span></span><br><span class="line"><span class="comment">ref：给属性赋值是其他bean类型的 </span></span><br><span class="line"><span class="comment">value：给属性赋值是基本数据类型和string类型的 </span></span><br><span class="line"><span class="comment">实际开发中，此种方式用的较多。 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"21"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>优势：创建对象时没有明确的限制，可以直接使用默认构造函数</p><p>弊端：如有某个成员必须有值，则获取对象可能set方法没有执行</p><h5 id="复杂类型注入"><a href="#复杂类型注入" class="headerlink" title="复杂类型注入"></a>复杂类型注入</h5><p>本质上还是使用set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String[] myStrs; </span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; myList; </span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; mySet; </span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; myMap; </span><br><span class="line">    <span class="keyword">private</span> Properties myProps; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyStrs</span><span class="params">(String[] myStrs)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.myStrs = myStrs; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyList</span><span class="params">(List&lt;String&gt; myList)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.myList = myList; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMySet</span><span class="params">(Set&lt;String&gt; mySet)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.mySet = mySet; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyMap</span><span class="params">(Map&lt;String, String&gt; myMap)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.myMap = myMap; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyProps</span><span class="params">(Properties myProps)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.myProps = myProps; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(Arrays.toString(myStrs)); </span><br><span class="line">        System.out.println(myList); </span><br><span class="line">        System.out.println(mySet); </span><br><span class="line">        System.out.println(myMap);</span><br><span class="line">        System.out.println(myProps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注入集合数据 </span></span><br><span class="line"><span class="comment">List结构的： array,list,set </span></span><br><span class="line"><span class="comment">Map结构的 map,entry,props,prop </span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 在注入集合数据时，只要结构相同，标签可以互换 --&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 给数组注入数据 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myStrs"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 注入list集合数据 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myList"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span> <span class="tag">&lt;/<span class="name">array</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 注入set集合数据 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mySet"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 注入Map数据 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myMap"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testA"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testB"</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 注入properties数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myProps"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"testA"</span> <span class="attr">value</span>=<span class="string">"aaa"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"testB"</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="使用P名称空间注入数据"><a href="#使用P名称空间注入数据" class="headerlink" title="使用P名称空间注入数据"></a>使用P名称空间注入数据</h5><p>通过再xml中导入p名称空间，使用p：propertyName来注入数据，本质还是调用set方法（视频里没讲，可能是少了一集）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl4</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="keyword">private</span> Integer age; </span><br><span class="line">    <span class="keyword">private</span> Date birthday; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.name = name; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.age = age; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(name+<span class="string">","</span>+age+<span class="string">","</span>+birthday); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl4"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">p:name</span>=<span class="string">"test"</span> <span class="attr">p:age</span>=<span class="string">"21"</span> <span class="attr">p:birthday-ref</span>=<span class="string">"now"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来请看下一篇。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;视频：&lt;a href=&quot;https://www.bilibili.com/video/av47952931/?p=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring5教程IDEA版-4天-2018黑马&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;h
      
    
    </summary>
    
      <category term="JavaWeb" scheme="zhangzef.com/categories/JavaWeb/"/>
    
    
      <category term="Spring" scheme="zhangzef.com/tags/Spring/"/>
    
      <category term="框架" scheme="zhangzef.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>记--20190923</title>
    <link href="zhangzef.com/2019/09/23/%E8%AE%B0-20190923/"/>
    <id>zhangzef.com/2019/09/23/记-20190923/</id>
    <published>2019-09-23T12:17:55.000Z</published>
    <updated>2020-02-15T15:07:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天的心情可能就像过山车一样，落起落落落落落。。。到晚上的时候已经麻木，什么都无所谓了。。。</p><h2 id="蓝桥杯报销"><a href="#蓝桥杯报销" class="headerlink" title="蓝桥杯报销"></a>蓝桥杯报销</h2><p>关于蓝桥杯报销的事跑了挺长时间了，可能是自己办事能力太差了，每次都像无头苍蝇一样到处乱撞。问了计算机院的老师，还问了16级的辅导员，跑了新区老区，今天终于给他弄完了，不过最后做的不太好，忘记将报销明细给记下来算一算，挺失误的。其实最后挺感谢16级的辅导员的，还是她帮我找的老师去算报销，要不然又得问一大堆人。。。最后办完专门给老师发了个短信谢谢老师。</p><h2 id="ACM省赛单项奖学金审核"><a href="#ACM省赛单项奖学金审核" class="headerlink" title="ACM省赛单项奖学金审核"></a>ACM省赛单项奖学金审核</h2><p>前一段时间导员给我说我的ACM省赛单项奖学金没有过审，我突然一愣，一脸懵逼。当时老师说级别不够，然后我觉得不可能啊，就问老师能不能申诉，可能是自己语气不太好，老师直接说不能。（自己有时候脾气太急了）后来问了学长啥的，又和老师联系了一下，老师也帮忙问了问。最后让我去行政楼问，还专门叮嘱我是去咨询，不是去质问。</p><p>今天去了行政楼，那个老师说这个奖从今年开始都不算了。WTM……当时就想怼一句，这个奖不算哪个省赛的奖还有资格算？？？最后说了两句，心里火大的很，可能语气也不太好，就走了。。。</p><h2 id="三好学生"><a href="#三好学生" class="headerlink" title="三好学生"></a>三好学生</h2><p>本来想着今年有希望能申请三好学生的，后来公布名单的时候没有我，心里挺失落的，就和前面那个人综合测评差了0.3分，正正好到我前面一个人，实力不行，无话可说。今天班长和我说我们专业多出来一个三好学生名额，最后导员说我文化课成绩不够年级前百分之三十，没有给我，行吧，莫得办法，菜就是菜。。。</p><h2 id="关于考研"><a href="#关于考研" class="headerlink" title="关于考研"></a>关于考研</h2><p>今天听了某考研机构的讲课，突然感觉要开始学英语和数学了，虽然他讲的有些夸张，想让我们报辅导班，但是英语和数学确实得拉长战线，感觉好紧张啊，还想啃一啃西瓜书和两本黑砖头的操作系统和计网的书了，光这三本砖头就够我看的了，感觉时间不够啊，还要准备接下来的区域赛，卧槽，压力好大啊。。。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>自己在办事能力和与人交流能力上差太多了，以后对老师和找别人办事一定要忍住脾气，对别人一定要谦逊有礼貌，办完事别忘说谢谢，麻烦您了，和别人打声招呼。对未来这学期的规划也该做一做了，考研英语数学，看书，ACM区域赛。希望能在区域赛拿个牌子，要是什么都没拿到，大学四年真的是废了。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天的心情可能就像过山车一样，落起落落落落落。。。到晚上的时候已经麻木，什么都无所谓了。。。&lt;/p&gt;
&lt;h2 id=&quot;蓝桥杯报销&quot;&gt;&lt;a href=&quot;#蓝桥杯报销&quot; class=&quot;headerlink&quot; title=&quot;蓝桥杯报销&quot;&gt;&lt;/a&gt;蓝桥杯报销&lt;/h2&gt;&lt;p&gt;关于蓝桥
      
    
    </summary>
    
      <category term="日志" scheme="zhangzef.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="心情" scheme="zhangzef.com/tags/%E5%BF%83%E6%83%85/"/>
    
      <category term="感悟" scheme="zhangzef.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #587 (Div. 3) 比赛&amp;补题</title>
    <link href="zhangzef.com/2019/09/21/Codeforces-Round-587-Div-3-%E6%AF%94%E8%B5%9B-%E8%A1%A5%E9%A2%98/"/>
    <id>zhangzef.com/2019/09/21/Codeforces-Round-587-Div-3-比赛-补题/</id>
    <published>2019-09-21T09:50:46.000Z</published>
    <updated>2020-02-15T15:07:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>tips：大家评论的时候写一下邮箱和昵称呀，头像是根据昵称和邮箱随机生成的😁</p><p>想开始打一打cf，刷题刷的太少了，太吃亏了。</p><h2 id="1216A-Prefixes"><a href="#1216A-Prefixes" class="headerlink" title="1216A. Prefixes"></a>1216A. Prefixes</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一个字符串，长度为偶数，只包含小写字母a和b，你可以变换其中任意一个字母，把a换成b或者把b换成a。要求最后结果中的字符串任意偶数前缀a和b的数量相同。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>只需要保证第i个字母和第i+1个字母不相同就行了，i每次递增2。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">31</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> n, ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;n &gt;&gt;s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[i+<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'a'</span>)</span><br><span class="line">                s[i] = <span class="string">'b'</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                s[i] = <span class="string">'a'</span>;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;ans &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;s &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1216B-Shooting"><a href="#1216B-Shooting" class="headerlink" title="1216B. Shooting"></a>1216B. Shooting</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给你几个罐子，每个罐子的耐久度为ai，你要将所有罐子击碎，当你要击碎第i个罐子时，你需要射击(ai*x+1)次，其中x为你已经击碎的罐子，可认为你将一个罐子击碎才会去射击下一个罐子。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>x是重点，只要反向排一下序就行了，有些类似哈夫曼树。一开始以为最后让依次输出第i个罐子是第几次被射击的，后来WA了一次才发现是让依次输出射击的是第几个罐子。。。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ai, index;</span><br><span class="line">&#125;ax[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(A a, A b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.ai&gt;b.ai;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;ax[i].ai;</span><br><span class="line">        ax[i].index = i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>, ans=<span class="number">0</span>;</span><br><span class="line">    sort(ax, ax+n, cmp1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=(ax[i].ai*x+<span class="number">1</span>);</span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;ans &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;ax[<span class="number">0</span>].index;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">' '</span> &lt;&lt;ax[i].index;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1216C-White-Sheet"><a href="#1216C-White-Sheet" class="headerlink" title="1216C. White Sheet"></a>1216C. White Sheet</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给你一个白纸的左下角和右上角坐标，还有两张黑纸的左下角和右上角坐标，保证这三张纸的边缘都平行于坐标轴，问你黑纸是否能完全覆盖住白纸。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>坐标范围1e6，可以依次遍历白纸边缘的每一个点，看他是否在黑纸内，递增要设成0.5，不能设成1，最后没时间了，不知道思路对不对，回来再来补吧。（补：果然过了，太智障了。。。）</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line">    <span class="keyword">int</span> x3, y3, x4, y4;</span><br><span class="line">    <span class="keyword">int</span> x5, y5, x6, y6;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;x1 &gt;&gt;y1 &gt;&gt;x2 &gt;&gt;y2;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;x3 &gt;&gt;y3 &gt;&gt;x4 &gt;&gt;y4;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;x5 &gt;&gt;y5 &gt;&gt;x6 &gt;&gt;y6;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">double</span> i=x1; i&lt;=x2; i+=<span class="number">0.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((i&lt;=x4&amp;&amp;i&gt;=x3&amp;&amp;y1&lt;=y4&amp;&amp;y1&gt;=y3) || (i&lt;=x6&amp;&amp;i&gt;=x5&amp;&amp;y1&lt;=y6&amp;&amp;y1&gt;=y5))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt;<span class="string">"YES"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">double</span> i=y1; i&lt;=y2; i+=<span class="number">0.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((i&lt;=y4&amp;&amp;i&gt;=y3&amp;&amp;x1&lt;=x4&amp;&amp;x1&gt;=x3) || (i&lt;=y6&amp;&amp;i&gt;=y5&amp;&amp;x1&lt;=x6&amp;&amp;x1&gt;=x5))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt;<span class="string">"YES"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">double</span> i=x2; i&gt;=x1; i-=<span class="number">0.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((i&lt;=x4&amp;&amp;i&gt;=x3&amp;&amp;y2&lt;=y4&amp;&amp;y2&gt;=y3) || (i&lt;=x6&amp;&amp;i&gt;=x5&amp;&amp;y2&lt;=y6&amp;&amp;y2&gt;=y5))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt;<span class="string">"YES"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">double</span> i=y2; i&gt;=y2; i-=<span class="number">0.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((i&lt;=y4&amp;&amp;i&gt;=y3&amp;&amp;x2&lt;=x4&amp;&amp;x2&gt;=x3) || (i&lt;=y6&amp;&amp;i&gt;=y5&amp;&amp;x2&lt;=x6&amp;&amp;x2&gt;=x5))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt;<span class="string">"YES"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">"NO"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1216D-Swords"><a href="#1216D-Swords" class="headerlink" title="1216D. Swords"></a>1216D. Swords</h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>地下室有n种剑，每种剑有x个，有y个人来地下室偷剑，每个人只拿一种剑，每个人拿了z个剑。现在发现地下室的剑被偷了，每种剑剩下ai个，其中x, y, z未知，给出n和ai，让你求出最少y个人来偷剑和每个人偷了多少剑z。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>用最大的数依次减去其他所有ai，求他们所有的最大公因数，然后再用前面算出来的最大数和其他数的差除以最大公因数，则可算出有多少人来偷剑了，最大公因数即为每个人偷了多少剑。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s, ss;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    sort(a, a+n, cmp);</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x = a[<span class="number">0</span>]-a[i];</span><br><span class="line">        <span class="keyword">if</span>(x)</span><br><span class="line">        &#123;</span><br><span class="line">            s.push(x);</span><br><span class="line">            ss.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(s.size()&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">        y = s.top();</span><br><span class="line">        s.pop();</span><br><span class="line"></span><br><span class="line">        s.push(__gcd(x, y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!ss.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        x = ss.top();</span><br><span class="line">        ss.pop();</span><br><span class="line">        ans+=(x/s.top());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %d\n"</span>, ans, s.top());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1216E1-Numerical-Sequence-easy-version"><a href="#1216E1-Numerical-Sequence-easy-version" class="headerlink" title="1216E1. Numerical Sequence (easy version)"></a>1216E1. Numerical Sequence (easy version)</h2><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>11212312341234512345612345671234567812345678912345678910……，给你一个这样的无限循环数列，1、12、123、1234、12345……这样循环，询问q次，每次询问在这个数列中第k位是什么数字。注意：11算两位数字，而不是一个数字。k最大为1e9，q不大于100。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p><img src="http://image.zhangzef.com/20200214182222.png" alt="img" style="zoom: 50%;"></p><p>由程序算出当k为1e9时总共也才21837个数，所以我们只用预处理出前1e5个数的排列，预处理时记录下每个数的最后一位排到哪里了，最后直接查表就行了。</p><p>计算程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ll k=<span class="number">0</span>, i=<span class="number">1</span>, x;</span><br><span class="line">    <span class="keyword">while</span>(k&lt;=<span class="number">1000000000</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(ll j=<span class="number">1</span>; j&lt;=i; j++)&#123;</span><br><span class="line">            x = j;</span><br><span class="line">            <span class="keyword">while</span>(x)&#123;k++;x/=<span class="number">10</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> num[maxn*<span class="number">5</span>], pre[maxn], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    cal(x/<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    num[++n] = x%<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cal(i);</span><br><span class="line">        pre[i] = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    ll k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;k;</span><br><span class="line">        ll sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">100000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(sum+pre[i]&lt;k)</span><br><span class="line">                sum+=pre[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt;num[k-sum] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/last-diary/p/11567813.html" target="_blank" rel="noopener">准点的星辰Codeforces Round #587(Div.3)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;tips：大家评论的时候写一下邮箱和昵称呀，头像是根据昵称和邮箱随机生成的😁&lt;/p&gt;
&lt;p&gt;想开始打一打cf，刷题刷的太少了，太吃亏了。&lt;/p&gt;
&lt;h2 id=&quot;1216A-Prefixes&quot;&gt;&lt;a href=&quot;#1216A-Prefixes&quot; class=&quot;header
      
    
    </summary>
    
      <category term="比赛&amp;补题" scheme="zhangzef.com/categories/%E6%AF%94%E8%B5%9B-%E8%A1%A5%E9%A2%98/"/>
    
    
      <category term="ACM" scheme="zhangzef.com/tags/ACM/"/>
    
      <category term="Codeforces" scheme="zhangzef.com/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>kuangbin专题一简单搜索</title>
    <link href="zhangzef.com/2019/09/19/kuangbin%E4%B8%93%E9%A2%98%E4%B8%80%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2/"/>
    <id>zhangzef.com/2019/09/19/kuangbin专题一简单搜索/</id>
    <published>2019-09-19T14:28:56.000Z</published>
    <updated>2020-02-15T15:09:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>tips：大家评论的时候写一下邮箱和昵称呀，头像是根据昵称和邮箱随机生成的😁</p><p><a href="https://vjudge.net/article/187" target="_blank" rel="noopener">kuangbin专题合集</a></p><p><a href="https://www.zhihu.com/question/51727516/answer/127265733" target="_blank" rel="noopener">ACM正确入门方式——数学lover</a></p><p>——————————分割线——————————</p><p>2020-01-27更新<br>快要考研了，在acm里面也没什么成就，唉<br>下学期还要参加蓝桥杯，就趁寒假在家复（yu）习考研课程的间隙练一练题吧，蓝桥杯报的Java组，水一个国奖算了，大学四年最后两个愿望了，蓝桥杯拿个国奖＋考研顺利，加油！！！</p><p>2020-0202更新</p><p>终于把暑假挖的坑给填上了，接下来要开始专题四，这几天都没有背单词看高数，得多看一看了。</p><p>——————————分割线——————————</p><h2 id="题目列表"><a href="#题目列表" class="headerlink" title="题目列表"></a>题目列表</h2><ol><li><a href="https://vjudge.net/problem/POJ-1321" target="_blank" rel="noopener"><strong>POJ 1321</strong></a> 棋盘问题    <font color="green">AC: 2018-07-17 23:54:31</font></li><li><a href="https://vjudge.net/problem/POJ-2251" target="_blank" rel="noopener"><strong>POJ 2251</strong></a> Dungeon Master    <font color="green">AC: 2019-09-19 18:32:04</font></li><li><a href="https://vjudge.net/problem/POJ-3278" target="_blank" rel="noopener"><strong>POJ 3278</strong></a> Catch That Cow    <font color="green">AC: 2019-09-21 19:37:10</font></li><li><a href="https://vjudge.net/problem/POJ-3279" target="_blank" rel="noopener"><strong>POJ 3279</strong></a> Fliptile    <font color="green">AC: 2019-09-22 16:09:25</font></li><li><a href="https://vjudge.net/problem/POJ-1426" target="_blank" rel="noopener"><strong>POJ 1426</strong></a> Find The Multiple    <font color="green">AC: 2019-09-23 20:09:26</font></li><li><a href="https://vjudge.net/problem/POJ-3126" target="_blank" rel="noopener"><strong>POJ 3126</strong></a> Prime Path    <font color="green">AC: 2019-09-24 22:48:09</font></li><li><a href="https://vjudge.net/problem/POJ-3087" target="_blank" rel="noopener"><strong>POJ 3087</strong></a> Shuffle’m Up    <font color="green">AC: 2020-01-31 18:33:39</font></li><li><a href="https://vjudge.net/problem/POJ-3414" target="_blank" rel="noopener"><strong>POJ 3414</strong></a> Pots    <font color="green">AC: 2020-02-01 18:51:43</font></li><li><a href="https://vjudge.net/problem/FZU-2150" target="_blank" rel="noopener"><strong>FZU 2150</strong></a> Fire Game    <font color="yellow">待定，oj挂了</font></li><li><a href="https://vjudge.net/problem/UVA-11624" target="_blank" rel="noopener"><strong>UVA 11624</strong></a> Fire!    <font color="green">AC: 2020-02-02 16:13:29</font></li><li><a href="https://vjudge.net/problem/POJ-3984" target="_blank" rel="noopener"><strong>POJ 3984</strong></a> 迷宫问题    <font color="green">AC: 2020-01-27 22:42:36</font></li><li><a href="https://vjudge.net/problem/HDU-1241" target="_blank" rel="noopener"><strong>HDU 1241</strong></a> Oil Deposits    <font color="green">AC: 2020-02-02 17:05:05</font></li><li><a href="https://vjudge.net/problem/HDU-1495" target="_blank" rel="noopener"><strong>HDU 1495</strong></a> 非常可乐    <font color="green">AC: 2020-01-31 16:58:53</font></li><li><a href="https://vjudge.net/problem/HDU-2612" target="_blank" rel="noopener"><strong>HDU 2612</strong></a> Find a way    <font color="green">AC: 2020-02-02 17:58:08</font></li></ol><h2 id="POJ1321-棋盘问题"><a href="#POJ1321-棋盘问题" class="headerlink" title="POJ1321    棋盘问题"></a><a href="https://vjudge.net/problem/POJ-1321" target="_blank" rel="noopener">POJ1321    棋盘问题</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>就是在棋盘上放棋子，放的时候不能同行同列，和八皇后问题类似，只不过空白的地方不能放。这是我去年暑假acm训练时写的，现在已经忘了当时咋写的了，看着自己WA了好多发，太菜了。。。dfs时记得复原。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>dfs吧，没什么可说的，八皇后模板题。好烦啊，POJ不能用万能头文件。。。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, ans;</span><br><span class="line"><span class="keyword">char</span> pan[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt == m)</span><br><span class="line">    &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;=n)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">            <span class="keyword">if</span>(pan[l][i]==<span class="string">'#'</span> &amp;&amp; !vis[i])</span><br><span class="line">            &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                vis[i]=<span class="number">1</span>;</span><br><span class="line">                dfs(l+<span class="number">1</span>);</span><br><span class="line">                vis[i]=<span class="number">0</span>;</span><br><span class="line">                cnt--;</span><br><span class="line">            &#125;</span><br><span class="line">            dfs(l+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(0), cin.tie(0);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt;n &gt;&gt;m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">-1</span> &amp;&amp; m==<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt;pan[i][j];</span><br><span class="line"></span><br><span class="line">        ans = cnt = <span class="number">0</span>;</span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;ans &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="POJ2251-Dungeon-Master"><a href="#POJ2251-Dungeon-Master" class="headerlink" title="POJ2251    Dungeon Master"></a><a href="https://vjudge.net/problem/POJ-2251" target="_blank" rel="noopener">POJ2251    Dungeon Master</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>一个3D迷宫，总共六个方向，上下左右前后。有的地方不能走有的能走，给出起点终点，问你能不能走到终点，如果能的话应该是求用时最短的吧（题目中没说，一开始用dfsWA了，后来看别人都用bfs才发现是不是要求最短路）。没移动一次要花费一分钟。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>bfs，一开始用bfs一直内存超限，快给我郁闷死了。。。要把走过的点用#堵上，防止多余的结点入队列。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">31</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, z, step;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">make_node</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">int</span> step)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node a;</span><br><span class="line">    a.x = x, a.y = y, a.z = z, a.step=step;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l, r, c;</span><br><span class="line">    <span class="keyword">char</span> mp[maxn][maxn][maxn];</span><br><span class="line">    <span class="keyword">int</span> dx[<span class="number">6</span>]= &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> dy[<span class="number">6</span>]= &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> dz[<span class="number">6</span>]= &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt;l &gt;&gt;r &gt;&gt;c &amp;&amp; l+r+c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y, z;</span><br><span class="line">        <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;l; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;r; j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;c; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cin</span> &gt;&gt;mp[i][j][k];</span><br><span class="line">                    <span class="keyword">if</span>(mp[i][j][k]==<span class="string">'S'</span>)</span><br><span class="line">                        q.push(make_node(i, j, k, <span class="number">0</span>));</span><br><span class="line">                    <span class="keyword">if</span>(mp[i][j][k]==<span class="string">'E'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        x = i;</span><br><span class="line">                        y = j;</span><br><span class="line">                        z = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            getchar();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            node a = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(a.x==x &amp;&amp; a.y==y &amp;&amp; a.z==z)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt;<span class="string">"Escaped in "</span>&lt;&lt;a.step &lt;&lt;<span class="string">" minute(s)."</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[a.x+dx[i]][a.y+dy[i]][a.z+dz[i]]!=<span class="string">'#'</span>)</span><br><span class="line">                    <span class="keyword">if</span>(a.x+dx[i]&gt;=<span class="number">0</span> &amp;&amp; a.x+dx[i]&lt;l &amp;&amp; a.y+dy[i]&gt;=<span class="number">0</span> &amp;&amp; a.y+dy[i]&lt;r &amp;&amp; a.z+dz[i]&gt;=<span class="number">0</span> &amp;&amp; a.z+dz[i]&lt;c)</span><br><span class="line">                    &#123;</span><br><span class="line">                        q.push(make_node(a.x+dx[i], a.y+dy[i], a.z+dz[i], a.step+<span class="number">1</span>));</span><br><span class="line">                        mp[a.x+dx[i]][a.y+dy[i]][a.z+dz[i]] = <span class="string">'#'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt;<span class="string">"Trapped!"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="POJ3287-Catch-That-Cow"><a href="#POJ3287-Catch-That-Cow" class="headerlink" title="POJ3287    Catch That Cow"></a><a href="https://vjudge.net/problem/POJ-3278" target="_blank" rel="noopener">POJ3287    Catch That Cow</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>你的牛跑了，要把它抓回来。你的位置在n，牛的位置在k，牛不会跑，你要用最少的时间走到牛的位置。你们的位置都在同一个数轴上，只有左右两个方向，你有三种走法，左走一步、右走一步或者传送到你当前坐标的二倍的位置，这三种走法都只花费一分钟。n和k都小于等于100000</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>只有三种操作，求最短时间，可以用bfs。bfs要设置一个vis数组，注意不能数组越界。还要注意当n==k的时候。一开始一直超内存，后来发现要设一个vis数组剪枝。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> p, t;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">make_node</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node a;</span><br><span class="line">    a.p = p;</span><br><span class="line">    a.t = t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt;n &gt;&gt;k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt;<span class="number">0</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">        q.push(make_node(n, <span class="number">0</span>));</span><br><span class="line">        vis[n] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            node a = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(a.p+<span class="number">1</span>==k || a.p<span class="number">-1</span>==k || a.p*<span class="number">2</span>==k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt;a.t+<span class="number">1</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(a.p&lt;k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a.p+<span class="number">1</span>&lt;=<span class="number">100000</span> &amp;&amp; !vis[a.p+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(make_node(a.p+<span class="number">1</span>, a.t+<span class="number">1</span>));</span><br><span class="line">                    vis[a.p+<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(a.p*<span class="number">2</span>-k&lt;k-a.p &amp;&amp; a.p*<span class="number">2</span>&lt;=<span class="number">100000</span> &amp;&amp; !vis[a.p*<span class="number">2</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(make_node(a.p*<span class="number">2</span>, a.t+<span class="number">1</span>));</span><br><span class="line">                    vis[a.p*<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(a.p<span class="number">-1</span>&gt;=<span class="number">0</span> &amp;&amp; !vis[a.p<span class="number">-1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(make_node(a.p<span class="number">-1</span>, a.t+<span class="number">1</span>));</span><br><span class="line">                    vis[a.p<span class="number">-1</span>] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a.p&gt;k &amp;&amp; a.p<span class="number">-1</span>&gt;=<span class="number">0</span> &amp;&amp; !vis[a.p<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                q.push(make_node(a.p<span class="number">-1</span>, a.t+<span class="number">1</span>));</span><br><span class="line">                vis[a.p<span class="number">-1</span>] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="POJ3279-Fliptile"><a href="#POJ3279-Fliptile" class="headerlink" title="POJ3279    Fliptile"></a><a href="https://vjudge.net/problem/POJ-3279" target="_blank" rel="noopener">POJ3279    Fliptile</a></h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>有n*m个方格，每个方格都有一块瓷砖，瓷砖的两面分别是黑色和白色，当你翻转瓷砖时瓷砖会从白色翻转成黑色，或者从黑色翻转成白色。样例输入为每个方格瓷砖的初始颜色，0代表白色，1代表黑色。现在让你的奶牛来将所有格子翻成白色，由于奶牛的蹄子比较大，它每次反转的时会将相邻的瓷砖也翻转过来，即上下左右的瓷砖。最后输出每个瓷砖的翻转次数，要求总的翻转次数最少，如果答案有多种，则输出字典序最小的那个答案。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>这题有个最重要的思想，就是第i层如果有黑色瓷砖，要通过第i+1层的翻转将其翻转成白色。这样只用保证前一层没有黑色即可，不用管当前层翻转成什么样，也不用管下一层。这样的话只要第一层的状态确定，后面所有的状态都确定了。因为第二层需要将第一层的黑瓷砖翻成白色的，这个过程中第二层可能会出现黑瓷砖，再用第三层将第二层翻转成白色的，再用第四层将。。。我们可以枚举第一层所有的状态，即每一块瓷砖翻或不翻，总共有2^m个，然后用第二层将第一层翻成白色。。。用最后一层将倒数第二层翻成白色，因为后面没有瓷砖来翻转最后一层了，所有我们通过判断最后一层有没有黑色瓷砖，就可以判断这个方法是否可行。</p><p>输出次数最少的那一个可以每次翻转记录一下，最后对比所有可能性的翻转次数取最小即可。</p><p>字典序最小，即输出答案时每行的字典序最小，每行的字典序即把所有数字串成一个字符串，让他们字典序最小，即将0 0 0 1 1串成00011，而00011的字典序比10010小。保证字典序最小可以先保证第一行字典序最小，第一行有2^m种可能，我们把没个瓷砖看成二进制的一位数，那第一行的所有操作就是0~(1&lt;&lt;m-1)，我们枚举的时候直接从0开始枚举就行了。</p><p>一开始写的时候怎么想都没思路，最后看了别人的题解才写出来，还是做题太少了，太菜了。。。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, turnnum, turnans;</span><br><span class="line"><span class="keyword">int</span> mp[maxn][maxn], a[maxn][maxn], fn[maxn][maxn], ans[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123; <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">turn</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fn[i][j] = <span class="number">1</span>;</span><br><span class="line">turnnum++;</span><br><span class="line">a[i][j] = !a[i][j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">a[i + dx[k]][j + dy[k]] = !a[i + dx[k]][j + dy[k]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt;n &gt;&gt;m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; mp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lp = <span class="number">1</span> &lt;&lt; m;</span><br><span class="line">turnans = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lp; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(fn, <span class="number">0</span>, <span class="keyword">sizeof</span> fn);</span><br><span class="line"><span class="built_in">memcpy</span>(a, mp, <span class="keyword">sizeof</span> mp);</span><br><span class="line">turnnum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> p = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p &amp; <span class="number">1</span>)</span><br><span class="line">turn(<span class="number">1</span>, j);</span><br><span class="line">p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j - <span class="number">1</span>][k])</span><br><span class="line">turn(j, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[n][j])</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j == m+<span class="number">1</span> &amp;&amp; turnnum &lt; turnans)</span><br><span class="line">&#123;</span><br><span class="line">turnans = turnnum;</span><br><span class="line"><span class="built_in">memcpy</span>(ans, fn, <span class="keyword">sizeof</span> fn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (turnans == INF)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"IMPOSSIBLE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans[i][j] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/c___c18/article/details/82465664" target="_blank" rel="noopener">POJ3279 二进制的搜索</a></p><h2 id="POJ1426-Find-The-Multiple"><a href="#POJ1426-Find-The-Multiple" class="headerlink" title="POJ1426    Find The Multiple"></a><a href="https://vjudge.net/problem/POJ-1426" target="_blank" rel="noopener">POJ1426    Find The Multiple</a></h2><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>给你一个不超过200的数n，让你求一个数m，m不超过100位，m只包含0和1且（m%n）== 0。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>不知道为什么，直接定义longlong + BFS就过了。。。一开始想模拟，还超时了，菜。。。</p><p>在网上看到有个大佬在用这题讲<a href="https://blog.csdn.net/lyy289065406/article/details/6647917" target="_blank" rel="noopener">同余模定理</a>，抽空看一下。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> ll n, m=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt;n &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">        m = <span class="number">1</span>;</span><br><span class="line">        q.push(m);</span><br><span class="line">        <span class="keyword">if</span>(m%n==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt;m &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            m = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            m *= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(m%n==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt;m &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            q.push(m);</span><br><span class="line">            m += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(m%n==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt;m &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            q.push(m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="POJ3126-Prime-Path"><a href="#POJ3126-Prime-Path" class="headerlink" title="POJ3126    Prime Path"></a><a href="https://vjudge.net/problem/POJ-3126" target="_blank" rel="noopener">POJ3126    Prime Path</a></h2><h3 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h3><p>测试数据不超过一百组，每组给出两个四位素数，要求你将第一个数字变换成第二个数字。没回只能变换一位数字，而且首位数字不能变成0，变换过的数字也必须为素数。每次变换需要花1磅，问你从第一个数字变换到第二个数字最小花费是多少。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><p>最少花费，肯定BFS了，先用线性素数筛打个表，每次进队的数据查表时间复杂度为O(1)，然后每一层循环，要把四位数字全换一遍，换一个数字进一次队列，用vis数组剪枝。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> prime[maxn], pNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> p[maxn] = &#123;<span class="literal">false</span>&#125;, vis[maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, <span class="built_in">cos</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">num <span class="title">make_num</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> <span class="built_in">cos</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num x;</span><br><span class="line">    x.a = a;</span><br><span class="line">    x.<span class="built_in">cos</span> = <span class="built_in">cos</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eulerSieve</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i] == <span class="literal">false</span>)</span><br><span class="line">            prime[pNum++] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pNum; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * prime[j] &gt; n)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            p[i * prime[j]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    eulerSieve(<span class="number">100000</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;a &gt;&gt;b;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">queue</span>&lt;num&gt; q;</span><br><span class="line">        q.push(make_num(a, <span class="number">0</span>));</span><br><span class="line">        vis[a] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            num x = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">if</span>(x.a==b)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt;x.<span class="built_in">cos</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> y = x.a;</span><br><span class="line">                <span class="keyword">if</span>(y/<span class="number">1000</span>==i)   <span class="keyword">continue</span>;</span><br><span class="line">                y = i*<span class="number">1000</span>+y%<span class="number">1000</span>;</span><br><span class="line">                <span class="keyword">if</span>(!vis[y] &amp;&amp; !p[y])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(make_num(y, x.<span class="built_in">cos</span>+<span class="number">1</span>));</span><br><span class="line">                    vis[y] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> y = x.a;</span><br><span class="line">                <span class="keyword">if</span>(y/<span class="number">100</span>%<span class="number">10</span>==i) <span class="keyword">continue</span>;</span><br><span class="line">                y = (y/<span class="number">1000</span>*<span class="number">10</span>+i)*<span class="number">100</span>+y%<span class="number">100</span>;</span><br><span class="line">                <span class="keyword">if</span>(!vis[y] &amp;&amp; !p[y])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(make_num(y, x.<span class="built_in">cos</span>+<span class="number">1</span>));</span><br><span class="line">                    vis[y] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> y = x.a;</span><br><span class="line">                <span class="keyword">if</span>(y%<span class="number">100</span>/<span class="number">10</span>==i) <span class="keyword">continue</span>;</span><br><span class="line">                y = (y/<span class="number">100</span>*<span class="number">10</span>+i)*<span class="number">10</span>+y%<span class="number">10</span>;</span><br><span class="line">                <span class="keyword">if</span>(!vis[y] &amp;&amp; !p[y])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(make_num(y, x.<span class="built_in">cos</span>+<span class="number">1</span>));</span><br><span class="line">                    vis[y] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> y = x.a;</span><br><span class="line">                <span class="keyword">if</span>(y%<span class="number">10</span>==i) <span class="keyword">continue</span>;</span><br><span class="line">                y = y/<span class="number">10</span>*<span class="number">10</span>+i;</span><br><span class="line">                <span class="keyword">if</span>(!vis[y] &amp;&amp; !p[y])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(make_num(y, x.<span class="built_in">cos</span>+<span class="number">1</span>));</span><br><span class="line">                    vis[y] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="POJ3087-Shuffle’m-Up"><a href="#POJ3087-Shuffle’m-Up" class="headerlink" title="POJ3087    Shuffle’m Up"></a><a href="https://vjudge.net/problem/POJ-3087" target="_blank" rel="noopener">POJ3087    Shuffle’m Up</a></h2><h3 id="题意-6"><a href="#题意-6" class="headerlink" title="题意"></a>题意</h3><p>根本不是搜索题，就是简单的模拟题。。。<br>给你两组牌s1,s2，每组牌的数量相同，分为两个步骤洗牌和分牌。<br><strong>洗牌</strong>：分别从s1和s2底部每次抽一张牌放到桌上，先从s2的底部开始抽，组成一组牌s12（类似于入栈操作）。<br><strong>分牌</strong>：将组成的s12再分成s1和s2，将s12下半部分组成s1，将s12的上半部分组成s2。<br>牌的颜色总共有A~H种，现在又给一组牌s3，问经过几次洗牌能将牌洗成s3的样子，如果可以则输出数据组序号和洗牌次数，不能则输出数据组序号和-1 。（序号从1开始）</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><p>一开始看到题要求最少的洗牌次数，以为要用bfs，然后在想怎么用bfs的时候发现他每一步的操作都只有固定的一种，没什么可搜索的啊，才发现就是个暴力模拟题。<br>就是用队列模拟洗牌和发牌的过程，如果不能洗成目标牌组的话会发现洗着洗着s1和s2又回到原来的样子了，这个手算一下样例的第二组数据就知道了。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = cin.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = cin.nextInt();</span><br><span class="line">            String s1 = cin.nextLine();</span><br><span class="line">            s1 = cin.nextLine();</span><br><span class="line">            String s2 = cin.nextLine();</span><br><span class="line">            String s3 = cin.nextLine();</span><br><span class="line">            Queue&lt;Character&gt; queue = <span class="keyword">new</span> LinkedList&lt;Character&gt;();</span><br><span class="line">            String s4 = s1, s5 = s2;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                step++;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s1.length(); j++) &#123;</span><br><span class="line">                    queue.offer(s5.charAt(j));</span><br><span class="line">                    queue.offer(s4.charAt(j));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String ss = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * x; j++) &#123;</span><br><span class="line">                    ss += queue.peek();</span><br><span class="line">                    queue.offer(queue.peek());</span><br><span class="line">                    queue.poll();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ss.equals(s3)) &#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                s4 = <span class="string">""</span>;</span><br><span class="line">                s5 = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x; j++) &#123;</span><br><span class="line">                    s4+=queue.peek();</span><br><span class="line">                    queue.poll();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x; j++) &#123;</span><br><span class="line">                    s5+=queue.peek();</span><br><span class="line">                    queue.poll();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (s4.equals(s1) &amp;&amp; s5.equals(s2))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                System.out.println(i+<span class="number">1</span> + <span class="string">" "</span> + step);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(i+<span class="number">1</span> + <span class="string">" "</span> + -<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="POJ3414-Pots"><a href="#POJ3414-Pots" class="headerlink" title="POJ3414    Pots"></a><a href="https://vjudge.net/problem/POJ-3414" target="_blank" rel="noopener">POJ3414    Pots</a></h2><h3 id="题意-7"><a href="#题意-7" class="headerlink" title="题意"></a>题意</h3><p>这题和HDU1495非常可乐太像了，不过比那个复杂一些，操作方法变了一下，而且需要回溯记录路径。感觉是可乐问题+迷宫问题。。。<br>一开始有两个空罐子A和B，每个罐子都有固定容量（倒水题惯例），问你经过一系列操作是否可以使得任意一个罐子中的水有C升，如果可以则求最少操作次数和所有操作步骤，如果不可以则输出”impossible”。操作有如下几种：</p><ol><li>将A或B灌满水</li><li>将A或B的水全部倒掉</li><li>将A的水倒给B，或将B的水倒给A</li></ol><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h3><p>求最少操作次数和操作步骤，用bfs+回溯，vis去重。（用java写这种题代码好长啊，而且感觉我写的代码好笨重）</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pot</span> </span>&#123;<span class="comment">//用于记录每个状态</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">int</span> step;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pot</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">        <span class="keyword">this</span>.step = step;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pot</span><span class="params">(Pot x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = x.a;</span><br><span class="line">        <span class="keyword">this</span>.b = x.b;</span><br><span class="line">        <span class="keyword">this</span>.step = x.step;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span> </span>&#123;<span class="comment">//vis数组</span></span><br><span class="line">    <span class="keyword">boolean</span> v;</span><br><span class="line">    <span class="keyword">int</span> op;<span class="comment">//操作种类</span></span><br><span class="line">    <span class="keyword">int</span> prex, prey;<span class="comment">//前驱结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String[] opt = <span class="keyword">new</span> String[]&#123;<span class="comment">//所有操作种类，方便输出</span></span><br><span class="line">            <span class="string">"FILL(1)"</span>, <span class="string">"FILL(2)"</span>, <span class="string">"DROP(1)"</span>, <span class="string">"DROP(2)"</span>, <span class="string">"POUR(1,2)"</span>, <span class="string">"POUR(2,1)"</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">static</span> View[][] vis = <span class="keyword">new</span> View[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[x][y].prex != -<span class="number">1</span> &amp;&amp; vis[x][y].prey != -<span class="number">1</span>)</span><br><span class="line">            print(vis[x][y].prex, vis[x][y].prey);</span><br><span class="line">        <span class="keyword">if</span> (vis[x][y].op != -<span class="number">1</span>)</span><br><span class="line">            System.out.println(opt[vis[x][y].op]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> A = cin.nextInt();</span><br><span class="line">        <span class="keyword">int</span> B = cin.nextInt();</span><br><span class="line">        <span class="keyword">int</span> C = cin.nextInt();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">105</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">105</span>; j++) &#123;</span><br><span class="line">                vis [i][j] = <span class="keyword">new</span> View();</span><br><span class="line">                vis[i][j].v = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[<span class="number">0</span>][<span class="number">0</span>].v = <span class="keyword">true</span>;</span><br><span class="line">        vis[<span class="number">0</span>][<span class="number">0</span>].op = -<span class="number">1</span>;</span><br><span class="line">        vis[<span class="number">0</span>][<span class="number">0</span>].prex = -<span class="number">1</span>;</span><br><span class="line">        vis[<span class="number">0</span>][<span class="number">0</span>].prey = -<span class="number">1</span>;</span><br><span class="line">        Queue&lt;Pot&gt; queue = <span class="keyword">new</span> LinkedList&lt;Pot&gt;();</span><br><span class="line">        Pot now = <span class="keyword">new</span> Pot(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        queue.offer(now);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            now = queue.peek();</span><br><span class="line">            queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (now.a == C || now.b == C) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">                Pot next = <span class="keyword">new</span> Pot(now);</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; next.a != A &amp;&amp; !vis[A][next.b].v) &#123;</span><br><span class="line">                    vis[A][next.b].v = <span class="keyword">true</span>;</span><br><span class="line">                    vis[A][next.b].op = <span class="number">0</span>;</span><br><span class="line">                    vis[A][next.b].prex = now.a;</span><br><span class="line">                    vis[A][next.b].prey = now.b;</span><br><span class="line">                    next.a = A;</span><br><span class="line">                    next.step++;</span><br><span class="line">                    queue.offer(next);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; next.b != B &amp;&amp; !vis[next.a][B].v) &#123;</span><br><span class="line">                    vis[next.a][B].v = <span class="keyword">true</span>;</span><br><span class="line">                    vis[next.a][B].op = <span class="number">1</span>;</span><br><span class="line">                    vis[next.a][B].prex = now.a;</span><br><span class="line">                    vis[next.a][B].prey = now.b;</span><br><span class="line">                    next.b = B;</span><br><span class="line">                    next.step++;</span><br><span class="line">                    queue.offer(next);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">2</span> &amp;&amp; next.a != <span class="number">0</span> &amp;&amp; !vis[<span class="number">0</span>][next.b].v) &#123;</span><br><span class="line">                    vis[<span class="number">0</span>][next.b].v = <span class="keyword">true</span>;</span><br><span class="line">                    vis[<span class="number">0</span>][next.b].op = <span class="number">2</span>;</span><br><span class="line">                    vis[<span class="number">0</span>][next.b].prex = now.a;</span><br><span class="line">                    vis[<span class="number">0</span>][next.b].prey = now.b;</span><br><span class="line">                    next.a = <span class="number">0</span>;</span><br><span class="line">                    next.step++;</span><br><span class="line">                    queue.offer(next);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">3</span> &amp;&amp; next.b != <span class="number">0</span> &amp;&amp; !vis[next.a][<span class="number">0</span>].v) &#123;</span><br><span class="line">                    vis[next.a][<span class="number">0</span>].v = <span class="keyword">true</span>;</span><br><span class="line">                    vis[next.a][<span class="number">0</span>].op = <span class="number">3</span>;</span><br><span class="line">                    vis[next.a][<span class="number">0</span>].prex = now.a;</span><br><span class="line">                    vis[next.a][<span class="number">0</span>].prey = now.b;</span><br><span class="line">                    next.b = <span class="number">0</span>;</span><br><span class="line">                    next.step++;</span><br><span class="line">                    queue.offer(next);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">4</span> &amp;&amp; next.a != <span class="number">0</span> &amp;&amp; next.b != B) &#123;</span><br><span class="line">                    <span class="keyword">int</span> vo = B - next.b;</span><br><span class="line">                    <span class="keyword">if</span> (next.a &gt; vo) &#123;</span><br><span class="line">                        next.a -= vo;</span><br><span class="line">                        next.b = B;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        next.b += next.a;</span><br><span class="line">                        next.a = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[next.a][next.b].v) &#123;</span><br><span class="line">                        vis[next.a][next.b].v = <span class="keyword">true</span>;</span><br><span class="line">                        vis[next.a][next.b].op = <span class="number">4</span>;</span><br><span class="line">                        vis[next.a][next.b].prex = now.a;</span><br><span class="line">                        vis[next.a][next.b].prey = now.b;</span><br><span class="line">                        next.step++;</span><br><span class="line">                        queue.offer(next);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">5</span> &amp;&amp; next.a != A &amp;&amp; next.b != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> vo = A - next.a;</span><br><span class="line">                    <span class="keyword">if</span> (next.b &gt; vo) &#123;</span><br><span class="line">                        next.b -= vo;</span><br><span class="line">                        next.a = A;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        next.a += next.b;</span><br><span class="line">                        next.b = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[next.a][next.b].v) &#123;</span><br><span class="line">                        vis[next.a][next.b].v = <span class="keyword">true</span>;</span><br><span class="line">                        vis[next.a][next.b].op = <span class="number">5</span>;</span><br><span class="line">                        vis[next.a][next.b].prex = now.a;</span><br><span class="line">                        vis[next.a][next.b].prey = now.b;</span><br><span class="line">                        next.step++;</span><br><span class="line">                        queue.offer(next);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            System.out.println(now.step);</span><br><span class="line">            print(now.a, now.b);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"impossible"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FZU2150-Fire-Game"><a href="#FZU2150-Fire-Game" class="headerlink" title="FZU2150    Fire Game"></a><a href="https://vjudge.net/problem/FZU-2150" target="_blank" rel="noopener">FZU2150    Fire Game</a></h2><h3 id="题意-8"><a href="#题意-8" class="headerlink" title="题意"></a>题意</h3><p>一个n×m的地图，有的地方是草，有的地方是空的，选两个点同时点火，问是否能将地图上的草烧完，如果是则求出最短燃烧时间。火烧到相邻带有草的格子所需要的时间为1，相邻表示上下左右的格子（即过一个时间，其上有左右有草的格子同时着火），选择的两个点可以相同</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h3><p>双起点bfs，我的方法比较笨，先用bfs求出图中草有几个不相邻的分区，如果分区数大于2肯定不能完成，因为最多只能选择两个起点烧，如果两个一下，则将每个分区中的所有点分别加入一个队列，依次从该分区的每个点进行一次bfs遍历该分区，求出其中用时最短的。（由于oj挂了，我也没有测试，只过了样例，但是觉得这题应该没什么坑，而且数据也挺小的，总共才1e6，所以先写着，以后等可以交了我再改一下）</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> index, x, y, step;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dx = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">(Point[][] mp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">15</span>; j++) &#123;</span><br><span class="line">                mp[i][j].step = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> t = cin.nextInt();</span><br><span class="line">        Point[][] mp = <span class="keyword">new</span> Point[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">15</span>; j++) &#123;</span><br><span class="line">                mp[i][j] = <span class="keyword">new</span> Point();</span><br><span class="line">                mp[i][j].x = i;</span><br><span class="line">                mp[i][j].y = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = cin.nextInt(), m = cin.nextInt();</span><br><span class="line">            String s = cin.nextLine();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                s = cin.nextLine();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; s.length(); k++) &#123;</span><br><span class="line">                    mp[j][k].ch = s.charAt(k);</span><br><span class="line">                    mp[j][k].index = -<span class="number">1</span>;</span><br><span class="line">                    mp[j][k].step = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Queue&lt;Point&gt; queue = <span class="keyword">new</span> LinkedList&lt;Point&gt;();</span><br><span class="line">            Queue&lt;Point&gt; q1 = <span class="keyword">new</span> LinkedList&lt;Point&gt;();</span><br><span class="line">            Queue&lt;Point&gt; q2 = <span class="keyword">new</span> LinkedList&lt;Point&gt;();</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mp[j][k].ch == <span class="string">'#'</span> &amp;&amp; mp[j][k].index == -<span class="number">1</span>) &#123;</span><br><span class="line">                        Point now = mp[j][k];</span><br><span class="line">                        now.index = num;</span><br><span class="line">                        <span class="keyword">if</span> (num==<span class="number">0</span>)q1.offer(now);</span><br><span class="line">                        <span class="keyword">else</span> q2.offer(now);</span><br><span class="line">                        queue.offer(now);</span><br><span class="line">                        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                            now = queue.peek();</span><br><span class="line">                            queue.poll();</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">4</span>; l++) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (now.x + dx[l] &gt;= <span class="number">0</span> &amp;&amp; now.x + dx[l] &lt; n &amp;&amp; now.y + dy[l] &gt;= <span class="number">0</span> &amp;&amp; now.y + dy[l] &lt; m &amp;&amp; mp[now.x + dx[l]][now.y + dy[l]].ch == <span class="string">'#'</span> &amp;&amp; mp[now.x + dx[l]][now.y + dy[l]].index==-<span class="number">1</span>) &#123;</span><br><span class="line">                                    mp[now.x + dx[l]][now.y + dy[l]].index = num;</span><br><span class="line">                                    queue.offer(mp[now.x + dx[l]][now.y + dy[l]]);</span><br><span class="line">                                    <span class="keyword">if</span> (num==<span class="number">0</span>)q1.offer(mp[now.x + dx[l]][now.y + dy[l]]);</span><br><span class="line">                                    <span class="keyword">else</span> q2.offer(mp[now.x + dx[l]][now.y + dy[l]]);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        num++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num&gt;<span class="number">2</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"Case "</span> + (i+<span class="number">1</span>) + <span class="string">": "</span> + -<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> t1=<span class="number">10000</span>, t2=<span class="number">10000</span>;</span><br><span class="line">            <span class="keyword">while</span> (!q1.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">char</span>[][] mmp = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">15</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">15</span>; k++) &#123;</span><br><span class="line">                        mmp[j][k] = mp[j][k].ch;</span><br><span class="line">                        mp[j][k].step = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (!queue.isEmpty())    queue.poll();</span><br><span class="line">                Point now = q1.peek();</span><br><span class="line">                q1.poll();</span><br><span class="line">                queue.offer(now);</span><br><span class="line">                mmp[now.x][now.y] = <span class="string">'.'</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">                    now = queue.peek();</span><br><span class="line">                    queue.poll();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (now.x + dx[j] &gt;= <span class="number">0</span> &amp;&amp; now.x + dx[j] &lt; n &amp;&amp; now.y + dy[j] &gt;= <span class="number">0</span> &amp;&amp; now.y + dy[j] &lt; m &amp;&amp; mmp[now.x + dx[j]][now.y + dy[j]] == <span class="string">'#'</span>)&#123;</span><br><span class="line">                            mmp[now.x + dx[j]][now.y + dy[j]] = <span class="string">'.'</span>;</span><br><span class="line">                            mp[now.x + dx[j]][now.y + dy[j]].step = now.step+<span class="number">1</span>;</span><br><span class="line">                            queue.offer(mp[now.x + dx[j]][now.y + dy[j]]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                t1 = Math.min(t1, now.step);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num==<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span> (!q2.isEmpty())&#123;</span><br><span class="line">                    <span class="keyword">char</span>[][] mmp = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">15</span>; j++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">15</span>; k++) &#123;</span><br><span class="line">                            mmp[j][k] = mp[j][k].ch;</span><br><span class="line">                            mp[j][k].step = <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> (!queue.isEmpty())    queue.poll();</span><br><span class="line">                    Point now = q2.peek();</span><br><span class="line">                    q2.poll();</span><br><span class="line">                    queue.offer(now);</span><br><span class="line">                    mmp[now.x][now.y] = <span class="string">'.'</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">                        now = queue.peek();</span><br><span class="line">                        queue.poll();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (now.x + dx[j] &gt;= <span class="number">0</span> &amp;&amp; now.x + dx[j] &lt; n &amp;&amp; now.y + dy[j] &gt;= <span class="number">0</span> &amp;&amp; now.y + dy[j] &lt; m &amp;&amp; mmp[now.x + dx[j]][now.y + dy[j]] == <span class="string">'#'</span>)&#123;</span><br><span class="line">                                mmp[now.x + dx[j]][now.y + dy[j]] = <span class="string">'.'</span>;</span><br><span class="line">                                mp[now.x + dx[j]][now.y + dy[j]].step = now.step+<span class="number">1</span>;</span><br><span class="line">                                queue.offer(mp[now.x + dx[j]][now.y + dy[j]]);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    t2 = Math.min(t2, now.step);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (t1==<span class="number">10000</span> || t2==<span class="number">10000</span>)</span><br><span class="line">                System.out.println(<span class="string">"Case "</span> + (i+<span class="number">1</span>) + <span class="string">": "</span> + Math.min(t1, t2));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.println(<span class="string">"Case "</span> + (i+<span class="number">1</span>) + <span class="string">": "</span> + Math.max(t1, t2));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UVA11624-Fire"><a href="#UVA11624-Fire" class="headerlink" title="UVA11624    Fire!"></a><a href="https://vjudge.net/problem/UVA-11624" target="_blank" rel="noopener">UVA11624    Fire!</a></h2><h3 id="题意-9"><a href="#题意-9" class="headerlink" title="题意"></a>题意</h3><p>火烧屁股，赶紧窜。。。<br>逃出迷宫，只要是挨着迷宫边缘的点都可以逃出迷宫。</p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h3><p>注意，本题起始时间<strong>可能有多个起始火苗</strong>！！！（一开始我也没注意到，偶然间在vj的评论里看到的不然我可能也被坑死了）其实就是个bfs的题，数据量比较大，容易超时，要注意一点。应该让<strong>火苗先走</strong>人再走，我是让每个人走过的点和被火苗烧过的点都变成墙，这样后来走的时候就不会再走了。<br>我把火苗和人放在了两个队列里面了，一开始想复杂了，每个点都有一个属性step，用来记录当前时间，如果进入下一个时间点就让该时间点的火苗全部走一遍，然后再让人走。<br>后来看到别人让火苗和人放在一个队列里面了，只有一开始处理一下，先让所有起始的火苗先进队列，再让人的起始点进入队列就可以了。（不过我后来把我的代码改成这样超时了，就懒得再改了，一开始调试时用的输出代码忘记删了，他还给我判超时，我懵逼了好一会儿。。。）</p><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y, step;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPoint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.step = step;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.step = step;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(Point point)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = point.x;</span><br><span class="line">        <span class="keyword">this</span>.y = point.y;</span><br><span class="line">        <span class="keyword">this</span>.step = point.step;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dx = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span>[][] mp = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> t = cin.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = cin.nextInt(), c = cin.nextInt();</span><br><span class="line">            String s = cin.nextLine();</span><br><span class="line">            Queue&lt;Point&gt; Fire = <span class="keyword">new</span> LinkedList&lt;Point&gt;();</span><br><span class="line">            Queue&lt;Point&gt; queue = <span class="keyword">new</span> LinkedList&lt;Point&gt;();</span><br><span class="line">            Point now = <span class="keyword">new</span> Point();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++) &#123;</span><br><span class="line">                s = cin.nextLine();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">                    mp[i][j] = s.charAt(j);</span><br><span class="line">                    <span class="keyword">if</span> (mp[i][j] == <span class="string">'F'</span>) &#123;</span><br><span class="line">                        mp[i][j] = <span class="string">'#'</span>;</span><br><span class="line">                        Fire.offer(<span class="keyword">new</span> Point(i, j, <span class="number">0</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (mp[i][j] == <span class="string">'J'</span>) &#123;</span><br><span class="line">                        mp[i][j] = <span class="string">'#'</span>;</span><br><span class="line">                        now.setPoint(i, j, <span class="number">0</span>);</span><br><span class="line">                        queue.offer(now);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> CurStep = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                now = queue.peek();</span><br><span class="line">                queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (now.y == <span class="number">0</span> || now.y == c - <span class="number">1</span> || now.x == <span class="number">0</span> || now.x == r - <span class="number">1</span>) &#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (now.step &gt; CurStep) &#123;<span class="comment">//先烧火</span></span><br><span class="line">                    CurStep++;</span><br><span class="line"></span><br><span class="line">                    Point CurFire;</span><br><span class="line">                    <span class="keyword">while</span> (!Fire.isEmpty()) &#123;</span><br><span class="line">                        CurFire = Fire.peek();</span><br><span class="line">                        <span class="keyword">if</span> (CurFire.step != CurStep)</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        Fire.poll();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                            Point next = <span class="keyword">new</span> Point(CurFire);</span><br><span class="line">                            next.step++;</span><br><span class="line">                            next.x += dx[i];</span><br><span class="line">                            next.y += dy[i];</span><br><span class="line">                            <span class="keyword">if</span> (next.x &gt;= <span class="number">0</span> &amp;&amp; next.x &lt; r &amp;&amp; next.y &gt;= <span class="number">0</span> &amp;&amp; next.y &lt; c &amp;&amp; mp[next.x][next.y] != <span class="string">'#'</span>) &#123;</span><br><span class="line">                                mp[next.x][next.y] = <span class="string">'#'</span>;</span><br><span class="line">                                Fire.offer(next);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                    Point next = <span class="keyword">new</span> Point(now);</span><br><span class="line">                    next.step++;</span><br><span class="line">                    next.x += dx[i];</span><br><span class="line">                    next.y += dy[i];</span><br><span class="line">                    <span class="keyword">if</span> (next.x &gt;= <span class="number">0</span> &amp;&amp; next.x &lt; r &amp;&amp; next.y &gt;= <span class="number">0</span> &amp;&amp; next.y &lt; c &amp;&amp; mp[next.x][next.y] != <span class="string">'#'</span>) &#123;</span><br><span class="line">                        mp[next.x][next.y] = <span class="string">'#'</span>;</span><br><span class="line">                        queue.offer(next);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (flag)   System.out.println(now.step+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> System.out.println(<span class="string">"IMPOSSIBLE"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="POJ3984-迷宫问题"><a href="#POJ3984-迷宫问题" class="headerlink" title="POJ3984    迷宫问题"></a><a href="https://vjudge.net/problem/POJ-3984" target="_blank" rel="noopener">POJ3984    迷宫问题</a></h2><p>太久没写题了，先拿个简单的练练手吧</p><p>Java在OJ交题有好多坑啊，这有一篇比较不错的博客讲的挺全的：<a href="https://www.cnblogs.com/HardBass/p/11702918.html" target="_blank" rel="noopener">JAVA在OJ上提交程序的注意事项</a><br>（一定要带上包名，别问我为什么知道的（手动狗头）。用Java写题总感觉怪怪的）</p><h3 id="题意-10"><a href="#题意-10" class="headerlink" title="题意"></a>题意</h3><p>给一个5×5的迷宫，1是墙，0是路，求出从左上角到右下角的最短路径并输出路径上每个结点的坐标，只能横着走或竖着走，不能斜着走。</p><h3 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a>题解</h3><p>用bfs求最短路嘛，再定义一个Point结构体，记录前驱结点，最后用递归输出路径。注意逗号后面有一个空格。</p><p>其实他这个题的测试数据只有一个，就是样例。。。我看vj上面有人说直接把样例输出就过了。。。</p><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">int</span> prex, prey;</span><br><span class="line">    <span class="keyword">int</span> dis;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] dx = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Point[][] p = <span class="keyword">new</span> Point[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print_point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span> &amp;&amp; y==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"("</span> + x + <span class="string">", "</span> + y + <span class="string">")"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        print_point(p[x][y].prex, p[x][y].prey);</span><br><span class="line">        System.out.println(<span class="string">"("</span> + x + <span class="string">", "</span> + y + <span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] mp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Queue&lt;Point&gt; q = <span class="keyword">new</span> LinkedList&lt;Point&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">                p[i][j] = <span class="keyword">new</span> Point();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">                mp[i][j] = cin.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Point point = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        point.dis = <span class="number">0</span>;</span><br><span class="line">        point.prex = <span class="number">0</span>;</span><br><span class="line">        point.prey = <span class="number">0</span>;</span><br><span class="line">        q.offer(point);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty())&#123;</span><br><span class="line">            Point pp = q.peek();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pp.x==<span class="number">4</span> &amp;&amp; pp.y==<span class="number">4</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> xx = pp.x + dx[i];</span><br><span class="line">                <span class="keyword">int</span> yy = pp.y + dy[i];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(xx&gt;=<span class="number">0</span> &amp;&amp; xx&lt;<span class="number">5</span> &amp;&amp; yy&gt;=<span class="number">0</span> &amp;&amp; yy&lt;<span class="number">5</span> &amp;&amp; mp[xx][yy]!=<span class="number">1</span>)&#123;</span><br><span class="line">                    mp[xx][yy] = <span class="number">1</span>;</span><br><span class="line">                    p[xx][yy].x = xx;</span><br><span class="line">                    p[xx][yy].y = yy;</span><br><span class="line">                    p[xx][yy].prex = pp.x;</span><br><span class="line">                    p[xx][yy].prey = pp.y;</span><br><span class="line">                    p[xx][yy].dis = pp.dis+<span class="number">1</span>;</span><br><span class="line">                    q.offer(p[xx][yy]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            q.poll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        print_point(<span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HDU1241-Oil-Deposits"><a href="#HDU1241-Oil-Deposits" class="headerlink" title="HDU1241    Oil Deposits"></a><a href="https://vjudge.net/problem/HDU-1241" target="_blank" rel="noopener">HDU1241    Oil Deposits</a></h2><h3 id="题意-11"><a href="#题意-11" class="headerlink" title="题意"></a>题意</h3><p>求分块儿数目</p><h3 id="题解-11"><a href="#题解-11" class="headerlink" title="题解"></a>题解</h3><p>注意第二个样例，相邻的意思是相邻的八个格不是四个格<br>好像用dfs和bfs都可以，习惯了用bfs我就写了bfs。<br>每找到一个油田，就用bfs遍历这个油田，将油田的所有‘@’变为‘*’就可以了。</p><h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(Point point)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = point.x;</span><br><span class="line">        <span class="keyword">this</span>.y = point.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dx = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span>[][] mp = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = cin.nextInt(), m = cin.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (n==<span class="number">0</span> || m==<span class="number">0</span>)   <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">            String s = cin.nextLine();</span><br><span class="line">            Queue&lt;Point&gt; queue = <span class="keyword">new</span> LinkedList&lt;Point&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                s = cin.nextLine();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">                    mp[i][j] = s.charAt(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mp[i][j] == <span class="string">'@'</span>)&#123;</span><br><span class="line">                        ans++;</span><br><span class="line">                        Point now = <span class="keyword">new</span> Point(i, j);</span><br><span class="line">                        queue.offer(now);</span><br><span class="line">                        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                            now = queue.peek();</span><br><span class="line">                            queue.poll();</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; k++) &#123;</span><br><span class="line">                                Point next = <span class="keyword">new</span> Point(now);</span><br><span class="line">                                next.x += dx[k];</span><br><span class="line">                                next.y += dy[k];</span><br><span class="line">                                <span class="keyword">if</span> (next.x &gt;= <span class="number">0</span> &amp;&amp; next.x &lt; n &amp;&amp; next.y &gt;= <span class="number">0</span> &amp;&amp; next.y &lt; m &amp;&amp; mp[next.x][next.y] == <span class="string">'@'</span>) &#123;</span><br><span class="line">                                    mp[next.x][next.y] = <span class="string">'*'</span>;</span><br><span class="line">                                    queue.offer(next);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HDU1495-非常可乐"><a href="#HDU1495-非常可乐" class="headerlink" title="HDU1495    非常可乐"></a><a href="https://vjudge.net/problem/HDU-1495" target="_blank" rel="noopener">HDU1495    非常可乐</a></h2><h3 id="题意-12"><a href="#题意-12" class="headerlink" title="题意"></a>题意</h3><p>有三个杯子，s,n,m，每个被子都有自己的最大容量，初始时s装着满杯可乐。问最少经过几次倒水的步骤，能让其中两个杯子的可乐相等。由于每个杯子都没有刻度，所以每次倒水只能将一个杯子的可乐全部倒进另一个杯子，或者将另一个杯子倒满。（我一开始没理解这个，连样例都没看懂，一直在想他到底怎么倒水的）</p><h3 id="题解-12"><a href="#题解-12" class="headerlink" title="题解"></a>题解</h3><p>这题有两种解法，一种比较好想的bfs，另一种是数论（我不会。。。）给出网上dalao链接：<a href="https://blog.csdn.net/V5ZSQ/article/details/52097459" target="_blank" rel="noopener">HDU 1495 非常可乐（数论）</a></p><p>bfs解法：<br>当s中的初始为奇数时肯定不可平分。用一个类记录每个倒水的状态，包括当前每个杯子多少水和经过了多少步骤，每次倒水只有六种倒法：s-&gt;n，s-&gt;m，n-&gt;s，m-&gt;s，n-&gt;m，m-&gt;n，每次遍历这六种方法就行了。然后判断倒水的终止状态：任意两个杯子量相等且另一个杯子为空时才满足条件。</p><h3 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cola</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] cup = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> step;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span>[][][] vis = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">105</span>][<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s, n, m;</span><br><span class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            s = cin.nextInt();</span><br><span class="line">            n = cin.nextInt();</span><br><span class="line">            m = cin.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="number">0</span> &amp;&amp; n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"NO"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">105</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">105</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">105</span>; k++) &#123;</span><br><span class="line">                        vis[i][j][k] = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            vis[s][<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">            cola now = <span class="keyword">new</span> cola();</span><br><span class="line">            now.cup[<span class="number">0</span>] = s;</span><br><span class="line">            now.cup[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            now.cup[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">            now.step = <span class="number">0</span>;</span><br><span class="line">            Queue&lt;cola&gt; queue = <span class="keyword">new</span> LinkedList&lt;cola&gt;();</span><br><span class="line">            queue.offer(now);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                now = queue.peek();</span><br><span class="line">                queue.poll();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((now.cup[<span class="number">0</span>]==now.cup[<span class="number">1</span>] &amp;&amp; now.cup[<span class="number">2</span>]==<span class="number">0</span>) || (now.cup[<span class="number">0</span>]==now.cup[<span class="number">2</span>] &amp;&amp; now.cup[<span class="number">1</span>]==<span class="number">0</span>) || (now.cup[<span class="number">1</span>]==now.cup[<span class="number">2</span>] &amp;&amp; now.cup[<span class="number">0</span>]==<span class="number">0</span>))&#123;</span><br><span class="line">                    System.out.println(now.step);</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">                            cola next = <span class="keyword">new</span> cola();</span><br><span class="line">                            next.step = now.step;</span><br><span class="line">                            System.arraycopy(now.cup, <span class="number">0</span>, next.cup, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">int</span> co = <span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">if</span> (j == <span class="number">0</span>) co = s - next.cup[j];</span><br><span class="line">                            <span class="keyword">if</span> (j == <span class="number">1</span>) co = n - next.cup[j];</span><br><span class="line">                            <span class="keyword">if</span> (j == <span class="number">2</span>) co = m - next.cup[j];</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (next.cup[i] &gt; co) &#123;</span><br><span class="line">                                next.cup[i] -= co;</span><br><span class="line">                                next.cup[j] += co;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                next.cup[j] += next.cup[i];</span><br><span class="line">                                next.cup[i] = <span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            next.step += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (!vis[next.cup[<span class="number">0</span>]][next.cup[<span class="number">1</span>]][next.cup[<span class="number">2</span>]]) &#123;</span><br><span class="line">                                vis[next.cup[<span class="number">0</span>]][next.cup[<span class="number">1</span>]][next.cup[<span class="number">2</span>]] = <span class="keyword">true</span>;</span><br><span class="line">                                queue.offer(next);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">                System.out.println(<span class="string">"NO"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HDU2612-Find-a-way"><a href="#HDU2612-Find-a-way" class="headerlink" title="HDU2612    Find a way"></a><a href="https://vjudge.net/problem/HDU-2612" target="_blank" rel="noopener">HDU2612    Find a way</a></h2><h3 id="题意-13"><a href="#题意-13" class="headerlink" title="题意"></a>题意</h3><p>地图上有好几个kfc（话说我也好久没吃kfc，好想吃kfc的薯条啊，不蘸番茄酱的。疫情太严重了，还是在家敲代码复习考研课吧。。。没事还能打一打无限火力，太快乐了），要求出两个起点到kfc最短的时间，移动到上下左右相邻结点要花的时间是11（为啥是11，是不是出题人单身太久了）。题目保证一定有解</p><h3 id="题解-13"><a href="#题解-13" class="headerlink" title="题解"></a>题解</h3><p>又是bfs，bfs，bfs。。。从两个点分别做一次bfs，要注意两个人不是同时出发的，到达时间是两个人所花时间之和。</p><h3 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y, step;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.step = step;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(Point point)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = point.x;</span><br><span class="line">        <span class="keyword">this</span>.y = point.y;</span><br><span class="line">        <span class="keyword">this</span>.step = point.step;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dx = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span>[][] mp = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[][] vis = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] KFC = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">205</span>][<span class="number">205</span>];<span class="comment">//记录每个kfc的时间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cin.hasNextInt()) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = cin.nextInt(), m = cin.nextInt();</span><br><span class="line">            <span class="keyword">int</span> ans = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">int</span> yx = <span class="number">0</span>, yy = <span class="number">0</span>, mx = <span class="number">0</span>, my = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            String s = cin.nextLine();</span><br><span class="line">            Queue&lt;Point&gt; queue = <span class="keyword">new</span> LinkedList&lt;Point&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                s = cin.nextLine();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">                    mp[i][j] = s.charAt(j);</span><br><span class="line">                    vis[i][j] = <span class="keyword">false</span>;</span><br><span class="line">                    KFC[i][j] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (mp[i][j] == <span class="string">'Y'</span>) &#123;</span><br><span class="line">                        yx = i;</span><br><span class="line">                        yy = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (mp[i][j] == <span class="string">'M'</span>) &#123;</span><br><span class="line">                        mx = i;</span><br><span class="line">                        my = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Point now = <span class="keyword">new</span> Point(yx, yy, <span class="number">0</span>);</span><br><span class="line">            queue.offer(now);</span><br><span class="line">            vis[yx][yy] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                now = queue.peek();</span><br><span class="line">                queue.poll();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (mp[now.x][now.y] == <span class="string">'@'</span>) KFC[now.x][now.y] = now.step * <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                    Point next = <span class="keyword">new</span> Point(now);</span><br><span class="line">                    next.step++;</span><br><span class="line">                    next.x += dx[k];</span><br><span class="line">                    next.y += dy[k];</span><br><span class="line">                    <span class="keyword">if</span> (next.x &gt;= <span class="number">0</span> &amp;&amp; next.x &lt; n &amp;&amp; next.y &gt;= <span class="number">0</span> &amp;&amp; next.y &lt; m &amp;&amp; mp[next.x][next.y] != <span class="string">'#'</span> &amp;&amp; !vis[next.x][next.y]) &#123;</span><br><span class="line">                        vis[next.x][next.y] = <span class="keyword">true</span>;</span><br><span class="line">                        queue.offer(next);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                    vis[i][j] = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty()) queue.poll();</span><br><span class="line"></span><br><span class="line">            now = <span class="keyword">new</span> Point(mx, my, <span class="number">0</span>);</span><br><span class="line">            queue.offer(now);</span><br><span class="line">            vis[yx][yy] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                now = queue.peek();</span><br><span class="line">                queue.poll();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (mp[now.x][now.y] == <span class="string">'@'</span>)&#123;</span><br><span class="line">                    KFC[now.x][now.y] += now.step * <span class="number">11</span>;</span><br><span class="line">                    ans = Math.min(KFC[now.x][now.y], ans);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                    Point next = <span class="keyword">new</span> Point(now);</span><br><span class="line">                    next.step++;</span><br><span class="line">                    next.x += dx[k];</span><br><span class="line">                    next.y += dy[k];</span><br><span class="line">                    <span class="keyword">if</span> (next.x &gt;= <span class="number">0</span> &amp;&amp; next.x &lt; n &amp;&amp; next.y &gt;= <span class="number">0</span> &amp;&amp; next.y &lt; m &amp;&amp; mp[next.x][next.y] != <span class="string">'#'</span> &amp;&amp; !vis[next.x][next.y]) &#123;</span><br><span class="line">                        vis[next.x][next.y] = <span class="keyword">true</span>;</span><br><span class="line">                        queue.offer(next);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;tips：大家评论的时候写一下邮箱和昵称呀，头像是根据昵称和邮箱随机生成的😁&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://vjudge.net/article/187&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kuangbin专题合集&lt;/a&gt;&lt;/
      
    
    </summary>
    
      <category term="刷题" scheme="zhangzef.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="ACM" scheme="zhangzef.com/tags/ACM/"/>
    
      <category term="蓝桥杯" scheme="zhangzef.com/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
      <category term="搜索" scheme="zhangzef.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
      <category term="bfs记录最短路径" scheme="zhangzef.com/tags/bfs%E8%AE%B0%E5%BD%95%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
      <category term="bfs" scheme="zhangzef.com/tags/bfs/"/>
    
      <category term="dfs" scheme="zhangzef.com/tags/dfs/"/>
    
      <category term="双起点bfs" scheme="zhangzef.com/tags/%E5%8F%8C%E8%B5%B7%E7%82%B9bfs/"/>
    
      <category term="回溯" scheme="zhangzef.com/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>tarjan求有向图的强连通分量</title>
    <link href="zhangzef.com/2019/09/02/tarjan%E6%B1%82%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    <id>zhangzef.com/2019/09/02/tarjan求有向图的强连通分量/</id>
    <published>2019-09-02T11:37:49.000Z</published>
    <updated>2020-02-15T15:06:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>tarjan到底是念“塔进”还是“塔扬”。好像大多数人都念“塔进”，但是英语好像是念“塔扬”。胡扯结束。。。</p><p>这个tarjan算法求的是有向图中的强连通分量，并将他们合并。</p><h2 id="强连通分量"><a href="#强连通分量" class="headerlink" title="强连通分量"></a>强连通分量</h2><p><strong>（如果会可以直接看tarjan部分）</strong>那什么是强连通分量呢？强连通嘛，就是<strong>图中任意两点能相互到达</strong>。那强连通分量就是一个图中的强连通子图。</p><p>环是最简单的强连通分量：</p><p><img src="http://image.zhangzef.com/20200214184723.png" alt="img" style="zoom:50%;"></p><p>那你如果从1出发，只要转一圈就能经过所有点。</p><p>强连通分量不等于环，还有一些复杂的强连通分量，例如完全图：</p><p><img src="http://image.zhangzef.com/20200214184724.png" alt="img" style="zoom:50%;"></p><p>很明显能看出从图中一点出发，可到达其他任意一个点。</p><h2 id="tarjan算法"><a href="#tarjan算法" class="headerlink" title="tarjan算法"></a>tarjan算法</h2><p>先上时间复杂度：O(N+M)    （其中N和M分别为点数和边数）</p><p>tarjan算法是通过对图的dfs来找出其中的强连通分量，并分类。<strong>（需掌握dfs的思想并且能熟练运用）</strong></p><h3 id="dfn数组和low数组讲解"><a href="#dfn数组和low数组讲解" class="headerlink" title="dfn数组和low数组讲解"></a>dfn数组和low数组讲解</h3><p>这里给出tarjan算法中两个重要数组的定义：</p><p>​    dfn[u]：表示当前结点i在dfs算法中第几个被访问的的点。</p><p>​    low[u]：表示当前结点i能回溯到的最小dfs序结点，<strong>dfs序即dfn[u]的值</strong>。</p><p><img src="http://image.zhangzef.com/20200214184716.png" alt="img" style="zoom:50%;"></p><p>（6-&gt;1的箭头画反了，应该时1-&gt;6）</p><p>当从结点1开始dfs时，假设优先向下访问：dfn[1] = 1;    dfn[6] = 2;因为第一个访问的时结点1，所以它的dfs序是1，第二个访问的是结点6，所以它的dfs序时2。访问完结点6发现没有路了，则开始访问结点1的下一条出边。</p><p>开始访问结点2，刚刚访问的结点6是第二个访问的结点，所以结点2是第三个访问的结点，即它的dfs序为3：dfn[2] = 3;    dfn[5] = 4;    dfn[4] = 5;    dfn[3] = 6;我们顺着结点2依次访问下去，发现只有一条路，畅通无阻。</p><p>当访问到结点三的时候我们发现<strong>结点3有一条通向结点2的路</strong>，则此时我们称<strong>结点3回溯到结点2</strong>。我们还发现dfn[2]&lt;dfn[3]，即结点2在dfs中比结点3先被访问。此时我们在dfs回溯的过程中令：low[3] = dfn[2];    low[4] = dfn[2];    low[5] = dfn[2];即令回溯路上的所有点的low数组都赋值为结点2的dfs序。</p><p>由此我们经历了一遍tarjan的简化步骤，我们能发现low数组的取值为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">low[u] = min(</span><br><span class="line">    dfn[u],<span class="comment">//1.</span></span><br><span class="line">    dfn[v],<span class="comment">//2.</span></span><br><span class="line">    low[v]<span class="comment">//3.</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li>low数组初始化时为当前结点的dfs序，即low[u] = dfn[u];</li><li>这里的v是边（u, v）中的v，和上图中边（3, 2）类似。当发现能回溯到的结点dfs序小于自身dfs序时更新low的值</li><li>这里的（u, v）和上图中的（4, 3）类似。dfs回溯过程中时发现前面结点的low值小于自身的low值时，更新自身low值</li></ol><p>从图中可看出2， 5， 4， 3四个结点为一个环，环是最简单的强连通分量，所以2， 5， 4， 3为一个强连通分量。而单独一个结点我们也将他看成一个强连通分量，因此图中有三个强连通分量：（1）（6）（2，4，5，3）</p><p>从中我们观察出1， 6， 2的dfn值和low值相同，所以当dfn[u]==low[u]时，它就是一个强连通分量在dfs树中的起始节点</p><h3 id="tarjan算法伪代码讲解"><a href="#tarjan算法伪代码讲解" class="headerlink" title="tarjan算法伪代码讲解"></a>tarjan算法伪代码讲解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tarjan(u)</span><br><span class="line">&#123;</span><br><span class="line">    DFN[u]=Low[u]=++Index<span class="comment">//1.</span></span><br><span class="line">    Stack.push(u)<span class="comment">//2.</span></span><br><span class="line">    <span class="keyword">for</span> each (u, v) in E<span class="comment">//3.</span></span><br><span class="line">        <span class="keyword">if</span> (v is <span class="keyword">not</span> visted)<span class="comment">//4.</span></span><br><span class="line">            tarjan(v)<span class="comment">//dfs</span></span><br><span class="line">            Low[u] = min(Low[u], Low[v])</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (v in S)<span class="comment">//5.</span></span><br><span class="line">            Low[u] = min(Low[u], DFN[v])</span><br><span class="line">    <span class="keyword">if</span> (DFN[u] == Low[u])<span class="comment">//6.</span></span><br><span class="line">        repeat</span><br><span class="line">            v = S.pop<span class="comment">//7.</span></span><br><span class="line">            print v</span><br><span class="line">        until (u== v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>为结点u初始化dfn和low的值为dfs时的访问顺序，index为全局变量</li><li>将结点u压入栈中</li><li>遍历结点u的每一条边</li><li>如果没访问过</li><li>如果v在栈中</li><li>上面讲过，当dfn[u]==low[u]时，该节点为强连通分量根结点</li><li>将栈顶元素出栈，直到栈顶元素为u时，u出栈，则此次出栈的一系列元素为一个强连通分量</li></ol><p><img src="http://image.zhangzef.com/20200214184716.png" alt="img" style="zoom:50%;"></p><p>（6-&gt;1的箭头画反了，应该时1-&gt;6）</p><ol><li>从结点1开始：dfn[1] = low[1] = 1; 结点1进栈<img src="http://image.zhangzef.com/20200214184717.png" alt="img" style="zoom:50%;"></li><li>1-&gt;6：dfn[6] = low[6] = 2; 结点6进栈<img src="http://image.zhangzef.com/20200214184720.png" alt="img" style="zoom:50%;">结点6没有出边，无法dfs，发现dfn[6]==low[6]，栈顶元素出栈，栈顶元素正好时结点6，无需继续出栈，则结点6自己为一个单独的强联通分量。</li><li>1-&gt;2：dfn[2] = low[2] = 3；结点2进栈<img src="http://image.zhangzef.com/20200214184718.png" alt="img" style="zoom:50%;">结点2有出边且为访问，开始dfs。</li><li>2-&gt;5：dfn[5] = low[5] = 4；结点5进栈<img src="http://image.zhangzef.com/20200214184719.png" alt="img" style="zoom:50%;">结点5有出边且未访问，继续dfs</li><li>5-&gt;4：dfn[4] = low[4] = 5；结点4进栈<img src="http://image.zhangzef.com/20200214184721.png" alt="img" style="zoom:50%;">结点4有未访问的出边，继续dfs</li><li>4-&gt;3：dfn[3] = low[3] = 6；结点3进栈<img src="http://image.zhangzef.com/20200214184722.png" alt="img" style="zoom:50%;">结点3有出边，但结点2已经访问过了，且结点2在栈里面，所以3可以回溯到结点2，可知dfn[2]=3, low[3]=6;  所以low[3] = dfn[2] = 3;</li><li>此时dfn[3]!=low[3]，所以不出栈。</li><li>当dfs回溯到5-&gt;4的时候，发现(low[4]=5) &gt; (low[3]=3)，所以low[4] = 3;    依此类推low[5]=3;且直到dfs回溯到结点2的时候才会进行出栈操作，因为2时强连通分量的根节点。</li><li>不难看出，依次出栈的时3、4、5、2，这四个结点为一个强连通分量</li><li>最后dfs回溯到最开始的入口，结点1出栈</li><li>由此的强连通分量有3个，分别是：（1）、（6）、（3，4，5，2）</li></ol><h2 id="tarjan算法模板"><a href="#tarjan算法模板" class="headerlink" title="tarjan算法模板"></a>tarjan算法模板</h2><h3 id="链式前向星模板"><a href="#链式前向星模板" class="headerlink" title="链式前向星模板"></a>链式前向星模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">     <span class="keyword">int</span> net;</span><br><span class="line">     <span class="keyword">int</span> to;</span><br><span class="line">     <span class="keyword">int</span> w;</span><br><span class="line">&#125;edge[maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn], cnt=<span class="number">0</span>;<span class="comment">//1.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_dege</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].to = v;</span><br><span class="line">    edge[cnt].net = head[u];</span><br><span class="line">    edge[cnt].w = w;</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dfn[maxn], low[maxn], belong[maxn];<span class="comment">//2.</span></span><br><span class="line"><span class="keyword">int</span> index=<span class="number">0</span>, Bcnt;<span class="comment">//3.</span></span><br><span class="line"><span class="keyword">bool</span> instack[maxn];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u] = low[u] = ++index;</span><br><span class="line">    s.push(u);instack[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i!=<span class="number">-1</span>; i=edge[i].net)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            low[u] = min(low[v], low[u]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(instack[v] &amp;&amp; dfn[v]&lt;low[u])</span><br><span class="line">            low[u] = dfn[v];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dfn[u]==low[u])</span><br><span class="line">    &#123;</span><br><span class="line">        Bcnt++;<span class="keyword">int</span> v;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            belong[v] = Bcnt;</span><br><span class="line">            instack[v] = <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span>(v!=u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bcnt = index = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn);</span><br><span class="line">    <span class="keyword">while</span>(!s.empty())s.pop();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)<span class="comment">//4.</span></span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])<span class="comment">//5.</span></span><br><span class="line">            tarjan(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>head[u]记得初始化，初始化为-1。</li><li>belong数组值相同的结点属于同一个强连通分量。</li><li>Bcnt用于划分强连通分量</li><li>要从每个结点都进行一次tarjan，否则有些不可达结点就无法划分强联通分量，n为结点数</li><li>dfn数组初始化为0，当dfn[u]的值不为0的时候则说明被访问过了</li></ol><h3 id="邻接矩阵模板"><a href="#邻接矩阵模板" class="headerlink" title="邻接矩阵模板"></a>邻接矩阵模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mp[maxn][maxn];<span class="comment">//1.</span></span><br><span class="line"><span class="keyword">int</span> dfn[maxn], low[maxn], belong[maxn];</span><br><span class="line"><span class="keyword">int</span> index=<span class="number">0</span>, Bcnt;</span><br><span class="line"><span class="keyword">bool</span> instack[maxn];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u] = low[u] = ++index;</span><br><span class="line">    s.push(u);instack[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>; v&lt;n; v++)<span class="comment">//2.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mp[u][v]==<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            low[u] = min(low[v], low[u]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(instack[v] &amp;&amp; dfn[v]&lt;low[u])</span><br><span class="line">            low[u] = dfn[v];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dfn[u]==low[u])</span><br><span class="line">    &#123;</span><br><span class="line">        Bcnt++;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            belong[v] = Bcnt;</span><br><span class="line">            instack[v] = <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span>(v!=u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Bcnt = index = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn);</span><br><span class="line">    <span class="keyword">while</span>(!s.empty())s.pop();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">            tarjan(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>邻接矩阵，当值为-1时表示不连通</li><li>n为结点数</li></ol><h3 id="邻接表模板"><a href="#邻接表模板" class="headerlink" title="邻接表模板"></a>邻接表模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; G[maxn];<span class="comment">//1.</span></span><br><span class="line"><span class="keyword">int</span> dfn[maxn], low[maxn], belong[maxn];</span><br><span class="line"><span class="keyword">int</span> index=<span class="number">0</span>, Bcnt;</span><br><span class="line"><span class="keyword">bool</span> instack[maxn];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_eage</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    G[u].push_back(make_pair(w, v));</span><br><span class="line">    <span class="comment">//G[v].push_back(make_pair(w, u));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u] = low[u] = ++index;</span><br><span class="line">    s.push(u);instack[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[u].size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = G[u][i].second;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            low[u] = min(low[v], low[u]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(instack[v] &amp;&amp; dfn[v]&lt;low[u])</span><br><span class="line">            low[u] = dfn[v];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dfn[u]==low[u])</span><br><span class="line">    &#123;</span><br><span class="line">        Bcnt++;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            belong[v] = Bcnt;</span><br><span class="line">            instack[v] = <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span>(v!=u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)<span class="comment">//2.</span></span><br><span class="line">        G[i].clear();</span><br><span class="line">    Bcnt = index = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn);</span><br><span class="line">    <span class="keyword">while</span>(!s.empty())s.pop();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">            tarjan(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>用vector和pair实现邻接表，pair的first为路径权重，pair的second为另一端结点</li><li>初始化邻接表</li></ol><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="HDU1269"><a href="#HDU1269" class="headerlink" title="HDU1269"></a><a href="https://vjudge.net/problem/HDU-1269" target="_blank" rel="noopener">HDU1269</a></h3><p>题意：给你一个图，让你判断这个图是不是一整个强连通分量</p><p>题解：没什么可说的，tarjan模板题。需要注意的是有的能给的图只有点没有边，所以结束条件需要时m和n同时为0时才行。代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, net;</span><br><span class="line">&#125;edge[maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn], cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn], low[maxn], index, Bcnt, n, m, belong[maxn];</span><br><span class="line"><span class="keyword">bool</span> instack[maxn];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].to = v;</span><br><span class="line">    edge[cnt].net = head[u];</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt = index = Bcnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn);</span><br><span class="line">    <span class="built_in">memset</span>(low, <span class="number">0</span>, <span class="keyword">sizeof</span> low);</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="built_in">memset</span>(instack, <span class="number">0</span>, <span class="keyword">sizeof</span> instack);</span><br><span class="line">    <span class="built_in">memset</span>(belong, <span class="number">0</span>, <span class="keyword">sizeof</span> belong);</span><br><span class="line">    <span class="keyword">while</span>(!s.empty())s.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u] = low[u] = ++index;</span><br><span class="line">    instack[u] = <span class="literal">true</span>;</span><br><span class="line">    s.push(u);</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i!=<span class="number">-1</span>; i=edge[i].net)</span><br><span class="line">    &#123;</span><br><span class="line">        v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            <span class="keyword">if</span>(low[v]&lt;low[u])   low[u] = low[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(instack[v] &amp;&amp; dfn[v]&lt;low[u])</span><br><span class="line">            low[u] = dfn[v];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dfn[u]==low[u])</span><br><span class="line">    &#123;</span><br><span class="line">        Bcnt++;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            belong[v] = Bcnt;</span><br><span class="line">            instack[v] = <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span>(u!=v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt;n &gt;&gt;m &amp;&amp; n+m)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u, v;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt;u &gt;&gt;v;</span><br><span class="line">            addedge(u, v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">                tarjan(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> flag = belong[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">bool</span> f = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="keyword">if</span>(belong[i]!=flag)</span><br><span class="line">                f = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!f) <span class="built_in">cout</span> &lt;&lt;<span class="string">"No"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt;<span class="string">"Yes"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU1827"><a href="#HDU1827" class="headerlink" title="HDU1827"></a><a href="https://vjudge.net/problem/HDU-1827" target="_blank" rel="noopener">HDU1827</a></h3><p>题意：给你一些人的联系方式，但是这种联系方式时有向的，即x可以联系y不代表y可以联系到x，其实就是有向图。也给出你联系每个人的花费，如果可以让别人帮忙联系，就可以不需要花费话费。求最少需要联系多少人和花费多少话费。</p><p>题解：这道题没有那么直接，但是也能看出和强连通分量有关。这道题要求的是<strong>没有入边的强连通分量的个数</strong>，并且求出这些没有入边的强联通分量中花费最小的人。为什么是没有入边的强连通分量而不是强连通分量，因为有如入边的强联通分量可以被其他人通知到，就不需要你再亲自通知了。（一开始我理解成强连通分量的个数了(&gt;_&lt;) ）这题要用scnaf和printf，不能用cin和cout，数据量大，会超时。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, net;</span><br><span class="line">&#125; edge[maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn], cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn], low[maxn], index, Bcnt, n, m, belong[maxn], fee[maxn], cost[maxn], ans;</span><br><span class="line"><span class="keyword">bool</span> instack[maxn], in[maxn];<span class="comment">//1.</span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].to = v;</span><br><span class="line">    edge[cnt].net = head[u];</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt = index = ans = Bcnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn);</span><br><span class="line">    <span class="built_in">memset</span>(low, <span class="number">0</span>, <span class="keyword">sizeof</span> low);</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="built_in">memset</span>(instack, <span class="number">0</span>, <span class="keyword">sizeof</span> instack);</span><br><span class="line">    <span class="built_in">memset</span>(belong, <span class="number">0</span>, <span class="keyword">sizeof</span> belong);</span><br><span class="line">    <span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span> in);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxn; i++)</span><br><span class="line">        cost[i]=INF;</span><br><span class="line">    <span class="built_in">memset</span>(fee, <span class="number">0</span>, <span class="keyword">sizeof</span> fee);</span><br><span class="line">    <span class="keyword">while</span>(!s.empty())</span><br><span class="line">        s.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u] = low[u] = ++index;</span><br><span class="line">    instack[u] = <span class="literal">true</span>;</span><br><span class="line">    s.push(u);</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i!=<span class="number">-1</span>; i=edge[i].net)</span><br><span class="line">    &#123;</span><br><span class="line">        v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            <span class="keyword">if</span>(low[v]&lt;low[u])</span><br><span class="line">                low[u] = low[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(instack[v] &amp;&amp; dfn[v]&lt;low[u])</span><br><span class="line">            low[u] = dfn[v];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dfn[u]==low[u])</span><br><span class="line">    &#123;</span><br><span class="line">        Bcnt++;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            belong[v] = Bcnt;</span><br><span class="line">            instack[v] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(u!=v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;fee[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u, v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">            addedge(u, v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">                tarjan(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cnt=Bcnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="comment">//2.</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=head[i]; j!=<span class="number">-1</span>; j=edge[j].net)</span><br><span class="line">                <span class="keyword">if</span>(belong[i]!=belong[edge[j].to] &amp;&amp; !in[belong[edge[j].to]])</span><br><span class="line">                &#123;</span><br><span class="line">                    in[belong[edge[j].to]] = <span class="literal">true</span>;</span><br><span class="line">                    cnt--;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="comment">//3.</span></span><br><span class="line">            <span class="keyword">if</span>(!in[belong[i]])</span><br><span class="line">                cost[belong[i]] = min(cost[belong[i]], fee[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=Bcnt; i++)</span><br><span class="line">            <span class="keyword">if</span>(!in[i])</span><br><span class="line">                ans+=cost[i];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, cnt, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>in数组表示该强连通分量是否有入边，为true则有，false则没有。</li><li>这个for循环求出有入边的强连通分量，即看看每个点的入边是否和自己在同一个强连通分量中即可。cnt为没有入边的个数。</li><li>求出没有入边的强连通分量中的最小花费，cost[i]代表第i个强连通分量的花费</li></ol><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ol><li><a href="https://www.byvoid.com/zhs/blog/scc-tarjan" target="_blank" rel="noopener">BYVoid有向图强连通分量的tarjan算法</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;tarjan到底是念“塔进”还是“塔扬”。好像大多数人都念“塔进”，但是英语好像是念“塔扬”。胡扯结束。。。&lt;/p&gt;
&lt;p&gt;这个tarjan算法求的是有向图中的强连通分量，并将他们合并。&lt;/p&gt;
&lt;h2 id=&quot;强连通分量&quot;&gt;&lt;a href=&quot;#强连通分量&quot; class=&quot;
      
    
    </summary>
    
      <category term="算法" scheme="zhangzef.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM" scheme="zhangzef.com/tags/ACM/"/>
    
      <category term="图论" scheme="zhangzef.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>差分约束</title>
    <link href="zhangzef.com/2019/08/01/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/"/>
    <id>zhangzef.com/2019/08/01/差分约束/</id>
    <published>2019-08-01T06:53:59.000Z</published>
    <updated>2020-02-15T15:06:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>差分约束系统</strong>是求解一组特殊的不等式组的方法。</p><h2 id="差分约束举例"><a href="#差分约束举例" class="headerlink" title="差分约束举例"></a>差分约束举例</h2><p>差分约束是有n个变量和m个不等式组成的。其中每个不等式都是形如：$x_i-x_j \leq b_k(i,j\in[1,n], k\in[1,m])$  或 $x_i-x_j \geq b_k(i,j\in[1,n], k\in[1,m])$ 。</p><p>其中x为n个变量，b为m个不等式右边的值，用b的值来约束x的差称为差分约束。求一组解：$x_1=a_1,\quad x_2=a_2,\cdots x_n=a_n$使得所有约束条件(即m个不等式)均成立，则称差分约束有解，否则无解。</p><p>例如：<br>$$<br>(1)x_1-x_3 \leq 5;\quad<br>(2)x_3-x_5 \leq 4;\quad<br>$$<br>$$<br>(3)x_3-x_2 \leq 1;\quad<br>(4)x_1-x_5 \leq 10;\quad<br>(5)x_2-x_5 \leq 2;\quad<br>$$</p><p>观察$ x_1-x_5 $的关系，有如下三种关系：</p><ol><li>(4)                $x_1-x_5 \leq 10$</li><li>(1)+(2)         $x_1-x_5 \leq 9$</li><li>(1)+(3)+(5)   $x_1-x_5 \leq 8 $</li></ol><p>因为要满足所有等式的关系，所以取其中最大的3.$x_1-x_5 \leq 8$  因为8一定小于9和10嘛，如果$x_1-x_5$小于等于8了，那他们一定小于等于9和10。</p><h2 id="最短路问题"><a href="#最短路问题" class="headerlink" title="最短路问题"></a>最短路问题</h2><p>观察可发现 $x_i-x_j \leq b_k$ 可转换为：$x_i \leq b_k+x_j$ 。与求最短路公式中的dis[j]&lt;dis[i]+w[i, j]非常相似，那差分约束问题是不是也可以转化成最短路问题来求解呢？肯定是可以的！先来看个例子：</p><p><img src="http://image.zhangzef.com/20200214185016.png" alt="img" style="zoom:50%;"></p><p>仔细观察图中可发现总共有三条路径：</p><ol><li>5 -&gt; 1                      长度为10</li><li>5 -&gt; 3 -&gt; 1               长度为9</li><li>5 -&gt; 2 -&gt; 3 -&gt; 1        长度为8</li></ol><p>很容易发现从5到1的最短路径是8。那为什么求差分约束问题能和最短路问题联系到一起呢？此处要先了解最短路知识，不懂的可以看一看我前面写的博客：1.<a href="https://zhangzef.com/2019/07/25/%E6%9C%80%E7%9F%AD%E8%B7%AF--Dijkstra/">dijkstra</a>    2.<a href="https://zhangzef.com/2019/07/26/%E6%9C%80%E7%9F%AD%E8%B7%AF-SPFA/">SPFA</a>    3.<a href="https://zhangzef.com/2019/07/30/%E6%9C%80%E7%9F%AD%E8%B7%AF-Floyd/">Floyd</a></p><h2 id="差分约束和最短路问题"><a href="#差分约束和最短路问题" class="headerlink" title="差分约束和最短路问题"></a>差分约束和最短路问题</h2><p>对于每个不等式$x_i-x_j \leq b_k$，我们都从结点j向结点i连一条长度为$b_k$的有向边。此时再看上面给出的那些不等式所转化成的图，是否和给出的图一样呢，最后求解的答案也一样。那么我们将差分约束问题转化成最短路问题，由最短路知识可知，当图中存在可达到的负环时，最短路一定无解。所以可以用SPFA来判断该差分约束问题是否有解。</p><p>这时候就有一个问题了，在最短路中有些点是不可达的，当遇到不可达的负环用SPFA一定判断不出来，但此时差分约束却是无解的。怎么办呢？有两种方法，其实本质都是一样的：</p><ol><li>我们新定义一个结点，可以是$x_0$，让它向所有其它结点连一条边，让这些边的权值为0。因为SPFA是一个bfs的过程(有些题目需要把spfa改成dfs的形式，但是并不影响它访问的结点个数，只是访问顺序不一样)，所以从这个结点出发一定能到达所有结点，而且不会影响结果的正确性。</li><li>第二种方法就比较暴力了，现在问题是有的结点访问不到怎么办，spfa又是求单源最短路，那我们直接一个for循环，每个结点都当一次源点，求n次单源最短路，这样就能访问到所有结点了。</li></ol><p>两种方法的时间复杂度我不太会分析，但是感觉好像差不多一样的。</p><h2 id="变化技巧"><a href="#变化技巧" class="headerlink" title="变化技巧"></a>变化技巧</h2><h3 id="不等式转化"><a href="#不等式转化" class="headerlink" title="不等式转化"></a>不等式转化</h3><p>有时候题中会给出三种不等式，但是求最短路只能有一种不等式，这时候我们就可以把其他不等式变化成一样的不等式，进而转化成图。</p><table><thead><tr><th style="text-align:center">题意</th><th style="text-align:center">转化</th><th style="text-align:center">连边</th></tr></thead><tbody><tr><td style="text-align:center">$x_i-x_j \leq b_k$</td><td style="text-align:center">$x_i-x_j \leq b_k$</td><td style="text-align:center">add(j, i, $b_k$)</td></tr><tr><td style="text-align:center">$x_i-x_j \geq b_k $</td><td style="text-align:center">$x_j-x_i \leq -b_k$</td><td style="text-align:center">add(i, j, -$b_k$)</td></tr><tr><td style="text-align:center">$x_i=x_j$</td><td style="text-align:center">$x_i-x_j \leq 0$, $x_j-x_i \leq 0$</td><td style="text-align:center">add(i, j, 0), add(j, i, 0)</td></tr></tbody></table><h3 id="最短路与最长路和差分约束的关系"><a href="#最短路与最长路和差分约束的关系" class="headerlink" title="最短路与最长路和差分约束的关系"></a>最短路与最长路和差分约束的关系</h3><p>有最短路了一定也有最长路，那他们和差分约束有什么关系呢？</p><p>当我们要求差分约束的最小值时，一定希望所有不等式都是大于等于号，这样求出来的一定是最小值。但是当我们有m个约束条件（即不等式），我们想要满足所有大于等于的不等式，我们一定得找到所有$ b_k $中最大的那一个，这样如果满足了最大的那个$ b_k $不等式，其他的大于等于不等式也一定都满足了。所以求$x_i-x_j$的最小值，就是求图中的最长路。所以，<strong>求最长路就是求差分约束中的最小值</strong>。求最长路的时候有正环则无解。</p><p>同理<strong>求最短路就是求差分约束的最大值</strong>。求最短路的时候有负环则无解。</p><p>什么？你问我最长路怎么求？把最短路算法中的小于号改成大于号不就行了。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://www.luogu.org/problem/P1993" target="_blank" rel="noopener">洛谷P1993</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://blog.csdn.net/WhereIsHeroFrom/article/details/78922648" target="_blank" rel="noopener">夜深人静写算法（四）- 最短路和差分约束</a></li><li><a href="https://oi-wiki.org" target="_blank" rel="noopener">OI-WiKi（一个算法竞赛的百科）</a></li><li><a href="https://zh.wikipedia.org/wiki/差分约束系统" target="_blank" rel="noopener">维基百科：差分约束系统</a></li><li><a href="https://www.luogu.org/blog/user33173/solution-p1993" target="_blank" rel="noopener">P1993小K的农场 题解</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;差分约束系统&lt;/strong&gt;是求解一组特殊的不等式组的方法。&lt;/p&gt;
&lt;h2 id=&quot;差分约束举例&quot;&gt;&lt;a href=&quot;#差分约束举例&quot; class=&quot;headerlink&quot; title=&quot;差分约束举例&quot;&gt;&lt;/a&gt;差分约束举例&lt;/h2&gt;&lt;p&gt;差分约束是有n
      
    
    </summary>
    
      <category term="算法" scheme="zhangzef.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM" scheme="zhangzef.com/tags/ACM/"/>
    
      <category term="图论" scheme="zhangzef.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
</feed>
