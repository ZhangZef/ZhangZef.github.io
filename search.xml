<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[差分约束]]></title>
    <url>%2F2019%2F08%2F01%2F%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%2F</url>
    <content type="text"><![CDATA[差分约束差分约束系统是求解一组特殊的不等式组的方法。 差分约束举例差分约束是有n个变量和m个不等式组成的。其中每个不等式都是形如：$x_i-x_j \leq b_k(i,j\in[1,n], k\in[1,m])$ 或 $x_i-x_j \geq b_k(i,j\in[1,n], k\in[1,m])$ 。 其中x为n个变量，b为m个不等式右边的值，用b的值来约束x的差称为差分约束。求一组解：$x_1=a_1,\quad x_2=a_2,\cdots x_n=a_n$使得所有约束条件(即m个不等式)均成立，则称差分约束有解，否则无解。 例如：$$(1)x_1-x_3 \leq 5;\quad(2)x_3-x_5 \leq 4;\quad$$$$(3)x_3-x_2 \leq 1;\quad(4)x_1-x_5 \leq 10;\quad(5)x_2-x_5 \leq 2;\quad$$ 观察$ x_1-x_5 $的关系，有如下三种关系： (4) $x_1-x_5 \leq 10$ (1)+(2) $x_1-x_5 \leq 9$ (1)+(3)+(5) $x_1-x_5 \leq 8 $ 因为要满足所有等式的关系，所以取其中最大的3.$x_1-x_5 \leq 8$ 因为8一定小于9和10嘛，如果$x_1-x_5$小于等于8了，那他们一定小于等于9和10。 最短路问题观察可发现 $x_i-x_j \leq b_k$ 可转换为：$x_i \leq b_k+x_j$ 。与求最短路公式中的dis[j]&lt;dis[i]+w[i, j]非常相似，那差分约束问题是不是也可以转化成最短路问题来求解呢？肯定是可以的！先来看个例子： 仔细观察图中可发现总共有三条路径： 5 -&gt; 1 长度为10 5 -&gt; 3 -&gt; 1 长度为9 5 -&gt; 2 -&gt; 3 -&gt; 1 长度为8 很容易发现从5到1的最短路径是8。那为什么求差分约束问题能和最短路问题联系到一起呢？此处要先了解最短路知识，不懂的可以看一看我前面写的博客：1.dijkstra 2.SPFA 3.Floyd 差分约束和最短路问题对于每个不等式$x_i-x_j \leq b_k$，我们都从结点j向结点i连一条长度为$b_k$的有向边。此时再看上面给出的那些不等式所转化成的图，是否和给出的图一样呢，最后求解的答案也一样。那么我们将差分约束问题转化成最短路问题，由最短路知识可知，当图中存在可达到的负环时，最短路一定无解。所以可以用SPFA来判断该差分约束问题是否有解。 这时候就有一个问题了，在最短路中有些点是不可达的，当遇到不可达的负环用SPFA一定判断不出来，但此时差分约束却是无解的。怎么办呢？有两种方法，其实本质都是一样的： 我们新定义一个结点，可以是$x_0$，让它向所有其它结点连一条边，让这些边的权值为0。因为SPFA是一个bfs的过程(有些题目需要把spfa改成dfs的形式，但是并不影响它访问的结点个数，只是访问顺序不一样)，所以从这个结点出发一定能到达所有结点，而且不会影响结果的正确性。 第二种方法就比较暴力了，现在问题是有的结点访问不到怎么办，spfa又是求单源最短路，那我们直接一个for循环，每个结点都当一次源点，求n次单源最短路，这样就能访问到所有结点了。 两种方法的时间复杂度我不太会分析，但是感觉好像差不多一样的。 变化技巧不等式转化有时候题中会给出三种不等式，但是求最短路只能有一种不等式，这时候我们就可以把其他不等式变化成一样的不等式，进而转化成图。 题意 转化 连边 $x_i-x_j \leq b_k$ $x_i-x_j \leq b_k$ add(j, i, $b_k$) $x_i-x_j \geq b_k $ $x_j-x_i \leq -b_k$ add(i, j, -$b_k$) $x_i=x_j$ $x_i-x_j \leq 0$, $x_j-x_i \leq 0$ add(i, j, 0), add(j, i, 0) 最短路与最长路和差分约束的关系有最短路了一定也有最长路，那他们和差分约束有什么关系呢？ 当我们要求差分约束的最小值时，一定希望所有不等式都是大于等于号，这样求出来的一定是最小值。但是当我们有m个约束条件（即不等式），我们想要满足所有大于等于的不等式，我们一定得找到所有$ b_k $中最大的那一个，这样如果满足了最大的那个$ b_k $不等式，其他的大于等于不等式也一定都满足了。所以求$x_i-x_j$的最小值，就是求图中的最长路。所以，求最长路就是求差分约束中的最小值。求最长路的时候有正环则无解。 同理求最短路就是求差分约束的最大值。求最短路的时候有负环则无解。 什么？你问我最长路怎么求？把最短路算法中的小于号改成大于号不就行了。 例题洛谷P1993 参考 夜深人静写算法（四）- 最短路和差分约束 OI-WiKi（一个算法竞赛的百科） 维基百科：差分约束系统 P1993小K的农场 题解]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图的边存储--链式前向星]]></title>
    <url>%2F2019%2F07%2F31%2F%E5%9B%BE%E7%9A%84%E8%BE%B9%E5%AD%98%E5%82%A8-%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F%2F</url>
    <content type="text"><![CDATA[图的边存储–链式前向星链式前向星是在看差分约束的题的时候偶然间看到的，一开始没太重视它，感觉好像没怎么听说过。还要定义结构体，而且需要辅助数组，感觉挺麻烦的。还不如直接用STL的vector+pair定义的邻接表好用。但是后来发现大家写SPFA的时候都用的链式前向星，感觉还是写个博客学习一下吧，以前都没听说过，太菜了。。。 边存储结构存的都是有向边！！！ 优缺点优点 适用范围广，基本上所有图论的题都能用链式前向星来存储。 存储效率高，像邻接表一样不会存储不存在的边 可以用来替代邻接表，用vector实现邻接表好像容易爆内存(看别人说的)好像也确实，vector在容量不够时会重新开辟一个两倍于原来大小的数组。 缺点 邻接表的缺点它都有， 无法判断重边(必须遍历查找) 无法操作某个特定的边(必须遍历查找) 相对于邻接矩阵来说不容易实现和理解 代码实现1234567891011121314151617struct Edge&#123; int net;//1. int to; int w;&#125;edge[maxn];int head[maxn], cnt=0;//2.void add_dege(int u, int v, int w)&#123; edge[cnt].to = v; edge[cnt].net = head[u];//3. edge[cnt].w = w; head[u] = cnt++;&#125;for(int i=head[u]; i!=-1; i=edge[i].net)//4. 注释： net是next，有时候定义next可能会和系统关键字重复，所以定义为net。net指向当前边的出发结点的下一条边在edge数组中的下标。SPFA是一个bfs的过程，进行广搜时会先遍历某个顶点的所有出边，net即指向当前结点的下一条出边。to即当前边的尾结点。w即权重。 head[u]即存储u结点的第一个出边在edge数组中的下标。cnt即记录当前存储到edge数组的第几位了，用来设置数组下标。 链式前向星是反着存储的，即先输入的边存在后面，有些类似于栈，后进先出。当a的第一条出边存入edge数组中，net等于head[u]，即-1。(所有head初始化为-1，-1表示没有边存入)之后head[u]被赋值为cnt，即刚输入的那条边在edge数组中的下标。当a的第二条边存入edge数组时，net等于head[u]，此时head[u]存的是上一次存储以u为出边的边在edge数组中的下标。每次head[u]存储的都是上一个u的边，所以遍历的时候是先遍历最后输入u的边。 链式前向星遍历结点u所有出边的方法，当等于-1时表示没有下一条边了，遍历结束。 举例 输入顺序为： u = 0 v = 1 u = 1 v = 3 u = 0 v = 2 u = 2 v = 3 u = 1 v = 2 u = 3 v = 4 u = 4 v = 2 手动模拟一下 edge[0].to = 1 edge[0].net = -1 head[0] = 0 cnt = 0 edge[1].to = 3 edge[1].net = -1 head[1] = 0 cnt = 1 edge[2].to = 2 edge[2].net = 0 head[0] = 2 cnt = 2 edge[3].to = 3 edge[3].net = -1 head[2] = 0 cnt = 3 edge[4].to = 2 edge[4].net = 0 head[1] = 4 cnt = 4 edge[5].to = 4 edge[5].net = -1 head[3] = 5 cnt = 5 edge[6].to = 2 edge[6].net = -1 head[4] = 6 cnt = 6 上图中0的出边有两条，在edge数组中的存储位置分别为0、2，最后head[0] = 2；当遍历以0为起点的边时，先从edge[2]开始遍历，可发现edge[2].net = 0;即以0为起点的最后一条边。可看出，遍历和输入顺序是相反的，但是并不影响结果。 参考 不知道为什么404了 ACM图论之存图方式]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>图的存储</tag>
        <tag>图论</tag>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最短路--Floyd]]></title>
    <url>%2F2019%2F07%2F30%2F%E6%9C%80%E7%9F%AD%E8%B7%AF-Floyd%2F</url>
    <content type="text"><![CDATA[最短路–FloydFloyd是用来求全局任意两点之间的最短路的。 Floyd很好理解，依次用每个点去松弛其它所有边，感觉没什么好讲的。理解了dijkstra和SPFA之后，感觉Floyd就很简单易懂了，直接上代码吧。 时间复杂度：O(n^3) 空间复杂度：O(n^2) 算法实现1234for(int k=0; k&lt;n; k++)//1. for(int i=0; i&lt;n; i++) for(int j=0; j&lt;n; j++) d[i][j] = min(d[i][j], d[i][k]+d[k][j]); 注释： 其中n为图中顶点个数，k依次枚举所有顶点去松弛其它所有边。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>ACM</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最短路--SPFA]]></title>
    <url>%2F2019%2F07%2F26%2F%E6%9C%80%E7%9F%AD%E8%B7%AF-SPFA%2F</url>
    <content type="text"><![CDATA[最短路–SPFASPFA是个很神奇的算法，他在一般情况下时间会跑的很快，肯定有人想用SPFA来代替dijkstra，但是有一种特殊的数据专门来卡SPFA，只能让dijkstra过，SPFA过不去，那就是网格图，我稍后会讲为什么网格图可以卡掉SPFA。 但是为什么SPFA跑不过dijkstra，大家还要用SPFA？因为dijkstra只能计算不带负环的图，当图中出现负环，dijkstra就会一直卡在负环里出不来了。如果不太懂可以看一看我的上一篇博客：Dijkstra 当图中存在可到达的负环，则该图一定不存在最短路，因为负环可以一直当做最短路来松弛其他边，那么最短路就能无限小，所以不存在最短路。 SPFA也是用来求单源最短路，它当然也不能在存在可达负环的时候计算最短路，但是他有一个神奇的功能：判断图中是否存在可达负环。 Bellman-FordSPFA是Bellman-Ford的队列优化，在一般情况下比Bellman-Ford快很多。这里介绍Bellman-Ford是希望可以更好地理解SPFA，因为两者本质区别不大。 算法步骤算法总共跑n-1轮就能确定所有点的最短路。总共有n个点，x1, x2, x3, x4…xn，其中x1为源点，第一轮一定可以确定离源点最近的点的最短路，即x2的最短路。依次类推，如果图中不存在负环，则一定能在n-1轮推出所有点的最短路。 算法实现下面把敦爷讲课的时候的代码放出来： 12345678for(int k=1; k&lt;=n-1; k++)&#123; for(int i=1; i&lt;m; i++) &#123; if(dis[v[i]] &gt; dis[u[i]]+w[i]) dis[v[i]] = dis[u[i]]+w[i] &#125;&#125; SPFA观察上面的Bellman-Ford可发现，当dis[u]没有被更新的时候，它依然会用dis[u]去松弛其它边，这样就做了很多冗余的操作，我们用一个队列来优化它，就是当有一个点被更新了，如果这个点没在队列里面，就把它放到队列里面去。这样一个点很久没有被更新过的话，就不会用它去更新其它边。 算法实现此处建议先看懂我的上一篇博客：Dijkstra 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354int dis[maxn], viscnt[maxn];bool inq[maxn];vector&lt;pair&lt;int, int&gt; &gt; G[maxn];//1.void add_eage(int s, int t, int w)&#123; G[s].push_back(make_pair(w, t));//2. G[t].push_back(make_pair(w, s));//3.&#125;void init(int n)//4.&#123; for(int i=0; i&lt;n; i++) G[i].clear();&#125;bool SPFA(int n, int s)//5.&#123; for(int i=0; i&lt;n; i++)//6. &#123; dis[i] = (i==s)?0:INF; inq[i] = false; viscnt[i] = 0; &#125; queue&lt;pair&lt;int, int&gt; &gt; q; q.push(make_pair(dis[s], s));//7. inq[s] = true; while(!q.empty()) &#123; pair&lt;int, int&gt; p = q.front(); int x = p.second;//8. q.pop(); inq[x] = false; if(viscnt[x]++&gt;n)//9. return true; for(int i=0; i&lt;G[x].size(); i++)//10. &#123; int y=G[x][i].second, w=G[x][i].first; if(dis[x]+w&lt;dis[y])//11. &#123; dis[y] = dis[x]+w; if(!inq[y]) &#123; q.push(make_pair(dis[y], y)); inq[y] = true; &#125; &#125; &#125; &#125; return false;&#125; 注释： viscnt[i]用来计数第i个点被更新了几次，如果更新次数超过n，则说明图中存在负环。inq[i]表示第i个点是否在队列里面。存放pair的vector用来存放边和边权，G[i] [j]存放的是和结点i相连的第j条边。G[i] [j].second存放的是和结点i相连的第j条边的另一个端点。G[i] [j].first存放的是和结点i相连的第j条边的权重。maxn为自己定义的常量。 将边添加至vector中，s、w、t 说明同上。 无向图的边是无向的，所以需要在G[s]和G[w]中都加入一条边。有向图不需要这一步。 初始化vector，清空所有先前加入的边。 SPFA当图中存在负环时返回true，不存在时返回false。 初始化dis数组，将源点到源点的距离设置为0，其他的设置为INF(自己定义)。viscnt和inq设为0和false。 将源点压入队列。inq[s]设为true。 依次取队首元素。取出后inq[i]设为false。 每次访问一个点，令这个点的viscnt++，当这个点的访问次数超过n次，则说明图中存在负环。 依次遍历与x相连的边，y表示与x相连的边的另一端结点编号。w表示x到y路径权重。 进行松弛操作，如果某个点松弛操作成功，则把它压入队列。 如何卡SPFA因为SPFA没回更新的时候用的是一条边去更新，被更新过的点入队。 比如说我们有一条链 当我们用边0-1去更新后面所有边之后，如果边0-1又被更新，则后面的所有边都要被依次再更新一遍。 这样SPFA的时间复杂度就会变得非常高 参考 夜深人静写算法（四）- 最短路和差分约束 2019ccpc夏令营敦爷讲的图论]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>ACM</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最短路--Dijkstra]]></title>
    <url>%2F2019%2F07%2F25%2F%E6%9C%80%E7%9F%AD%E8%B7%AF--Dijkstra%2F</url>
    <content type="text"><![CDATA[最短路–DijkstraDijkstra是单源最短路算法，用于求正权图源点到每个顶点的最短路。Dijkstra用到了一些BFS的思想 算法步骤 初始化dis数组和vis数组。 dis[i]表示源点到第i个点的距离，初始化为INF，表示无穷大。（INF为自己定义） vis[i]数组表示第i个点的最短路是否用于处理过未求出最短路的点。（当用优先队列的时候则不用vis数组） 找出当前最短dis[i]，并且vis[i]为false的点。如果找不到，则最短路求解完成，算法结束。 令vis[i]为true，表示已经使用过该最短路处理其dis[i]，防止重复使用。依次遍历其余所有点，令dis[j] = min(dis[j], dis[i]+w[i] [j]) w[i] [j]表示点i到点j的距离。这一步表示源点到i加上i到j的距离和源点到j的距离哪个小。 算法实现邻接矩阵版时间复杂度为O(n*n) n为顶点数 123456789101112131415161718192021222324252627void dijkstra(int n, int s)//1.&#123; for(int i=0; i&lt;n; i++)//2. &#123; dis[i] = w[s][i]; vis[i] = false; &#125; dis[s] = 0; for(int i=0; i&lt;n; i++)//3. &#123; int mn = INF, x; for(int j=0; j&lt;n; j++)//4. if(!vis[j] &amp;&amp; dis[j]&lt;mn) &#123; mn = dis[j]; x=j; &#125; if(mn==INF)//5. return; vis[x] = true;//6. for(int j=0; j&lt;n; j++) dis[j] = min(dis[j], dis[x]+w[x][j]); &#125;&#125; 注释： n为结点个数，s为源点。 初始化dis数组和vis数组 依次遍历每个结点 找出当先未使用过的最短路，并把下标存入x 如果全部使用过则算法结束 vis[x]设为true，比较dis[j]和dis[x]+w[x] [j]的大小 优先队列版用优先队列优化dijkstra大部分时间优于普通版，但是在完全图时普通版更好。 时间复杂度：O((m+n)logm) 其中n为顶点数，m为边数。所以当完全图时普通版更好。 1234567891011121314151617181920212223242526272829303132333435363738394041int dis[maxn];vector&lt;pair&lt;int, int&gt; &gt; G[maxn];//1.void add_eage(int s, int t, int w)&#123; G[s].push_back(make_pair(w, t));//2. G[t].push_back(make_pair(w, s));//3.&#125;void init(int n)//4.&#123; for(int i=0; i&lt;n; i++) G[i].clear();&#125;void dijkstra(int n, int s)&#123; for(int i=0; i&lt;n; i++)//5. dis[i] = (i==s)?0:INF; priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt; &gt;, greater&lt;pair&lt;int, int&gt; &gt; &gt; q;//6. q.push(make_pair(dis[s], s));//7. while(!q.empty()) &#123; pair&lt;int, int&gt; p = q.top(); int x = p.second;//8. q.pop(); for(int i=0; i&lt;G[x].size(); i++) &#123; int y=G[x][i].second, w=G[x][i].first;//9. if(dis[x]+w&lt;dis[y])//10. &#123; dis[y] = dis[x]+w; q.push(make_pair(dis[y], y)); &#125; &#125; &#125;&#125; 注释： 存放pair的vector用来存放边和边权，因为pair比较大小是first优先，所以pair的first放的是权重。G[i] [j]存放的是和结点i相连的第j条边。G[i] [j].second存放的是和结点i相连的第j条边的另一个端点。G[i] [j].first存放的是和结点i相连的第j条边的权重。maxn为自己定义的常量。 将边添加至vector中，s、w、t 说明同上。 无向图的边是无向的，所以需要在G[s]和G[w]中都加入一条边。有向图不需要这一步。 初始化vector，清空所有先前加入的边。 初始化dis数组，将源点到源点的距离设置为0，其他的设置为INF(自己定义)。 定义优先队列，第一个参数为数据类型，比较pair类型，pair的first优先。第二个参数为存储容器，和先前存边的vector定义相同。第三个参数表示小顶堆(greater为小顶堆，less为大顶堆)。 将源点压入队列。 x存放当前未访问过的权值最小边的一端结点编号。 依次遍历与x相连的边，y表示与x相连的边的另一端结点编号。w表示x到y路径权重 该步骤通邻接矩阵dijkstra相似 模板例题hdoj1874 参考 夜深人静写算法（四）- 最短路和差分约束 dijkstra几大模板（这里面的优先队列模板好像时错的，我只参考了他的stl用法） C++ pair的比较大小]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>ACM</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[并查集]]></title>
    <url>%2F2019%2F07%2F22%2F%E5%B9%B6%E6%9F%A5%E9%9B%86%2F</url>
    <content type="text"><![CDATA[并查集并查集是一种树型数据结构，用于查找不相交的子集，并将他们合并在一起，简称并查集。并查集分为拆分、查找和合并三个操作。 并查集查找 pre数组记录所有结点的前驱结点，根节点的前驱结点是它自己 find函数先找到x的根节点 12345678int pre[1000];//1.int find(int x)//2.&#123; int r=x; while ( pre[r] != r )//3. r=pre[r]; return r ;&#125; 注释： 记录前驱结点 查找根节点 找到根节点 r 合并 join函数先找到两个变量的根节点 ​ 如果他们相同则说明两个变量在同一个集合中 ​ 如果不同则将其中一个根节点设置为另外一个根节点的前驱 123456void join(int x,int y)//1.&#123; int fx=find(x),fy=find(y); if(fx!=fy) pre[fx ]=fy;&#125; 注释： 判断x y是否连通，如果已经连通，就不用管了 如果不连通，就把它们所在的连通分支合并起。 并查集的优化路径压缩路径压缩是在寻找根结点的过程中，将子集中所有的点的前驱设置为根结点。 为什么要进行路径压缩呢？因为在并查集合并过程中，他有可能变成一个单链表，这样每次寻找根结点要遍历子集中所有的结点。进行路径压缩之后，每次寻找根结点只需访问他的父结点就可找到根结点。 优化后的find函数： 12345678910111213141516int pre[1000 ];int find(int x) &#123; int r=x; while ( pre[r] != r ) r=pre[r]; int i=x , j ; while( i != r )//1. &#123; j = pre[ i ];//2. pre[ i ]= r ;//3. i=j; &#125; return r ;&#125; 注释： 路径压缩 在改变上级之前用临时变量j记录下他的值 把上级改为根节点 按秩(Rank)合并按秩合并就是在合并过程中将元素所在深度小的集合合并到元素所在深度大的集合 为什么要按秩合并呢？因为如果将元素深度大的集合合并到小的集合，那么合并后的集合深度则等于较大的深度加一。如果将深度小的集合合并到深度大的集合，则合并后的集合深度不变。 优化后的join函数： 12345678910111213void join(int x, int y)&#123; int fx=find(x),fy=find(y); if(rank[fx]&gt;rank[fy])//1. pre[fy] = pre[fx];//2. else &#123; pre[fx] = fy; if(rank[fx]==rank[fy])//3. rank[fy]++; &#125;&#125; 注释： rank数组为当前结点秩的值 只需要比较根结点的rank值就够了 修改时也只用修改根结点的rank值 并查集的精简实现12345678910void init(int n) &#123; for(int i=1; i&lt;=n; i++) pre[i]=i; &#125;int find(int x) &#123; return pre[x]=x?x:pre[x]=get(pre[x]); &#125;//1.void join(int x, int y) &#123; pre[get(x)] = get[y]; &#125;void join(int x, int y)&#123;//2. pre[rank[find(x)&gt;rank[find(y)?find(y):find(x)] = pre[rank[find(x)&gt;rank[find(y)?find(x):find(y)]; if(rank[find(x)]==rank[find(y)]) rank[find(y)]++;&#125; 注释： 根结点的pre为0。 带秩合并，还没验证，不能确定对错。 参考： 维基百科：并查集 并查集详解——图文解说，简单易懂（转） 并查集笔记&amp;模板]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[可以评论了！！！]]></title>
    <url>%2F2018%2F11%2F02%2F%E5%8F%AF%E4%BB%A5%E8%AF%84%E8%AE%BA%E4%BA%86%EF%BC%81%EF%BC%81%EF%BC%81%2F</url>
    <content type="text"><![CDATA[来吐槽吧]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello Word!]]></title>
    <url>%2F2018%2F11%2F01%2FHello-Word%2F</url>
    <content type="text"><![CDATA[HELLO WORD!!!]]></content>
  </entry>
</search>
