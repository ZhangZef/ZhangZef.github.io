<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[kuangbin‰∏ìÈ¢ò‰∏Ä--ÁÆÄÂçïÊêúÁ¥¢]]></title>
    <url>%2F2019%2F09%2F19%2Fkuangbin%E4%B8%93%E9%A2%98%E4%B8%80-%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%2F</url>
    <content type="text"><![CDATA[kuangbin‰∏ìÈ¢ò‰∏ÄÁÆÄÂçïÊêúÁ¥¢tipsÔºöÂ§ßÂÆ∂ËØÑËÆ∫ÁöÑÊó∂ÂÄôÂÜô‰∏Ä‰∏ãÈÇÆÁÆ±ÂíåÊòµÁß∞ÂëÄÔºåÂ§¥ÂÉèÊòØÊ†πÊçÆÊòµÁß∞ÂíåÈÇÆÁÆ±ÈöèÊú∫ÁîüÊàêÁöÑüòÅ kuangbin‰∏ìÈ¢òÂêàÈõÜ ACMÊ≠£Á°ÆÂÖ•Èó®ÊñπÂºè‚Äî‚ÄîÊï∞Â≠¶lover È¢òÁõÆÂàóË°® POJ 1321 Ê£ãÁõòÈóÆÈ¢òAC: 2018-07-17 23:54:31 POJ 2251 Dungeon MasterAC: 2019-09-19 18:32:04 POJ 3278 Catch That Cow POJ 3279 Fliptile POJ 1426 Find The Multiple POJ 3126 Prime Path POJ 3087 Shuffle‚Äôm Up POJ 3414 Pots FZU 2150 Fire Game UVA 11624 Fire! POJ 3984 Ëø∑ÂÆ´ÈóÆÈ¢ò HDU 1241 Oil Deposits HDU 1495 ÈùûÂ∏∏ÂèØ‰πê HDU 2612 Find a way POJ1321 Ê£ãÁõòÈóÆÈ¢òÈ¢òÊÑèÂ∞±ÊòØÂú®Ê£ãÁõò‰∏äÊîæÊ£ãÂ≠êÔºåÊîæÁöÑÊó∂ÂÄô‰∏çËÉΩÂêåË°åÂêåÂàóÔºåÂíåÂÖ´ÁöáÂêéÈóÆÈ¢òÁ±ª‰ººÔºåÂè™‰∏çËøáÁ©∫ÁôΩÁöÑÂú∞Êñπ‰∏çËÉΩÊîæ„ÄÇËøôÊòØÊàëÂéªÂπ¥ÊöëÂÅáacmËÆ≠ÁªÉÊó∂ÂÜôÁöÑÔºåÁé∞Âú®Â∑≤ÁªèÂøò‰∫ÜÂΩìÊó∂ÂíãÂÜôÁöÑ‰∫ÜÔºåÁúãÁùÄËá™Â∑±WA‰∫ÜÂ•ΩÂ§öÂèëÔºåÂ§™Ëèú‰∫Ü„ÄÇ„ÄÇ„ÄÇdfsÊó∂ËÆ∞ÂæóÂ§çÂéü„ÄÇ È¢òËß£dfsÂêßÔºåÊ≤°‰ªÄ‰πàÂèØËØ¥ÁöÑÔºåÂÖ´ÁöáÂêéÊ®°ÊùøÈ¢ò„ÄÇÂ•ΩÁÉ¶ÂïäÔºåPOJ‰∏çËÉΩÁî®‰∏áËÉΩÂ§¥Êñá‰ª∂„ÄÇ„ÄÇ„ÄÇ ‰ª£Á†Å123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;iostream&gt;//#include &lt;bits/stdc++.h&gt;#include &lt;string.h&gt;typedef long long ll;const int INF = 1 &lt;&lt; 30;const int maxn = 1e5;using namespace std;int n, m, ans;char pan[10][10];bool vis[10];int cnt;void dfs(int l)&#123; if(cnt == m) &#123; ans++; return; &#125; else if(l&gt;=n) return; else &#123; for(int i=0; i&lt;n; i++) if(pan[l][i]=='#' &amp;&amp; !vis[i]) &#123; cnt++; vis[i]=1; dfs(l+1); vis[i]=0; cnt--; &#125; dfs(l+1); &#125; return;&#125;int main()&#123; //ios::sync_with_stdio(0), cin.tie(0); while(cin &gt;&gt;n &gt;&gt;m) &#123; if(n==-1 &amp;&amp; m==-1) break; memset(vis, 0, sizeof(vis)); for(int i=0; i&lt;n; i++) for(int j=0; j&lt;n; j++) cin &gt;&gt;pan[i][j]; ans = cnt = 0; dfs(0); cout &lt;&lt;ans &lt;&lt;endl; &#125; return 0;&#125; POJ2251 Dungeon MasterÈ¢òÊÑè‰∏Ä‰∏™3DËø∑ÂÆ´ÔºåÊÄªÂÖ±ÂÖ≠‰∏™ÊñπÂêëÔºå‰∏ä‰∏ãÂ∑¶Âè≥ÂâçÂêé„ÄÇÊúâÁöÑÂú∞Êñπ‰∏çËÉΩËµ∞ÊúâÁöÑËÉΩËµ∞ÔºåÁªôÂá∫Ëµ∑ÁÇπÁªàÁÇπÔºåÈóÆ‰Ω†ËÉΩ‰∏çËÉΩËµ∞Âà∞ÁªàÁÇπÔºåÂ¶ÇÊûúËÉΩÁöÑËØùÂ∫îËØ•ÊòØÊ±ÇÁî®Êó∂ÊúÄÁü≠ÁöÑÂêßÔºàÈ¢òÁõÆ‰∏≠Ê≤°ËØ¥Ôºå‰∏ÄÂºÄÂßãÁî®dfsWA‰∫ÜÔºåÂêéÊù•ÁúãÂà´‰∫∫ÈÉΩÁî®bfsÊâçÂèëÁé∞ÊòØ‰∏çÊòØË¶ÅÊ±ÇÊúÄÁü≠Ë∑ØÔºâ„ÄÇÊ≤°ÁßªÂä®‰∏ÄÊ¨°Ë¶ÅËä±Ë¥π‰∏ÄÂàÜÈíü„ÄÇ È¢òËß£bfsÔºå‰∏ÄÂºÄÂßãÁî®bfs‰∏ÄÁõ¥ÂÜÖÂ≠òË∂ÖÈôêÔºåÂø´ÁªôÊàëÈÉÅÈó∑Ê≠ª‰∫Ü„ÄÇ„ÄÇ„ÄÇË¶ÅÊääËµ∞ËøáÁöÑÁÇπÁî®#Â†µ‰∏äÔºåÈò≤Ê≠¢Â§ö‰ΩôÁöÑÁªìÁÇπÂÖ•ÈòüÂàó„ÄÇ ‰ª£Á†Å1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;queue&gt;#include &lt;string.h&gt;using namespace std;const int maxn = 31;struct node&#123; int x, y, z, step;&#125;;node make_node(int x, int y, int z, int step)&#123; node a; a.x = x, a.y = y, a.z = z, a.step=step; return a;&#125;int main()&#123; int l, r, c; char mp[maxn][maxn][maxn]; int dx[6]= &#123;1, -1, 0, 0, 0, 0&#125;; int dy[6]= &#123;0, 0, 1, -1, 0, 0&#125;; int dz[6]= &#123;0, 0, 0, 0, 1, -1&#125;; while (cin &gt;&gt;l &gt;&gt;r &gt;&gt;c &amp;&amp; l+r+c) &#123; int x, y, z; queue&lt;node&gt; q; for(int i=0; i&lt;l; i++) &#123; for(int j=0; j&lt;r; j++) for(int k=0; k&lt;c; k++) &#123; cin &gt;&gt;mp[i][j][k]; if(mp[i][j][k]=='S') q.push(make_node(i, j, k, 0)); if(mp[i][j][k]=='E') &#123; x = i; y = j; z = k; &#125; &#125; getchar(); &#125; bool flag = false; while(!q.empty()) &#123; node a = q.front(); q.pop(); if(a.x==x &amp;&amp; a.y==y &amp;&amp; a.z==z) &#123; flag = true; cout &lt;&lt;"Escaped in "&lt;&lt;a.step &lt;&lt;" minute(s)." &lt;&lt;endl; break; &#125; for (int i = 0; i &lt; 6; ++i) &#123; if(mp[a.x+dx[i]][a.y+dy[i]][a.z+dz[i]]!='#') if(a.x+dx[i]&gt;=0 &amp;&amp; a.x+dx[i]&lt;l &amp;&amp; a.y+dy[i]&gt;=0 &amp;&amp; a.y+dy[i]&lt;r &amp;&amp; a.z+dz[i]&gt;=0 &amp;&amp; a.z+dz[i]&lt;c) &#123; q.push(make_node(a.x+dx[i], a.y+dy[i], a.z+dz[i], a.step+1)); mp[a.x+dx[i]][a.y+dy[i]][a.z+dz[i]] = '#'; &#125; &#125; &#125; if(flag) continue; else cout &lt;&lt;"Trapped!" &lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>Âà∑È¢ò</category>
      </categories>
      <tags>
        <tag>ÊêúÁ¥¢</tag>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tarjanÊ±ÇÊúâÂêëÂõæÁöÑÂº∫ËøûÈÄöÂàÜÈáè]]></title>
    <url>%2F2019%2F09%2F02%2Ftarjan%E6%B1%82%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F%2F</url>
    <content type="text"><![CDATA[tarjanÊ±ÇÊúâÂêëÂõæÁöÑÂº∫ËøûÈÄöÂàÜÈáètarjanÂà∞Â∫ïÊòØÂøµ‚ÄúÂ°îËøõ‚ÄùËøòÊòØ‚ÄúÂ°îÊâ¨‚Äù„ÄÇÂ•ΩÂÉèÂ§ßÂ§öÊï∞‰∫∫ÈÉΩÂøµ‚ÄúÂ°îËøõ‚ÄùÔºå‰ΩÜÊòØËã±ËØ≠Â•ΩÂÉèÊòØÂøµ‚ÄúÂ°îÊâ¨‚Äù„ÄÇËÉ°ÊâØÁªìÊùü„ÄÇ„ÄÇ„ÄÇ Ëøô‰∏™tarjanÁÆóÊ≥ïÊ±ÇÁöÑÊòØÊúâÂêëÂõæ‰∏≠ÁöÑÂº∫ËøûÈÄöÂàÜÈáèÔºåÂπ∂Â∞Ü‰ªñ‰ª¨ÂêàÂπ∂„ÄÇ Âº∫ËøûÈÄöÂàÜÈáèÔºàÂ¶ÇÊûú‰ºöÂèØ‰ª•Áõ¥Êé•ÁúãtarjanÈÉ®ÂàÜÔºâÈÇ£‰ªÄ‰πàÊòØÂº∫ËøûÈÄöÂàÜÈáèÂë¢ÔºüÂº∫ËøûÈÄöÂòõÔºåÂ∞±ÊòØÂõæ‰∏≠‰ªªÊÑè‰∏§ÁÇπËÉΩÁõ∏‰∫íÂà∞Ëææ„ÄÇÈÇ£Âº∫ËøûÈÄöÂàÜÈáèÂ∞±ÊòØ‰∏Ä‰∏™Âõæ‰∏≠ÁöÑÂº∫ËøûÈÄöÂ≠êÂõæ„ÄÇ ÁéØÊòØÊúÄÁÆÄÂçïÁöÑÂº∫ËøûÈÄöÂàÜÈáèÔºö ÈÇ£‰Ω†Â¶ÇÊûú‰ªé1Âá∫ÂèëÔºåÂè™Ë¶ÅËΩ¨‰∏ÄÂúàÂ∞±ËÉΩÁªèËøáÊâÄÊúâÁÇπ„ÄÇ Âº∫ËøûÈÄöÂàÜÈáè‰∏çÁ≠â‰∫éÁéØÔºåËøòÊúâ‰∏Ä‰∫õÂ§çÊùÇÁöÑÂº∫ËøûÈÄöÂàÜÈáèÔºå‰æãÂ¶ÇÂÆåÂÖ®ÂõæÔºö ÂæàÊòéÊòæËÉΩÁúãÂá∫‰ªéÂõæ‰∏≠‰∏ÄÁÇπÂá∫ÂèëÔºåÂèØÂà∞ËææÂÖ∂‰ªñ‰ªªÊÑè‰∏Ä‰∏™ÁÇπ„ÄÇ tarjanÁÆóÊ≥ïÂÖà‰∏äÊó∂Èó¥Â§çÊùÇÂ∫¶ÔºöO(N+M) ÔºàÂÖ∂‰∏≠NÂíåMÂàÜÂà´‰∏∫ÁÇπÊï∞ÂíåËæπÊï∞Ôºâ tarjanÁÆóÊ≥ïÊòØÈÄöËøáÂØπÂõæÁöÑdfsÊù•ÊâæÂá∫ÂÖ∂‰∏≠ÁöÑÂº∫ËøûÈÄöÂàÜÈáèÔºåÂπ∂ÂàÜÁ±ª„ÄÇÔºàÈúÄÊéåÊè°dfsÁöÑÊÄùÊÉ≥Âπ∂‰∏îËÉΩÁÜüÁªÉËøêÁî®Ôºâ dfnÊï∞ÁªÑÂíålowÊï∞ÁªÑËÆ≤Ëß£ËøôÈáåÁªôÂá∫tarjanÁÆóÊ≥ï‰∏≠‰∏§‰∏™ÈáçË¶ÅÊï∞ÁªÑÁöÑÂÆö‰πâÔºö ‚Äã dfn[u]ÔºöË°®Á§∫ÂΩìÂâçÁªìÁÇπiÂú®dfsÁÆóÊ≥ï‰∏≠Á¨¨Âá†‰∏™Ë¢´ËÆøÈóÆÁöÑÁöÑÁÇπ„ÄÇ ‚Äã low[u]ÔºöË°®Á§∫ÂΩìÂâçÁªìÁÇπiËÉΩÂõûÊ∫ØÂà∞ÁöÑÊúÄÂ∞èdfsÂ∫èÁªìÁÇπÔºådfsÂ∫èÂç≥dfn[u]ÁöÑÂÄº„ÄÇ Ôºà6-&gt;1ÁöÑÁÆ≠Â§¥ÁîªÂèç‰∫ÜÔºåÂ∫îËØ•Êó∂1-&gt;6Ôºâ ÂΩì‰ªéÁªìÁÇπ1ÂºÄÂßãdfsÊó∂ÔºåÂÅáËÆæ‰ºòÂÖàÂêë‰∏ãËÆøÈóÆÔºödfn[1] = 1; dfn[6] = 2;Âõ†‰∏∫Á¨¨‰∏Ä‰∏™ËÆøÈóÆÁöÑÊó∂ÁªìÁÇπ1ÔºåÊâÄ‰ª•ÂÆÉÁöÑdfsÂ∫èÊòØ1ÔºåÁ¨¨‰∫å‰∏™ËÆøÈóÆÁöÑÊòØÁªìÁÇπ6ÔºåÊâÄ‰ª•ÂÆÉÁöÑdfsÂ∫èÊó∂2„ÄÇËÆøÈóÆÂÆåÁªìÁÇπ6ÂèëÁé∞Ê≤°ÊúâË∑Ø‰∫ÜÔºåÂàôÂºÄÂßãËÆøÈóÆÁªìÁÇπ1ÁöÑ‰∏ã‰∏ÄÊù°Âá∫Ëæπ„ÄÇ ÂºÄÂßãËÆøÈóÆÁªìÁÇπ2ÔºåÂàöÂàöËÆøÈóÆÁöÑÁªìÁÇπ6ÊòØÁ¨¨‰∫å‰∏™ËÆøÈóÆÁöÑÁªìÁÇπÔºåÊâÄ‰ª•ÁªìÁÇπ2ÊòØÁ¨¨‰∏â‰∏™ËÆøÈóÆÁöÑÁªìÁÇπÔºåÂç≥ÂÆÉÁöÑdfsÂ∫è‰∏∫3Ôºödfn[2] = 3; dfn[5] = 4; dfn[4] = 5; dfn[3] = 6;Êàë‰ª¨È°∫ÁùÄÁªìÁÇπ2‰æùÊ¨°ËÆøÈóÆ‰∏ãÂéªÔºåÂèëÁé∞Âè™Êúâ‰∏ÄÊù°Ë∑ØÔºåÁïÖÈÄöÊó†Èòª„ÄÇ ÂΩìËÆøÈóÆÂà∞ÁªìÁÇπ‰∏âÁöÑÊó∂ÂÄôÊàë‰ª¨ÂèëÁé∞ÁªìÁÇπ3Êúâ‰∏ÄÊù°ÈÄöÂêëÁªìÁÇπ2ÁöÑË∑ØÔºåÂàôÊ≠§Êó∂Êàë‰ª¨Áß∞ÁªìÁÇπ3ÂõûÊ∫ØÂà∞ÁªìÁÇπ2„ÄÇÊàë‰ª¨ËøòÂèëÁé∞dfn[2]&lt;dfn[3]ÔºåÂç≥ÁªìÁÇπ2Âú®dfs‰∏≠ÊØîÁªìÁÇπ3ÂÖàË¢´ËÆøÈóÆ„ÄÇÊ≠§Êó∂Êàë‰ª¨Âú®dfsÂõûÊ∫ØÁöÑËøáÁ®ã‰∏≠‰ª§Ôºölow[3] = dfn[2]; low[4] = dfn[2]; low[5] = dfn[2];Âç≥‰ª§ÂõûÊ∫ØË∑Ø‰∏äÁöÑÊâÄÊúâÁÇπÁöÑlowÊï∞ÁªÑÈÉΩËµãÂÄº‰∏∫ÁªìÁÇπ2ÁöÑdfsÂ∫è„ÄÇ Áî±Ê≠§Êàë‰ª¨ÁªèÂéÜ‰∫Ü‰∏ÄÈÅçtarjanÁöÑÁÆÄÂåñÊ≠•È™§ÔºåÊàë‰ª¨ËÉΩÂèëÁé∞lowÊï∞ÁªÑÁöÑÂèñÂÄº‰∏∫Ôºö 12345low[u] = min( dfn[u],//1. dfn[v],//2. low[v]//3.) lowÊï∞ÁªÑÂàùÂßãÂåñÊó∂‰∏∫ÂΩìÂâçÁªìÁÇπÁöÑdfsÂ∫èÔºåÂç≥low[u] = dfn[u]; ËøôÈáåÁöÑvÊòØËæπÔºàu, vÔºâ‰∏≠ÁöÑvÔºåÂíå‰∏äÂõæ‰∏≠ËæπÔºà3, 2ÔºâÁ±ª‰ºº„ÄÇÂΩìÂèëÁé∞ËÉΩÂõûÊ∫ØÂà∞ÁöÑÁªìÁÇπdfsÂ∫èÂ∞è‰∫éËá™Ë∫´dfsÂ∫èÊó∂Êõ¥Êñ∞lowÁöÑÂÄº ËøôÈáåÁöÑÔºàu, vÔºâÂíå‰∏äÂõæ‰∏≠ÁöÑÔºà4, 3ÔºâÁ±ª‰ºº„ÄÇdfsÂõûÊ∫ØËøáÁ®ã‰∏≠Êó∂ÂèëÁé∞ÂâçÈù¢ÁªìÁÇπÁöÑlowÂÄºÂ∞è‰∫éËá™Ë∫´ÁöÑlowÂÄºÊó∂ÔºåÊõ¥Êñ∞Ëá™Ë∫´lowÂÄº ‰ªéÂõæ‰∏≠ÂèØÁúãÂá∫2Ôºå 5Ôºå 4Ôºå 3Âõõ‰∏™ÁªìÁÇπ‰∏∫‰∏Ä‰∏™ÁéØÔºåÁéØÊòØÊúÄÁÆÄÂçïÁöÑÂº∫ËøûÈÄöÂàÜÈáèÔºåÊâÄ‰ª•2Ôºå 5Ôºå 4Ôºå 3‰∏∫‰∏Ä‰∏™Âº∫ËøûÈÄöÂàÜÈáè„ÄÇËÄåÂçïÁã¨‰∏Ä‰∏™ÁªìÁÇπÊàë‰ª¨‰πüÂ∞Ü‰ªñÁúãÊàê‰∏Ä‰∏™Âº∫ËøûÈÄöÂàÜÈáèÔºåÂõ†Ê≠§Âõæ‰∏≠Êúâ‰∏â‰∏™Âº∫ËøûÈÄöÂàÜÈáèÔºöÔºà1ÔºâÔºà6ÔºâÔºà2Ôºå4Ôºå5Ôºå3Ôºâ ‰ªé‰∏≠Êàë‰ª¨ËßÇÂØüÂá∫1Ôºå 6Ôºå 2ÁöÑdfnÂÄºÂíålowÂÄºÁõ∏ÂêåÔºåÊâÄ‰ª•ÂΩìdfn[u]==low[u]Êó∂ÔºåÂÆÉÂ∞±ÊòØ‰∏Ä‰∏™Âº∫ËøûÈÄöÂàÜÈáèÂú®dfsÊ†ë‰∏≠ÁöÑËµ∑ÂßãËäÇÁÇπ tarjanÁÆóÊ≥ï‰º™‰ª£Á†ÅËÆ≤Ëß£12345678910111213141516tarjan(u)&#123; DFN[u]=Low[u]=++Index//1. Stack.push(u)//2. for each (u, v) in E//3. if (v is not visted)//4. tarjan(v)//dfs Low[u] = min(Low[u], Low[v]) else if (v in S)//5. Low[u] = min(Low[u], DFN[v]) if (DFN[u] == Low[u])//6. repeat v = S.pop//7. print v until (u== v)&#125; ‰∏∫ÁªìÁÇπuÂàùÂßãÂåñdfnÂíålowÁöÑÂÄº‰∏∫dfsÊó∂ÁöÑËÆøÈóÆÈ°∫Â∫èÔºåindex‰∏∫ÂÖ®Â±ÄÂèòÈáè Â∞ÜÁªìÁÇπuÂéãÂÖ•Ê†à‰∏≠ ÈÅçÂéÜÁªìÁÇπuÁöÑÊØè‰∏ÄÊù°Ëæπ Â¶ÇÊûúÊ≤°ËÆøÈóÆËøá Â¶ÇÊûúvÂú®Ê†à‰∏≠ ‰∏äÈù¢ËÆ≤ËøáÔºåÂΩìdfn[u]==low[u]Êó∂ÔºåËØ•ËäÇÁÇπ‰∏∫Âº∫ËøûÈÄöÂàÜÈáèÊ†πÁªìÁÇπ Â∞ÜÊ†àÈ°∂ÂÖÉÁ¥†Âá∫Ê†àÔºåÁõ¥Âà∞Ê†àÈ°∂ÂÖÉÁ¥†‰∏∫uÊó∂ÔºåuÂá∫Ê†àÔºåÂàôÊ≠§Ê¨°Âá∫Ê†àÁöÑ‰∏ÄÁ≥ªÂàóÂÖÉÁ¥†‰∏∫‰∏Ä‰∏™Âº∫ËøûÈÄöÂàÜÈáè Ôºà6-&gt;1ÁöÑÁÆ≠Â§¥ÁîªÂèç‰∫ÜÔºåÂ∫îËØ•Êó∂1-&gt;6Ôºâ ‰ªéÁªìÁÇπ1ÂºÄÂßãÔºödfn[1] = low[1] = 1; ÁªìÁÇπ1ËøõÊ†à 1-&gt;6Ôºödfn[6] = low[6] = 2; ÁªìÁÇπ6ËøõÊ†àÁªìÁÇπ6Ê≤°ÊúâÂá∫ËæπÔºåÊó†Ê≥ïdfsÔºåÂèëÁé∞dfn[6]==low[6]ÔºåÊ†àÈ°∂ÂÖÉÁ¥†Âá∫Ê†àÔºåÊ†àÈ°∂ÂÖÉÁ¥†Ê≠£Â•ΩÊó∂ÁªìÁÇπ6ÔºåÊó†ÈúÄÁªßÁª≠Âá∫Ê†àÔºåÂàôÁªìÁÇπ6Ëá™Â∑±‰∏∫‰∏Ä‰∏™ÂçïÁã¨ÁöÑÂº∫ËÅîÈÄöÂàÜÈáè„ÄÇ 1-&gt;2Ôºödfn[2] = low[2] = 3ÔºõÁªìÁÇπ2ËøõÊ†àÁªìÁÇπ2ÊúâÂá∫Ëæπ‰∏î‰∏∫ËÆøÈóÆÔºåÂºÄÂßãdfs„ÄÇ 2-&gt;5Ôºödfn[5] = low[5] = 4ÔºõÁªìÁÇπ5ËøõÊ†àÁªìÁÇπ5ÊúâÂá∫Ëæπ‰∏îÊú™ËÆøÈóÆÔºåÁªßÁª≠dfs 5-&gt;4Ôºödfn[4] = low[4] = 5ÔºõÁªìÁÇπ4ËøõÊ†àÁªìÁÇπ4ÊúâÊú™ËÆøÈóÆÁöÑÂá∫ËæπÔºåÁªßÁª≠dfs 4-&gt;3Ôºödfn[3] = low[3] = 6ÔºõÁªìÁÇπ3ËøõÊ†àÁªìÁÇπ3ÊúâÂá∫ËæπÔºå‰ΩÜÁªìÁÇπ2Â∑≤ÁªèËÆøÈóÆËøá‰∫ÜÔºå‰∏îÁªìÁÇπ2Âú®Ê†àÈáåÈù¢ÔºåÊâÄ‰ª•3ÂèØ‰ª•ÂõûÊ∫ØÂà∞ÁªìÁÇπ2ÔºåÂèØÁü•dfn[2]=3, low[3]=6; ÊâÄ‰ª•low[3] = dfn[2] = 3; Ê≠§Êó∂dfn[3]!=low[3]ÔºåÊâÄ‰ª•‰∏çÂá∫Ê†à„ÄÇ ÂΩìdfsÂõûÊ∫ØÂà∞5-&gt;4ÁöÑÊó∂ÂÄôÔºåÂèëÁé∞(low[4]=5) &gt; (low[3]=3)ÔºåÊâÄ‰ª•low[4] = 3; ‰æùÊ≠§Á±ªÊé®low[5]=3;‰∏îÁõ¥Âà∞dfsÂõûÊ∫ØÂà∞ÁªìÁÇπ2ÁöÑÊó∂ÂÄôÊâç‰ºöËøõË°åÂá∫Ê†àÊìç‰ΩúÔºåÂõ†‰∏∫2Êó∂Âº∫ËøûÈÄöÂàÜÈáèÁöÑÊ†πËäÇÁÇπ„ÄÇ ‰∏çÈöæÁúãÂá∫Ôºå‰æùÊ¨°Âá∫Ê†àÁöÑÊó∂3„ÄÅ4„ÄÅ5„ÄÅ2ÔºåËøôÂõõ‰∏™ÁªìÁÇπ‰∏∫‰∏Ä‰∏™Âº∫ËøûÈÄöÂàÜÈáè ÊúÄÂêédfsÂõûÊ∫ØÂà∞ÊúÄÂºÄÂßãÁöÑÂÖ•Âè£ÔºåÁªìÁÇπ1Âá∫Ê†à Áî±Ê≠§ÁöÑÂº∫ËøûÈÄöÂàÜÈáèÊúâ3‰∏™ÔºåÂàÜÂà´ÊòØÔºöÔºà1Ôºâ„ÄÅÔºà6Ôºâ„ÄÅÔºà3Ôºå4Ôºå5Ôºå2Ôºâ tarjanÁÆóÊ≥ïÊ®°ÊùøÈìæÂºèÂâçÂêëÊòüÊ®°Êùø1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859struct Edge&#123; int net; int to; int w;&#125;edge[maxn];int head[maxn], cnt=0;//1.void add_dege(int u, int v, int w)&#123; edge[cnt].to = v; edge[cnt].net = head[u]; edge[cnt].w = w; head[u] = cnt++;&#125;int dfn[maxn], low[maxn], belong[maxn];//2.int index=0, Bcnt;//3.bool instack[maxn];stack&lt;int&gt; s;void tarjan(int u)&#123; dfn[u] = low[u] = ++index; s.push(u);instack[u] = true; for(int i=head[u]; i!=-1; i=edge[i].net) &#123; int v = edge[i].to; if(!dfn[v]) &#123; tarjan(v); low[u] = min(low[v], low[u]); &#125; else if(instack[v] &amp;&amp; dfn[v]&lt;low[u]) low[u] = dfn[v]; &#125; if(dfn[u]==low[u]) &#123; Bcnt++;int v; do &#123; v = s.top(); s.pop(); belong[v] = Bcnt; instack[v] = false; &#125;while(v!=u); &#125;&#125;void solve()&#123; Bcnt = index = 0; memset(dfn, 0, sizeof dfn); while(!s.empty())s.pop(); for(int i=0; i&lt;n; i++)//4. if(!dfn[i])//5. tarjan(i);&#125; head[u]ËÆ∞ÂæóÂàùÂßãÂåñÔºåÂàùÂßãÂåñ‰∏∫-1„ÄÇ belongÊï∞ÁªÑÂÄºÁõ∏ÂêåÁöÑÁªìÁÇπÂ±û‰∫éÂêå‰∏Ä‰∏™Âº∫ËøûÈÄöÂàÜÈáè„ÄÇ BcntÁî®‰∫éÂàíÂàÜÂº∫ËøûÈÄöÂàÜÈáè Ë¶Å‰ªéÊØè‰∏™ÁªìÁÇπÈÉΩËøõË°å‰∏ÄÊ¨°tarjanÔºåÂê¶ÂàôÊúâ‰∫õ‰∏çÂèØËææÁªìÁÇπÂ∞±Êó†Ê≥ïÂàíÂàÜÂº∫ËÅîÈÄöÂàÜÈáèÔºån‰∏∫ÁªìÁÇπÊï∞ dfnÊï∞ÁªÑÂàùÂßãÂåñ‰∏∫0ÔºåÂΩìdfn[u]ÁöÑÂÄº‰∏ç‰∏∫0ÁöÑÊó∂ÂÄôÂàôËØ¥ÊòéË¢´ËÆøÈóÆËøá‰∫Ü ÈÇªÊé•Áü©ÈòµÊ®°Êùø12345678910111213141516171819202122232425262728293031323334353637383940414243444546int mp[maxn][maxn];//1.int dfn[maxn], low[maxn], belong[maxn];int index=0, Bcnt;bool instack[maxn];stack&lt;int&gt; s;void tarjan(int u)&#123; dfn[u] = low[u] = ++index; s.push(u);instack[u] = true; for(int v=0; v&lt;n; v++)//2. &#123; if(mp[u][v]==-1) continue; if(!dfn[v]) &#123; tarjan(v); low[u] = min(low[v], low[u]); &#125; else if(instack[v] &amp;&amp; dfn[v]&lt;low[u]) low[u] = dfn[v]; &#125; if(dfn[u]==low[u]) &#123; Bcnt++; int v; do &#123; v = s.top(); s.pop(); belong[v] = Bcnt; instack[v] = false; &#125;while(v!=u); &#125;&#125;void solve()&#123; Bcnt = index = 0; memset(dfn, 0, sizeof dfn); while(!s.empty())s.pop(); for(int i=0; i&lt;n; i++) if(!dfn[i]) tarjan(i);&#125; ÈÇªÊé•Áü©ÈòµÔºåÂΩìÂÄº‰∏∫-1Êó∂Ë°®Á§∫‰∏çËøûÈÄö n‰∏∫ÁªìÁÇπÊï∞ ÈÇªÊé•Ë°®Ê®°Êùø1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253vector&lt;pair&lt;int, int&gt; &gt; G[maxn];//1.int dfn[maxn], low[maxn], belong[maxn];int index=0, Bcnt;bool instack[maxn];stack&lt;int&gt; s;void add_eage(int u, int v, int w)&#123; G[u].push_back(make_pair(w, v)); //G[v].push_back(make_pair(w, u));&#125;void tarjan(int u)&#123; dfn[u] = low[u] = ++index; s.push(u);instack[u] = true; for(int i=0; i&lt;G[u].size(); i++) &#123; int v = G[u][i].second; if(!dfn[v]) &#123; tarjan(v); low[u] = min(low[v], low[u]); &#125; else if(instack[v] &amp;&amp; dfn[v]&lt;low[u]) low[u] = dfn[v]; &#125; if(dfn[u]==low[u]) &#123; Bcnt++; int v; do &#123; v = s.top(); s.pop(); belong[v] = Bcnt; instack[v] = false; &#125;while(v!=u); &#125;&#125;void solve()&#123; for(int i=0; i&lt;n; i++)//2. G[i].clear(); Bcnt = index = 0; memset(dfn, 0, sizeof dfn); while(!s.empty())s.pop(); for(int i=0; i&lt;n; i++) if(!dfn[i]) tarjan(i);&#125; Áî®vectorÂíåpairÂÆûÁé∞ÈÇªÊé•Ë°®ÔºåpairÁöÑfirst‰∏∫Ë∑ØÂæÑÊùÉÈáçÔºåpairÁöÑsecond‰∏∫Âè¶‰∏ÄÁ´ØÁªìÁÇπ ÂàùÂßãÂåñÈÇªÊé•Ë°® ‰æãÈ¢òHDU1269È¢òÊÑèÔºöÁªô‰Ω†‰∏Ä‰∏™ÂõæÔºåËÆ©‰Ω†Âà§Êñ≠Ëøô‰∏™ÂõæÊòØ‰∏çÊòØ‰∏ÄÊï¥‰∏™Âº∫ËøûÈÄöÂàÜÈáè È¢òËß£ÔºöÊ≤°‰ªÄ‰πàÂèØËØ¥ÁöÑÔºåtarjanÊ®°ÊùøÈ¢ò„ÄÇÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØÊúâÁöÑËÉΩÁªôÁöÑÂõæÂè™ÊúâÁÇπÊ≤°ÊúâËæπÔºåÊâÄ‰ª•ÁªìÊùüÊù°‰ª∂ÈúÄË¶ÅÊó∂mÂíånÂêåÊó∂‰∏∫0Êó∂ÊâçË°å„ÄÇ‰ª£Á†ÅÂ¶Ç‰∏ãÔºö 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include &lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1e5+10;struct Edge&#123; int to, net;&#125;edge[maxn];int head[maxn], cnt=0;int dfn[maxn], low[maxn], index, Bcnt, n, m, belong[maxn];bool instack[maxn];stack&lt;int&gt; s;void addedge(int u, int v)&#123; edge[cnt].to = v; edge[cnt].net = head[u]; head[u] = cnt++;&#125;void init()&#123; cnt = index = Bcnt = 0; memset(dfn, 0, sizeof dfn); memset(low, 0, sizeof low); memset(head, -1, sizeof head); memset(instack, 0, sizeof instack); memset(belong, 0, sizeof belong); while(!s.empty())s.pop();&#125;void tarjan(int u)&#123; dfn[u] = low[u] = ++index; instack[u] = true; s.push(u); int v; for(int i = head[u]; i!=-1; i=edge[i].net) &#123; v = edge[i].to; if(!dfn[v]) &#123; tarjan(v); if(low[v]&lt;low[u]) low[u] = low[v]; &#125; else if(instack[v] &amp;&amp; dfn[v]&lt;low[u]) low[u] = dfn[v]; &#125; if(dfn[u]==low[u]) &#123; Bcnt++; do &#123; v = s.top(); s.pop(); belong[v] = Bcnt; instack[v] = false; &#125;while(u!=v); &#125;&#125;int main()&#123; while(cin &gt;&gt;n &gt;&gt;m &amp;&amp; n+m) &#123; init(); for(int i=0; i&lt;m; i++) &#123; int u, v; cin &gt;&gt;u &gt;&gt;v; addedge(u, v); &#125; for(int i=1; i&lt;=n; i++) if(!dfn[i]) tarjan(i); int flag = belong[1]; bool f = true; for(int i=1; i&lt;=n; i++) if(belong[i]!=flag) f = false; if(!f) cout &lt;&lt;"No" &lt;&lt;endl; else cout &lt;&lt;"Yes" &lt;&lt;endl; &#125; return 0;&#125; HDU1827È¢òÊÑèÔºöÁªô‰Ω†‰∏Ä‰∫õ‰∫∫ÁöÑËÅîÁ≥ªÊñπÂºèÔºå‰ΩÜÊòØËøôÁßçËÅîÁ≥ªÊñπÂºèÊó∂ÊúâÂêëÁöÑÔºåÂç≥xÂèØ‰ª•ËÅîÁ≥ªy‰∏ç‰ª£Ë°®yÂèØ‰ª•ËÅîÁ≥ªÂà∞xÔºåÂÖ∂ÂÆûÂ∞±ÊòØÊúâÂêëÂõæ„ÄÇ‰πüÁªôÂá∫‰Ω†ËÅîÁ≥ªÊØè‰∏™‰∫∫ÁöÑËä±Ë¥πÔºåÂ¶ÇÊûúÂèØ‰ª•ËÆ©Âà´‰∫∫Â∏ÆÂøôËÅîÁ≥ªÔºåÂ∞±ÂèØ‰ª•‰∏çÈúÄË¶ÅËä±Ë¥πËØùË¥π„ÄÇÊ±ÇÊúÄÂ∞ëÈúÄË¶ÅËÅîÁ≥ªÂ§öÂ∞ë‰∫∫ÂíåËä±Ë¥πÂ§öÂ∞ëËØùË¥π„ÄÇ È¢òËß£ÔºöËøôÈÅìÈ¢òÊ≤°ÊúâÈÇ£‰πàÁõ¥Êé•Ôºå‰ΩÜÊòØ‰πüËÉΩÁúãÂá∫ÂíåÂº∫ËøûÈÄöÂàÜÈáèÊúâÂÖ≥„ÄÇËøôÈÅìÈ¢òË¶ÅÊ±ÇÁöÑÊòØÊ≤°ÊúâÂÖ•ËæπÁöÑÂº∫ËøûÈÄöÂàÜÈáèÁöÑ‰∏™Êï∞ÔºåÂπ∂‰∏îÊ±ÇÂá∫Ëøô‰∫õÊ≤°ÊúâÂÖ•ËæπÁöÑÂº∫ËÅîÈÄöÂàÜÈáè‰∏≠Ëä±Ë¥πÊúÄÂ∞èÁöÑ‰∫∫„ÄÇ‰∏∫‰ªÄ‰πàÊòØÊ≤°ÊúâÂÖ•ËæπÁöÑÂº∫ËøûÈÄöÂàÜÈáèËÄå‰∏çÊòØÂº∫ËøûÈÄöÂàÜÈáèÔºåÂõ†‰∏∫ÊúâÂ¶ÇÂÖ•ËæπÁöÑÂº∫ËÅîÈÄöÂàÜÈáèÂèØ‰ª•Ë¢´ÂÖ∂‰ªñ‰∫∫ÈÄöÁü•Âà∞ÔºåÂ∞±‰∏çÈúÄË¶Å‰Ω†ÂÜç‰∫≤Ëá™ÈÄöÁü•‰∫Ü„ÄÇÔºà‰∏ÄÂºÄÂßãÊàëÁêÜËß£ÊàêÂº∫ËøûÈÄöÂàÜÈáèÁöÑ‰∏™Êï∞‰∫Ü(&gt;_&lt;) ÔºâËøôÈ¢òË¶ÅÁî®scnafÂíåprintfÔºå‰∏çËÉΩÁî®cinÂíåcoutÔºåÊï∞ÊçÆÈáèÂ§ßÔºå‰ºöË∂ÖÊó∂„ÄÇ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113#include &lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1e4+10;const int INF = 1&lt;&lt;30;struct Edge&#123; int to, net;&#125; edge[maxn];int head[maxn], cnt=0;int dfn[maxn], low[maxn], index, Bcnt, n, m, belong[maxn], fee[maxn], cost[maxn], ans;bool instack[maxn], in[maxn];//1.stack&lt;int&gt; s;void addedge(int u, int v)&#123; edge[cnt].to = v; edge[cnt].net = head[u]; head[u] = cnt++;&#125;void init()&#123; cnt = index = ans = Bcnt = 0; memset(dfn, 0, sizeof dfn); memset(low, 0, sizeof low); memset(head, -1, sizeof head); memset(instack, 0, sizeof instack); memset(belong, 0, sizeof belong); memset(in, 0, sizeof in); for(int i=0; i&lt;maxn; i++) cost[i]=INF; memset(fee, 0, sizeof fee); while(!s.empty()) s.pop();&#125;void tarjan(int u)&#123; dfn[u] = low[u] = ++index; instack[u] = true; s.push(u); int v; for(int i = head[u]; i!=-1; i=edge[i].net) &#123; v = edge[i].to; if(!dfn[v]) &#123; tarjan(v); if(low[v]&lt;low[u]) low[u] = low[v]; &#125; else if(instack[v] &amp;&amp; dfn[v]&lt;low[u]) low[u] = dfn[v]; &#125; if(dfn[u]==low[u]) &#123; Bcnt++; do &#123; v = s.top(); s.pop(); belong[v] = Bcnt; instack[v] = false; &#125; while(u!=v); &#125;&#125;int main()&#123; while(scanf("%d%d", &amp;n, &amp;m) != EOF) &#123; init(); for(int i=1; i&lt;=n; i++) scanf("%d", &amp;fee[i]); for(int i=0; i&lt;m; i++) &#123; int u, v; scanf("%d%d", &amp;u, &amp;v); addedge(u, v); &#125; for(int i=1; i&lt;=n; i++) if(!dfn[i]) tarjan(i); int cnt=Bcnt; for(int i=1; i&lt;=n; i++)//2. for(int j=head[i]; j!=-1; j=edge[j].net) if(belong[i]!=belong[edge[j].to] &amp;&amp; !in[belong[edge[j].to]]) &#123; in[belong[edge[j].to]] = true; cnt--; &#125; for(int i=1; i&lt;=n; i++)//3. if(!in[belong[i]]) cost[belong[i]] = min(cost[belong[i]], fee[i]); for(int i=1; i&lt;=Bcnt; i++) if(!in[i]) ans+=cost[i]; printf("%d %d\n", cnt, ans); &#125; return 0;&#125; inÊï∞ÁªÑË°®Á§∫ËØ•Âº∫ËøûÈÄöÂàÜÈáèÊòØÂê¶ÊúâÂÖ•ËæπÔºå‰∏∫trueÂàôÊúâÔºåfalseÂàôÊ≤°Êúâ„ÄÇ Ëøô‰∏™forÂæ™ÁéØÊ±ÇÂá∫ÊúâÂÖ•ËæπÁöÑÂº∫ËøûÈÄöÂàÜÈáèÔºåÂç≥ÁúãÁúãÊØè‰∏™ÁÇπÁöÑÂÖ•ËæπÊòØÂê¶ÂíåËá™Â∑±Âú®Âêå‰∏Ä‰∏™Âº∫ËøûÈÄöÂàÜÈáè‰∏≠Âç≥ÂèØ„ÄÇcnt‰∏∫Ê≤°ÊúâÂÖ•ËæπÁöÑ‰∏™Êï∞„ÄÇ Ê±ÇÂá∫Ê≤°ÊúâÂÖ•ËæπÁöÑÂº∫ËøûÈÄöÂàÜÈáè‰∏≠ÁöÑÊúÄÂ∞èËä±Ë¥πÔºåcost[i]‰ª£Ë°®Á¨¨i‰∏™Âº∫ËøûÈÄöÂàÜÈáèÁöÑËä±Ë¥π ÂèÇËÄÉÔºö BYVoidÊúâÂêëÂõæÂº∫ËøûÈÄöÂàÜÈáèÁöÑtarjanÁÆóÊ≥ï]]></content>
      <categories>
        <category>ÁÆóÊ≥ï</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>ÂõæËÆ∫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Â∑ÆÂàÜÁ∫¶Êùü]]></title>
    <url>%2F2019%2F08%2F01%2F%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%2F</url>
    <content type="text"><![CDATA[Â∑ÆÂàÜÁ∫¶ÊùüÂ∑ÆÂàÜÁ∫¶ÊùüÁ≥ªÁªüÊòØÊ±ÇËß£‰∏ÄÁªÑÁâπÊÆäÁöÑ‰∏çÁ≠âÂºèÁªÑÁöÑÊñπÊ≥ï„ÄÇ Â∑ÆÂàÜÁ∫¶Êùü‰∏æ‰æãÂ∑ÆÂàÜÁ∫¶ÊùüÊòØÊúân‰∏™ÂèòÈáèÂíåm‰∏™‰∏çÁ≠âÂºèÁªÑÊàêÁöÑ„ÄÇÂÖ∂‰∏≠ÊØè‰∏™‰∏çÁ≠âÂºèÈÉΩÊòØÂΩ¢Â¶ÇÔºö$x_i-x_j \leq b_k(i,j\in[1,n], k\in[1,m])$ Êàñ $x_i-x_j \geq b_k(i,j\in[1,n], k\in[1,m])$ „ÄÇ ÂÖ∂‰∏≠x‰∏∫n‰∏™ÂèòÈáèÔºåb‰∏∫m‰∏™‰∏çÁ≠âÂºèÂè≥ËæπÁöÑÂÄºÔºåÁî®bÁöÑÂÄºÊù•Á∫¶ÊùüxÁöÑÂ∑ÆÁß∞‰∏∫Â∑ÆÂàÜÁ∫¶Êùü„ÄÇÊ±Ç‰∏ÄÁªÑËß£Ôºö$x_1=a_1,\quad x_2=a_2,\cdots x_n=a_n$‰ΩøÂæóÊâÄÊúâÁ∫¶ÊùüÊù°‰ª∂(Âç≥m‰∏™‰∏çÁ≠âÂºè)ÂùáÊàêÁ´ãÔºåÂàôÁß∞Â∑ÆÂàÜÁ∫¶ÊùüÊúâËß£ÔºåÂê¶ÂàôÊó†Ëß£„ÄÇ ‰æãÂ¶ÇÔºö$$(1)x_1-x_3 \leq 5;\quad(2)x_3-x_5 \leq 4;\quad$$$$(3)x_3-x_2 \leq 1;\quad(4)x_1-x_5 \leq 10;\quad(5)x_2-x_5 \leq 2;\quad$$ ËßÇÂØü$ x_1-x_5 $ÁöÑÂÖ≥Á≥ªÔºåÊúâÂ¶Ç‰∏ã‰∏âÁßçÂÖ≥Á≥ªÔºö (4) $x_1-x_5 \leq 10$ (1)+(2) $x_1-x_5 \leq 9$ (1)+(3)+(5) $x_1-x_5 \leq 8 $ Âõ†‰∏∫Ë¶ÅÊª°Ë∂≥ÊâÄÊúâÁ≠âÂºèÁöÑÂÖ≥Á≥ªÔºåÊâÄ‰ª•ÂèñÂÖ∂‰∏≠ÊúÄÂ§ßÁöÑ3.$x_1-x_5 \leq 8$ Âõ†‰∏∫8‰∏ÄÂÆöÂ∞è‰∫é9Âíå10ÂòõÔºåÂ¶ÇÊûú$x_1-x_5$Â∞è‰∫éÁ≠â‰∫é8‰∫ÜÔºåÈÇ£‰ªñ‰ª¨‰∏ÄÂÆöÂ∞è‰∫éÁ≠â‰∫é9Âíå10„ÄÇ ÊúÄÁü≠Ë∑ØÈóÆÈ¢òËßÇÂØüÂèØÂèëÁé∞ $x_i-x_j \leq b_k$ ÂèØËΩ¨Êç¢‰∏∫Ôºö$x_i \leq b_k+x_j$ „ÄÇ‰∏éÊ±ÇÊúÄÁü≠Ë∑ØÂÖ¨Âºè‰∏≠ÁöÑdis[j]&lt;dis[i]+w[i, j]ÈùûÂ∏∏Áõ∏‰ººÔºåÈÇ£Â∑ÆÂàÜÁ∫¶ÊùüÈóÆÈ¢òÊòØ‰∏çÊòØ‰πüÂèØ‰ª•ËΩ¨ÂåñÊàêÊúÄÁü≠Ë∑ØÈóÆÈ¢òÊù•Ê±ÇËß£Âë¢ÔºüËÇØÂÆöÊòØÂèØ‰ª•ÁöÑÔºÅÂÖàÊù•Áúã‰∏™‰æãÂ≠êÔºö ‰ªîÁªÜËßÇÂØüÂõæ‰∏≠ÂèØÂèëÁé∞ÊÄªÂÖ±Êúâ‰∏âÊù°Ë∑ØÂæÑÔºö 5 -&gt; 1 ÈïøÂ∫¶‰∏∫10 5 -&gt; 3 -&gt; 1 ÈïøÂ∫¶‰∏∫9 5 -&gt; 2 -&gt; 3 -&gt; 1 ÈïøÂ∫¶‰∏∫8 ÂæàÂÆπÊòìÂèëÁé∞‰ªé5Âà∞1ÁöÑÊúÄÁü≠Ë∑ØÂæÑÊòØ8„ÄÇÈÇ£‰∏∫‰ªÄ‰πàÊ±ÇÂ∑ÆÂàÜÁ∫¶ÊùüÈóÆÈ¢òËÉΩÂíåÊúÄÁü≠Ë∑ØÈóÆÈ¢òËÅîÁ≥ªÂà∞‰∏ÄËµ∑Âë¢ÔºüÊ≠§Â§ÑË¶ÅÂÖà‰∫ÜËß£ÊúÄÁü≠Ë∑ØÁü•ËØÜÔºå‰∏çÊáÇÁöÑÂèØ‰ª•Áúã‰∏ÄÁúãÊàëÂâçÈù¢ÂÜôÁöÑÂçöÂÆ¢Ôºö1.dijkstra 2.SPFA 3.Floyd Â∑ÆÂàÜÁ∫¶ÊùüÂíåÊúÄÁü≠Ë∑ØÈóÆÈ¢òÂØπ‰∫éÊØè‰∏™‰∏çÁ≠âÂºè$x_i-x_j \leq b_k$ÔºåÊàë‰ª¨ÈÉΩ‰ªéÁªìÁÇπjÂêëÁªìÁÇπiËøû‰∏ÄÊù°ÈïøÂ∫¶‰∏∫$b_k$ÁöÑÊúâÂêëËæπ„ÄÇÊ≠§Êó∂ÂÜçÁúã‰∏äÈù¢ÁªôÂá∫ÁöÑÈÇ£‰∫õ‰∏çÁ≠âÂºèÊâÄËΩ¨ÂåñÊàêÁöÑÂõæÔºåÊòØÂê¶ÂíåÁªôÂá∫ÁöÑÂõæ‰∏ÄÊ†∑Âë¢ÔºåÊúÄÂêéÊ±ÇËß£ÁöÑÁ≠îÊ°à‰πü‰∏ÄÊ†∑„ÄÇÈÇ£‰πàÊàë‰ª¨Â∞ÜÂ∑ÆÂàÜÁ∫¶ÊùüÈóÆÈ¢òËΩ¨ÂåñÊàêÊúÄÁü≠Ë∑ØÈóÆÈ¢òÔºåÁî±ÊúÄÁü≠Ë∑ØÁü•ËØÜÂèØÁü•ÔºåÂΩìÂõæ‰∏≠Â≠òÂú®ÂèØËææÂà∞ÁöÑË¥üÁéØÊó∂ÔºåÊúÄÁü≠Ë∑Ø‰∏ÄÂÆöÊó†Ëß£„ÄÇÊâÄ‰ª•ÂèØ‰ª•Áî®SPFAÊù•Âà§Êñ≠ËØ•Â∑ÆÂàÜÁ∫¶ÊùüÈóÆÈ¢òÊòØÂê¶ÊúâËß£„ÄÇ ËøôÊó∂ÂÄôÂ∞±Êúâ‰∏Ä‰∏™ÈóÆÈ¢ò‰∫ÜÔºåÂú®ÊúÄÁü≠Ë∑Ø‰∏≠Êúâ‰∫õÁÇπÊòØ‰∏çÂèØËææÁöÑÔºåÂΩìÈÅáÂà∞‰∏çÂèØËææÁöÑË¥üÁéØÁî®SPFA‰∏ÄÂÆöÂà§Êñ≠‰∏çÂá∫Êù•Ôºå‰ΩÜÊ≠§Êó∂Â∑ÆÂàÜÁ∫¶ÊùüÂç¥ÊòØÊó†Ëß£ÁöÑ„ÄÇÊÄé‰πàÂäûÂë¢ÔºüÊúâ‰∏§ÁßçÊñπÊ≥ïÔºåÂÖ∂ÂÆûÊú¨Ë¥®ÈÉΩÊòØ‰∏ÄÊ†∑ÁöÑÔºö Êàë‰ª¨Êñ∞ÂÆö‰πâ‰∏Ä‰∏™ÁªìÁÇπÔºåÂèØ‰ª•ÊòØ$x_0$ÔºåËÆ©ÂÆÉÂêëÊâÄÊúâÂÖ∂ÂÆÉÁªìÁÇπËøû‰∏ÄÊù°ËæπÔºåËÆ©Ëøô‰∫õËæπÁöÑÊùÉÂÄº‰∏∫0„ÄÇÂõ†‰∏∫SPFAÊòØ‰∏Ä‰∏™bfsÁöÑËøáÁ®ã(Êúâ‰∫õÈ¢òÁõÆÈúÄË¶ÅÊääspfaÊîπÊàêdfsÁöÑÂΩ¢ÂºèÔºå‰ΩÜÊòØÂπ∂‰∏çÂΩ±ÂìçÂÆÉËÆøÈóÆÁöÑÁªìÁÇπ‰∏™Êï∞ÔºåÂè™ÊòØËÆøÈóÆÈ°∫Â∫è‰∏ç‰∏ÄÊ†∑)ÔºåÊâÄ‰ª•‰ªéËøô‰∏™ÁªìÁÇπÂá∫Âèë‰∏ÄÂÆöËÉΩÂà∞ËææÊâÄÊúâÁªìÁÇπÔºåËÄå‰∏î‰∏ç‰ºöÂΩ±ÂìçÁªìÊûúÁöÑÊ≠£Á°ÆÊÄß„ÄÇ Á¨¨‰∫åÁßçÊñπÊ≥ïÂ∞±ÊØîËæÉÊö¥Âäõ‰∫ÜÔºåÁé∞Âú®ÈóÆÈ¢òÊòØÊúâÁöÑÁªìÁÇπËÆøÈóÆ‰∏çÂà∞ÊÄé‰πàÂäûÔºåspfaÂèàÊòØÊ±ÇÂçïÊ∫êÊúÄÁü≠Ë∑ØÔºåÈÇ£Êàë‰ª¨Áõ¥Êé•‰∏Ä‰∏™forÂæ™ÁéØÔºåÊØè‰∏™ÁªìÁÇπÈÉΩÂΩì‰∏ÄÊ¨°Ê∫êÁÇπÔºåÊ±ÇnÊ¨°ÂçïÊ∫êÊúÄÁü≠Ë∑ØÔºåËøôÊ†∑Â∞±ËÉΩËÆøÈóÆÂà∞ÊâÄÊúâÁªìÁÇπ‰∫Ü„ÄÇ ‰∏§ÁßçÊñπÊ≥ïÁöÑÊó∂Èó¥Â§çÊùÇÂ∫¶Êàë‰∏çÂ§™‰ºöÂàÜÊûêÔºå‰ΩÜÊòØÊÑüËßâÂ•ΩÂÉèÂ∑Æ‰∏çÂ§ö‰∏ÄÊ†∑ÁöÑ„ÄÇ ÂèòÂåñÊäÄÂ∑ß‰∏çÁ≠âÂºèËΩ¨ÂåñÊúâÊó∂ÂÄôÈ¢ò‰∏≠‰ºöÁªôÂá∫‰∏âÁßç‰∏çÁ≠âÂºèÔºå‰ΩÜÊòØÊ±ÇÊúÄÁü≠Ë∑ØÂè™ËÉΩÊúâ‰∏ÄÁßç‰∏çÁ≠âÂºèÔºåËøôÊó∂ÂÄôÊàë‰ª¨Â∞±ÂèØ‰ª•ÊääÂÖ∂‰ªñ‰∏çÁ≠âÂºèÂèòÂåñÊàê‰∏ÄÊ†∑ÁöÑ‰∏çÁ≠âÂºèÔºåËøõËÄåËΩ¨ÂåñÊàêÂõæ„ÄÇ È¢òÊÑè ËΩ¨Âåñ ËøûËæπ $x_i-x_j \leq b_k$ $x_i-x_j \leq b_k$ add(j, i, $b_k$) $x_i-x_j \geq b_k $ $x_j-x_i \leq -b_k$ add(i, j, -$b_k$) $x_i=x_j$ $x_i-x_j \leq 0$, $x_j-x_i \leq 0$ add(i, j, 0), add(j, i, 0) ÊúÄÁü≠Ë∑Ø‰∏éÊúÄÈïøË∑ØÂíåÂ∑ÆÂàÜÁ∫¶ÊùüÁöÑÂÖ≥Á≥ªÊúâÊúÄÁü≠Ë∑Ø‰∫Ü‰∏ÄÂÆö‰πüÊúâÊúÄÈïøË∑ØÔºåÈÇ£‰ªñ‰ª¨ÂíåÂ∑ÆÂàÜÁ∫¶ÊùüÊúâ‰ªÄ‰πàÂÖ≥Á≥ªÂë¢Ôºü ÂΩìÊàë‰ª¨Ë¶ÅÊ±ÇÂ∑ÆÂàÜÁ∫¶ÊùüÁöÑÊúÄÂ∞èÂÄºÊó∂Ôºå‰∏ÄÂÆöÂ∏åÊúõÊâÄÊúâ‰∏çÁ≠âÂºèÈÉΩÊòØÂ§ß‰∫éÁ≠â‰∫éÂè∑ÔºåËøôÊ†∑Ê±ÇÂá∫Êù•ÁöÑ‰∏ÄÂÆöÊòØÊúÄÂ∞èÂÄº„ÄÇ‰ΩÜÊòØÂΩìÊàë‰ª¨Êúâm‰∏™Á∫¶ÊùüÊù°‰ª∂ÔºàÂç≥‰∏çÁ≠âÂºèÔºâÔºåÊàë‰ª¨ÊÉ≥Ë¶ÅÊª°Ë∂≥ÊâÄÊúâÂ§ß‰∫éÁ≠â‰∫éÁöÑ‰∏çÁ≠âÂºèÔºåÊàë‰ª¨‰∏ÄÂÆöÂæóÊâæÂà∞ÊâÄÊúâ$ b_k $‰∏≠ÊúÄÂ§ßÁöÑÈÇ£‰∏Ä‰∏™ÔºåËøôÊ†∑Â¶ÇÊûúÊª°Ë∂≥‰∫ÜÊúÄÂ§ßÁöÑÈÇ£‰∏™$ b_k $‰∏çÁ≠âÂºèÔºåÂÖ∂‰ªñÁöÑÂ§ß‰∫éÁ≠â‰∫é‰∏çÁ≠âÂºè‰πü‰∏ÄÂÆöÈÉΩÊª°Ë∂≥‰∫Ü„ÄÇÊâÄ‰ª•Ê±Ç$x_i-x_j$ÁöÑÊúÄÂ∞èÂÄºÔºåÂ∞±ÊòØÊ±ÇÂõæ‰∏≠ÁöÑÊúÄÈïøË∑Ø„ÄÇÊâÄ‰ª•ÔºåÊ±ÇÊúÄÈïøË∑ØÂ∞±ÊòØÊ±ÇÂ∑ÆÂàÜÁ∫¶Êùü‰∏≠ÁöÑÊúÄÂ∞èÂÄº„ÄÇÊ±ÇÊúÄÈïøË∑ØÁöÑÊó∂ÂÄôÊúâÊ≠£ÁéØÂàôÊó†Ëß£„ÄÇ ÂêåÁêÜÊ±ÇÊúÄÁü≠Ë∑ØÂ∞±ÊòØÊ±ÇÂ∑ÆÂàÜÁ∫¶ÊùüÁöÑÊúÄÂ§ßÂÄº„ÄÇÊ±ÇÊúÄÁü≠Ë∑ØÁöÑÊó∂ÂÄôÊúâË¥üÁéØÂàôÊó†Ëß£„ÄÇ ‰ªÄ‰πàÔºü‰Ω†ÈóÆÊàëÊúÄÈïøË∑ØÊÄé‰πàÊ±ÇÔºüÊääÊúÄÁü≠Ë∑ØÁÆóÊ≥ï‰∏≠ÁöÑÂ∞è‰∫éÂè∑ÊîπÊàêÂ§ß‰∫éÂè∑‰∏çÂ∞±Ë°å‰∫Ü„ÄÇ ‰æãÈ¢òÊ¥õË∞∑P1993 ÂèÇËÄÉ Â§úÊ∑±‰∫∫ÈùôÂÜôÁÆóÊ≥ïÔºàÂõõÔºâ- ÊúÄÁü≠Ë∑ØÂíåÂ∑ÆÂàÜÁ∫¶Êùü OI-WiKiÔºà‰∏Ä‰∏™ÁÆóÊ≥ïÁ´ûËµõÁöÑÁôæÁßëÔºâ Áª¥Âü∫ÁôæÁßëÔºöÂ∑ÆÂàÜÁ∫¶ÊùüÁ≥ªÁªü P1993Â∞èKÁöÑÂÜúÂú∫ È¢òËß£]]></content>
      <categories>
        <category>ÁÆóÊ≥ï</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>ÂõæËÆ∫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ÂõæÁöÑËæπÂ≠òÂÇ®--ÈìæÂºèÂâçÂêëÊòü]]></title>
    <url>%2F2019%2F07%2F31%2F%E5%9B%BE%E7%9A%84%E8%BE%B9%E5%AD%98%E5%82%A8-%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F%2F</url>
    <content type="text"><![CDATA[ÂõæÁöÑËæπÂ≠òÂÇ®‚ÄìÈìæÂºèÂâçÂêëÊòüÈìæÂºèÂâçÂêëÊòüÊòØÂú®ÁúãÂ∑ÆÂàÜÁ∫¶ÊùüÁöÑÈ¢òÁöÑÊó∂ÂÄôÂÅ∂ÁÑ∂Èó¥ÁúãÂà∞ÁöÑÔºå‰∏ÄÂºÄÂßãÊ≤°Â§™ÈáçËßÜÂÆÉÔºåÊÑüËßâÂ•ΩÂÉèÊ≤°ÊÄé‰πàÂê¨ËØ¥Ëøá„ÄÇËøòË¶ÅÂÆö‰πâÁªìÊûÑ‰ΩìÔºåËÄå‰∏îÈúÄË¶ÅËæÖÂä©Êï∞ÁªÑÔºåÊÑüËßâÊå∫È∫ªÁÉ¶ÁöÑ„ÄÇËøò‰∏çÂ¶ÇÁõ¥Êé•Áî®STLÁöÑvector+pairÂÆö‰πâÁöÑÈÇªÊé•Ë°®Â•ΩÁî®„ÄÇ‰ΩÜÊòØÂêéÊù•ÂèëÁé∞Â§ßÂÆ∂ÂÜôSPFAÁöÑÊó∂ÂÄôÈÉΩÁî®ÁöÑÈìæÂºèÂâçÂêëÊòüÔºåÊÑüËßâËøòÊòØÂÜô‰∏™ÂçöÂÆ¢Â≠¶‰π†‰∏Ä‰∏ãÂêßÔºå‰ª•ÂâçÈÉΩÊ≤°Âê¨ËØ¥ËøáÔºåÂ§™Ëèú‰∫Ü„ÄÇ„ÄÇ„ÄÇ ËæπÂ≠òÂÇ®ÁªìÊûÑÂ≠òÁöÑÈÉΩÊòØÊúâÂêëËæπÔºÅÔºÅÔºÅ ‰ºòÁº∫ÁÇπ‰ºòÁÇπ ÈÄÇÁî®ËåÉÂõ¥ÂπøÔºåÂü∫Êú¨‰∏äÊâÄÊúâÂõæËÆ∫ÁöÑÈ¢òÈÉΩËÉΩÁî®ÈìæÂºèÂâçÂêëÊòüÊù•Â≠òÂÇ®„ÄÇ Â≠òÂÇ®ÊïàÁéáÈ´òÔºåÂÉèÈÇªÊé•Ë°®‰∏ÄÊ†∑‰∏ç‰ºöÂ≠òÂÇ®‰∏çÂ≠òÂú®ÁöÑËæπ ÂèØ‰ª•Áî®Êù•Êõø‰ª£ÈÇªÊé•Ë°®ÔºåÁî®vectorÂÆûÁé∞ÈÇªÊé•Ë°®Â•ΩÂÉèÂÆπÊòìÁàÜÂÜÖÂ≠ò(ÁúãÂà´‰∫∫ËØ¥ÁöÑ)Â•ΩÂÉè‰πüÁ°ÆÂÆûÔºåvectorÂú®ÂÆπÈáè‰∏çÂ§üÊó∂‰ºöÈáçÊñ∞ÂºÄËæü‰∏Ä‰∏™‰∏§ÂÄç‰∫éÂéüÊù•Â§ßÂ∞èÁöÑÊï∞ÁªÑ„ÄÇ Áº∫ÁÇπ ÈÇªÊé•Ë°®ÁöÑÁº∫ÁÇπÂÆÉÈÉΩÊúâÔºå Êó†Ê≥ïÂà§Êñ≠ÈáçËæπ(ÂøÖÈ°ªÈÅçÂéÜÊü•Êâæ) Êó†Ê≥ïÊìç‰ΩúÊüê‰∏™ÁâπÂÆöÁöÑËæπ(ÂøÖÈ°ªÈÅçÂéÜÊü•Êâæ) Áõ∏ÂØπ‰∫éÈÇªÊé•Áü©ÈòµÊù•ËØ¥‰∏çÂÆπÊòìÂÆûÁé∞ÂíåÁêÜËß£ ‰ª£Á†ÅÂÆûÁé∞1234567891011121314151617struct Edge&#123; int net;//1. int to; int w;&#125;edge[maxn];int head[maxn], cnt=0;//2.void add_dege(int u, int v, int w)&#123; edge[cnt].to = v; edge[cnt].net = head[u];//3. edge[cnt].w = w; head[u] = cnt++;&#125;for(int i=head[u]; i!=-1; i=edge[i].net)//4. Ê≥®ÈáäÔºö netÊòØnextÔºåÊúâÊó∂ÂÄôÂÆö‰πânextÂèØËÉΩ‰ºöÂíåÁ≥ªÁªüÂÖ≥ÈîÆÂ≠óÈáçÂ§çÔºåÊâÄ‰ª•ÂÆö‰πâ‰∏∫net„ÄÇnetÊåáÂêëÂΩìÂâçËæπÁöÑÂá∫ÂèëÁªìÁÇπÁöÑ‰∏ã‰∏ÄÊù°ËæπÂú®edgeÊï∞ÁªÑ‰∏≠ÁöÑ‰∏ãÊ†á„ÄÇSPFAÊòØ‰∏Ä‰∏™bfsÁöÑËøáÁ®ãÔºåËøõË°åÂπøÊêúÊó∂‰ºöÂÖàÈÅçÂéÜÊüê‰∏™È°∂ÁÇπÁöÑÊâÄÊúâÂá∫ËæπÔºånetÂç≥ÊåáÂêëÂΩìÂâçÁªìÁÇπÁöÑ‰∏ã‰∏ÄÊù°Âá∫Ëæπ„ÄÇtoÂç≥ÂΩìÂâçËæπÁöÑÂ∞æÁªìÁÇπ„ÄÇwÂç≥ÊùÉÈáç„ÄÇ head[u]Âç≥Â≠òÂÇ®uÁªìÁÇπÁöÑÁ¨¨‰∏Ä‰∏™Âá∫ËæπÂú®edgeÊï∞ÁªÑ‰∏≠ÁöÑ‰∏ãÊ†á„ÄÇcntÂç≥ËÆ∞ÂΩïÂΩìÂâçÂ≠òÂÇ®Âà∞edgeÊï∞ÁªÑÁöÑÁ¨¨Âá†‰Ωç‰∫ÜÔºåÁî®Êù•ËÆæÁΩÆÊï∞ÁªÑ‰∏ãÊ†á„ÄÇ ÈìæÂºèÂâçÂêëÊòüÊòØÂèçÁùÄÂ≠òÂÇ®ÁöÑÔºåÂç≥ÂÖàËæìÂÖ•ÁöÑËæπÂ≠òÂú®ÂêéÈù¢ÔºåÊúâ‰∫õÁ±ª‰ºº‰∫éÊ†àÔºåÂêéËøõÂÖàÂá∫„ÄÇÂΩìaÁöÑÁ¨¨‰∏ÄÊù°Âá∫ËæπÂ≠òÂÖ•edgeÊï∞ÁªÑ‰∏≠ÔºånetÁ≠â‰∫éhead[u]ÔºåÂç≥-1„ÄÇ(ÊâÄÊúâheadÂàùÂßãÂåñ‰∏∫-1Ôºå-1Ë°®Á§∫Ê≤°ÊúâËæπÂ≠òÂÖ•)‰πãÂêéhead[u]Ë¢´ËµãÂÄº‰∏∫cntÔºåÂç≥ÂàöËæìÂÖ•ÁöÑÈÇ£Êù°ËæπÂú®edgeÊï∞ÁªÑ‰∏≠ÁöÑ‰∏ãÊ†á„ÄÇÂΩìaÁöÑÁ¨¨‰∫åÊù°ËæπÂ≠òÂÖ•edgeÊï∞ÁªÑÊó∂ÔºånetÁ≠â‰∫éhead[u]ÔºåÊ≠§Êó∂head[u]Â≠òÁöÑÊòØ‰∏ä‰∏ÄÊ¨°Â≠òÂÇ®‰ª•u‰∏∫Âá∫ËæπÁöÑËæπÂú®edgeÊï∞ÁªÑ‰∏≠ÁöÑ‰∏ãÊ†á„ÄÇÊØèÊ¨°head[u]Â≠òÂÇ®ÁöÑÈÉΩÊòØ‰∏ä‰∏Ä‰∏™uÁöÑËæπÔºåÊâÄ‰ª•ÈÅçÂéÜÁöÑÊó∂ÂÄôÊòØÂÖàÈÅçÂéÜÊúÄÂêéËæìÂÖ•uÁöÑËæπ„ÄÇ ÈìæÂºèÂâçÂêëÊòüÈÅçÂéÜÁªìÁÇπuÊâÄÊúâÂá∫ËæπÁöÑÊñπÊ≥ïÔºåÂΩìÁ≠â‰∫é-1Êó∂Ë°®Á§∫Ê≤°Êúâ‰∏ã‰∏ÄÊù°Ëæπ‰∫ÜÔºåÈÅçÂéÜÁªìÊùü„ÄÇ ‰∏æ‰æã ËæìÂÖ•È°∫Â∫è‰∏∫Ôºö u = 0 v = 1 u = 1 v = 3 u = 0 v = 2 u = 2 v = 3 u = 1 v = 2 u = 3 v = 4 u = 4 v = 2 ÊâãÂä®Ê®°Êãü‰∏Ä‰∏ã edge[0].to = 1 edge[0].net = -1 head[0] = 0 cnt = 0 edge[1].to = 3 edge[1].net = -1 head[1] = 0 cnt = 1 edge[2].to = 2 edge[2].net = 0 head[0] = 2 cnt = 2 edge[3].to = 3 edge[3].net = -1 head[2] = 0 cnt = 3 edge[4].to = 2 edge[4].net = 0 head[1] = 4 cnt = 4 edge[5].to = 4 edge[5].net = -1 head[3] = 5 cnt = 5 edge[6].to = 2 edge[6].net = -1 head[4] = 6 cnt = 6 ‰∏äÂõæ‰∏≠0ÁöÑÂá∫ËæπÊúâ‰∏§Êù°ÔºåÂú®edgeÊï∞ÁªÑ‰∏≠ÁöÑÂ≠òÂÇ®‰ΩçÁΩÆÂàÜÂà´‰∏∫0„ÄÅ2ÔºåÊúÄÂêéhead[0] = 2ÔºõÂΩìÈÅçÂéÜ‰ª•0‰∏∫Ëµ∑ÁÇπÁöÑËæπÊó∂ÔºåÂÖà‰ªéedge[2]ÂºÄÂßãÈÅçÂéÜÔºåÂèØÂèëÁé∞edge[2].net = 0;Âç≥‰ª•0‰∏∫Ëµ∑ÁÇπÁöÑÊúÄÂêé‰∏ÄÊù°Ëæπ„ÄÇÂèØÁúãÂá∫ÔºåÈÅçÂéÜÂíåËæìÂÖ•È°∫Â∫èÊòØÁõ∏ÂèçÁöÑÔºå‰ΩÜÊòØÂπ∂‰∏çÂΩ±ÂìçÁªìÊûú„ÄÇ ÂèÇËÄÉ ‰∏çÁü•ÈÅì‰∏∫‰ªÄ‰πà404‰∫Ü ACMÂõæËÆ∫‰πãÂ≠òÂõæÊñπÂºè]]></content>
      <categories>
        <category>ÁÆóÊ≥ï</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>ÂõæÁöÑÂ≠òÂÇ®</tag>
        <tag>ÂõæËÆ∫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ÊúÄÁü≠Ë∑Ø--Floyd]]></title>
    <url>%2F2019%2F07%2F30%2F%E6%9C%80%E7%9F%AD%E8%B7%AF-Floyd%2F</url>
    <content type="text"><![CDATA[ÊúÄÁü≠Ë∑Ø‚ÄìFloydFloydÊòØÁî®Êù•Ê±ÇÂÖ®Â±Ä‰ªªÊÑè‰∏§ÁÇπ‰πãÈó¥ÁöÑÊúÄÁü≠Ë∑ØÁöÑ„ÄÇ FloydÂæàÂ•ΩÁêÜËß£Ôºå‰æùÊ¨°Áî®ÊØè‰∏™ÁÇπÂéªÊùæÂºõÂÖ∂ÂÆÉÊâÄÊúâËæπÔºåÊÑüËßâÊ≤°‰ªÄ‰πàÂ•ΩËÆ≤ÁöÑ„ÄÇÁêÜËß£‰∫ÜdijkstraÂíåSPFA‰πãÂêéÔºåÊÑüËßâFloydÂ∞±ÂæàÁÆÄÂçïÊòìÊáÇ‰∫ÜÔºåÁõ¥Êé•‰∏ä‰ª£Á†ÅÂêß„ÄÇ Êó∂Èó¥Â§çÊùÇÂ∫¶ÔºöO(n^3) Á©∫Èó¥Â§çÊùÇÂ∫¶ÔºöO(n^2) ÁÆóÊ≥ïÂÆûÁé∞1234for(int k=0; k&lt;n; k++)//1. for(int i=0; i&lt;n; i++) for(int j=0; j&lt;n; j++) d[i][j] = min(d[i][j], d[i][k]+d[k][j]); Ê≥®ÈáäÔºö ÂÖ∂‰∏≠n‰∏∫Âõæ‰∏≠È°∂ÁÇπ‰∏™Êï∞Ôºåk‰æùÊ¨°Êûö‰∏æÊâÄÊúâÈ°∂ÁÇπÂéªÊùæÂºõÂÖ∂ÂÆÉÊâÄÊúâËæπ„ÄÇ]]></content>
      <categories>
        <category>ÁÆóÊ≥ï</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>ÂõæËÆ∫</tag>
        <tag>ÊúÄÁü≠Ë∑Ø</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ÊúÄÁü≠Ë∑Ø--SPFA]]></title>
    <url>%2F2019%2F07%2F26%2F%E6%9C%80%E7%9F%AD%E8%B7%AF-SPFA%2F</url>
    <content type="text"><![CDATA[ÊúÄÁü≠Ë∑Ø‚ÄìSPFASPFAÊòØ‰∏™ÂæàÁ•ûÂ•áÁöÑÁÆóÊ≥ïÔºå‰ªñÂú®‰∏ÄËà¨ÊÉÖÂÜµ‰∏ãÊó∂Èó¥‰ºöË∑ëÁöÑÂæàÂø´ÔºåËÇØÂÆöÊúâ‰∫∫ÊÉ≥Áî®SPFAÊù•‰ª£ÊõødijkstraÔºå‰ΩÜÊòØÊúâ‰∏ÄÁßçÁâπÊÆäÁöÑÊï∞ÊçÆ‰∏ìÈó®Êù•Âç°SPFAÔºåÂè™ËÉΩËÆ©dijkstraËøáÔºåSPFAËøá‰∏çÂéªÔºåÈÇ£Â∞±ÊòØÁΩëÊ†ºÂõæÔºåÊàëÁ®çÂêé‰ºöËÆ≤‰∏∫‰ªÄ‰πàÁΩëÊ†ºÂõæÂèØ‰ª•Âç°ÊéâSPFA„ÄÇ ‰ΩÜÊòØ‰∏∫‰ªÄ‰πàSPFAË∑ë‰∏çËøádijkstraÔºåÂ§ßÂÆ∂ËøòË¶ÅÁî®SPFAÔºüÂõ†‰∏∫dijkstraÂè™ËÉΩËÆ°ÁÆó‰∏çÂ∏¶Ë¥üÁéØÁöÑÂõæÔºåÂΩìÂõæ‰∏≠Âá∫Áé∞Ë¥üÁéØÔºådijkstraÂ∞±‰ºö‰∏ÄÁõ¥Âç°Âú®Ë¥üÁéØÈáåÂá∫‰∏çÊù•‰∫Ü„ÄÇÂ¶ÇÊûú‰∏çÂ§™ÊáÇÂèØ‰ª•Áúã‰∏ÄÁúãÊàëÁöÑ‰∏ä‰∏ÄÁØáÂçöÂÆ¢ÔºöDijkstra ÂΩìÂõæ‰∏≠Â≠òÂú®ÂèØÂà∞ËææÁöÑË¥üÁéØÔºåÂàôËØ•Âõæ‰∏ÄÂÆö‰∏çÂ≠òÂú®ÊúÄÁü≠Ë∑ØÔºåÂõ†‰∏∫Ë¥üÁéØÂèØ‰ª•‰∏ÄÁõ¥ÂΩìÂÅöÊúÄÁü≠Ë∑ØÊù•ÊùæÂºõÂÖ∂‰ªñËæπÔºåÈÇ£‰πàÊúÄÁü≠Ë∑ØÂ∞±ËÉΩÊó†ÈôêÂ∞èÔºåÊâÄ‰ª•‰∏çÂ≠òÂú®ÊúÄÁü≠Ë∑Ø„ÄÇ SPFA‰πüÊòØÁî®Êù•Ê±ÇÂçïÊ∫êÊúÄÁü≠Ë∑ØÔºåÂÆÉÂΩìÁÑ∂‰πü‰∏çËÉΩÂú®Â≠òÂú®ÂèØËææË¥üÁéØÁöÑÊó∂ÂÄôËÆ°ÁÆóÊúÄÁü≠Ë∑ØÔºå‰ΩÜÊòØ‰ªñÊúâ‰∏Ä‰∏™Á•ûÂ•áÁöÑÂäüËÉΩÔºöÂà§Êñ≠Âõæ‰∏≠ÊòØÂê¶Â≠òÂú®ÂèØËææË¥üÁéØ„ÄÇ Bellman-FordSPFAÊòØBellman-FordÁöÑÈòüÂàó‰ºòÂåñÔºåÂú®‰∏ÄËà¨ÊÉÖÂÜµ‰∏ãÊØîBellman-FordÂø´ÂæàÂ§ö„ÄÇËøôÈáå‰ªãÁªçBellman-FordÊòØÂ∏åÊúõÂèØ‰ª•Êõ¥Â•ΩÂú∞ÁêÜËß£SPFAÔºåÂõ†‰∏∫‰∏§ËÄÖÊú¨Ë¥®Âå∫Âà´‰∏çÂ§ß„ÄÇ ÁÆóÊ≥ïÊ≠•È™§ÁÆóÊ≥ïÊÄªÂÖ±Ë∑ën-1ËΩÆÂ∞±ËÉΩÁ°ÆÂÆöÊâÄÊúâÁÇπÁöÑÊúÄÁü≠Ë∑Ø„ÄÇÊÄªÂÖ±Êúân‰∏™ÁÇπÔºåx1, x2, x3, x4‚Ä¶xnÔºåÂÖ∂‰∏≠x1‰∏∫Ê∫êÁÇπÔºåÁ¨¨‰∏ÄËΩÆ‰∏ÄÂÆöÂèØ‰ª•Á°ÆÂÆöÁ¶ªÊ∫êÁÇπÊúÄËøëÁöÑÁÇπÁöÑÊúÄÁü≠Ë∑ØÔºåÂç≥x2ÁöÑÊúÄÁü≠Ë∑Ø„ÄÇ‰æùÊ¨°Á±ªÊé®ÔºåÂ¶ÇÊûúÂõæ‰∏≠‰∏çÂ≠òÂú®Ë¥üÁéØÔºåÂàô‰∏ÄÂÆöËÉΩÂú®n-1ËΩÆÊé®Âá∫ÊâÄÊúâÁÇπÁöÑÊúÄÁü≠Ë∑Ø„ÄÇ ÁÆóÊ≥ïÂÆûÁé∞‰∏ãÈù¢ÊääÊï¶Áà∑ËÆ≤ËØæÁöÑÊó∂ÂÄôÁöÑ‰ª£Á†ÅÊîæÂá∫Êù•Ôºö 12345678for(int k=1; k&lt;=n-1; k++)&#123; for(int i=1; i&lt;m; i++) &#123; if(dis[v[i]] &gt; dis[u[i]]+w[i]) dis[v[i]] = dis[u[i]]+w[i] &#125;&#125; SPFAËßÇÂØü‰∏äÈù¢ÁöÑBellman-FordÂèØÂèëÁé∞ÔºåÂΩìdis[u]Ê≤°ÊúâË¢´Êõ¥Êñ∞ÁöÑÊó∂ÂÄôÔºåÂÆÉ‰æùÁÑ∂‰ºöÁî®dis[u]ÂéªÊùæÂºõÂÖ∂ÂÆÉËæπÔºåËøôÊ†∑Â∞±ÂÅö‰∫ÜÂæàÂ§öÂÜó‰ΩôÁöÑÊìç‰ΩúÔºåÊàë‰ª¨Áî®‰∏Ä‰∏™ÈòüÂàóÊù•‰ºòÂåñÂÆÉÔºåÂ∞±ÊòØÂΩìÊúâ‰∏Ä‰∏™ÁÇπË¢´Êõ¥Êñ∞‰∫ÜÔºåÂ¶ÇÊûúËøô‰∏™ÁÇπÊ≤°Âú®ÈòüÂàóÈáåÈù¢ÔºåÂ∞±ÊääÂÆÉÊîæÂà∞ÈòüÂàóÈáåÈù¢Âéª„ÄÇËøôÊ†∑‰∏Ä‰∏™ÁÇπÂæà‰πÖÊ≤°ÊúâË¢´Êõ¥Êñ∞ËøáÁöÑËØùÔºåÂ∞±‰∏ç‰ºöÁî®ÂÆÉÂéªÊõ¥Êñ∞ÂÖ∂ÂÆÉËæπ„ÄÇ ÁÆóÊ≥ïÂÆûÁé∞Ê≠§Â§ÑÂª∫ËÆÆÂÖàÁúãÊáÇÊàëÁöÑ‰∏ä‰∏ÄÁØáÂçöÂÆ¢ÔºöDijkstra 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354int dis[maxn], viscnt[maxn];bool inq[maxn];vector&lt;pair&lt;int, int&gt; &gt; G[maxn];//1.void add_eage(int s, int t, int w)&#123; G[s].push_back(make_pair(w, t));//2. G[t].push_back(make_pair(w, s));//3.&#125;void init(int n)//4.&#123; for(int i=0; i&lt;n; i++) G[i].clear();&#125;bool SPFA(int n, int s)//5.&#123; for(int i=0; i&lt;n; i++)//6. &#123; dis[i] = (i==s)?0:INF; inq[i] = false; viscnt[i] = 0; &#125; queue&lt;pair&lt;int, int&gt; &gt; q; q.push(make_pair(dis[s], s));//7. inq[s] = true; while(!q.empty()) &#123; pair&lt;int, int&gt; p = q.front(); int x = p.second;//8. q.pop(); inq[x] = false; if(viscnt[x]++&gt;n)//9. return true; for(int i=0; i&lt;G[x].size(); i++)//10. &#123; int y=G[x][i].second, w=G[x][i].first; if(dis[x]+w&lt;dis[y])//11. &#123; dis[y] = dis[x]+w; if(!inq[y]) &#123; q.push(make_pair(dis[y], y)); inq[y] = true; &#125; &#125; &#125; &#125; return false;&#125; Ê≥®ÈáäÔºö viscnt[i]Áî®Êù•ËÆ°Êï∞Á¨¨i‰∏™ÁÇπË¢´Êõ¥Êñ∞‰∫ÜÂá†Ê¨°ÔºåÂ¶ÇÊûúÊõ¥Êñ∞Ê¨°Êï∞Ë∂ÖËøánÔºåÂàôËØ¥ÊòéÂõæ‰∏≠Â≠òÂú®Ë¥üÁéØ„ÄÇinq[i]Ë°®Á§∫Á¨¨i‰∏™ÁÇπÊòØÂê¶Âú®ÈòüÂàóÈáåÈù¢„ÄÇÂ≠òÊîæpairÁöÑvectorÁî®Êù•Â≠òÊîæËæπÂíåËæπÊùÉÔºåG[i] [j]Â≠òÊîæÁöÑÊòØÂíåÁªìÁÇπiÁõ∏ËøûÁöÑÁ¨¨jÊù°Ëæπ„ÄÇG[i] [j].secondÂ≠òÊîæÁöÑÊòØÂíåÁªìÁÇπiÁõ∏ËøûÁöÑÁ¨¨jÊù°ËæπÁöÑÂè¶‰∏Ä‰∏™Á´ØÁÇπ„ÄÇG[i] [j].firstÂ≠òÊîæÁöÑÊòØÂíåÁªìÁÇπiÁõ∏ËøûÁöÑÁ¨¨jÊù°ËæπÁöÑÊùÉÈáç„ÄÇmaxn‰∏∫Ëá™Â∑±ÂÆö‰πâÁöÑÂ∏∏Èáè„ÄÇ Â∞ÜËæπÊ∑ªÂä†Ëá≥vector‰∏≠Ôºås„ÄÅw„ÄÅt ËØ¥ÊòéÂêå‰∏ä„ÄÇ Êó†ÂêëÂõæÁöÑËæπÊòØÊó†ÂêëÁöÑÔºåÊâÄ‰ª•ÈúÄË¶ÅÂú®G[s]ÂíåG[w]‰∏≠ÈÉΩÂä†ÂÖ•‰∏ÄÊù°Ëæπ„ÄÇÊúâÂêëÂõæ‰∏çÈúÄË¶ÅËøô‰∏ÄÊ≠•„ÄÇ ÂàùÂßãÂåñvectorÔºåÊ∏ÖÁ©∫ÊâÄÊúâÂÖàÂâçÂä†ÂÖ•ÁöÑËæπ„ÄÇ SPFAÂΩìÂõæ‰∏≠Â≠òÂú®Ë¥üÁéØÊó∂ËøîÂõûtrueÔºå‰∏çÂ≠òÂú®Êó∂ËøîÂõûfalse„ÄÇ ÂàùÂßãÂåñdisÊï∞ÁªÑÔºåÂ∞ÜÊ∫êÁÇπÂà∞Ê∫êÁÇπÁöÑË∑ùÁ¶ªËÆæÁΩÆ‰∏∫0ÔºåÂÖ∂‰ªñÁöÑËÆæÁΩÆ‰∏∫INF(Ëá™Â∑±ÂÆö‰πâ)„ÄÇviscntÂíåinqËÆæ‰∏∫0Âíåfalse„ÄÇ Â∞ÜÊ∫êÁÇπÂéãÂÖ•ÈòüÂàó„ÄÇinq[s]ËÆæ‰∏∫true„ÄÇ ‰æùÊ¨°ÂèñÈòüÈ¶ñÂÖÉÁ¥†„ÄÇÂèñÂá∫Âêéinq[i]ËÆæ‰∏∫false„ÄÇ ÊØèÊ¨°ËÆøÈóÆ‰∏Ä‰∏™ÁÇπÔºå‰ª§Ëøô‰∏™ÁÇπÁöÑviscnt++ÔºåÂΩìËøô‰∏™ÁÇπÁöÑËÆøÈóÆÊ¨°Êï∞Ë∂ÖËøánÊ¨°ÔºåÂàôËØ¥ÊòéÂõæ‰∏≠Â≠òÂú®Ë¥üÁéØ„ÄÇ ‰æùÊ¨°ÈÅçÂéÜ‰∏éxÁõ∏ËøûÁöÑËæπÔºåyË°®Á§∫‰∏éxÁõ∏ËøûÁöÑËæπÁöÑÂè¶‰∏ÄÁ´ØÁªìÁÇπÁºñÂè∑„ÄÇwË°®Á§∫xÂà∞yË∑ØÂæÑÊùÉÈáç„ÄÇ ËøõË°åÊùæÂºõÊìç‰ΩúÔºåÂ¶ÇÊûúÊüê‰∏™ÁÇπÊùæÂºõÊìç‰ΩúÊàêÂäüÔºåÂàôÊääÂÆÉÂéãÂÖ•ÈòüÂàó„ÄÇ Â¶Ç‰ΩïÂç°SPFAÂõ†‰∏∫SPFAÊ≤°ÂõûÊõ¥Êñ∞ÁöÑÊó∂ÂÄôÁî®ÁöÑÊòØ‰∏ÄÊù°ËæπÂéªÊõ¥Êñ∞ÔºåË¢´Êõ¥Êñ∞ËøáÁöÑÁÇπÂÖ•Èòü„ÄÇ ÊØîÂ¶ÇËØ¥Êàë‰ª¨Êúâ‰∏ÄÊù°Èìæ ÂΩìÊàë‰ª¨Áî®Ëæπ0-1ÂéªÊõ¥Êñ∞ÂêéÈù¢ÊâÄÊúâËæπ‰πãÂêéÔºåÂ¶ÇÊûúËæπ0-1ÂèàË¢´Êõ¥Êñ∞ÔºåÂàôÂêéÈù¢ÁöÑÊâÄÊúâËæπÈÉΩË¶ÅË¢´‰æùÊ¨°ÂÜçÊõ¥Êñ∞‰∏ÄÈÅç„ÄÇ ËøôÊ†∑SPFAÁöÑÊó∂Èó¥Â§çÊùÇÂ∫¶Â∞±‰ºöÂèòÂæóÈùûÂ∏∏È´ò ÂèÇËÄÉ Â§úÊ∑±‰∫∫ÈùôÂÜôÁÆóÊ≥ïÔºàÂõõÔºâ- ÊúÄÁü≠Ë∑ØÂíåÂ∑ÆÂàÜÁ∫¶Êùü 2019ccpcÂ§è‰ª§Ëê•Êï¶Áà∑ËÆ≤ÁöÑÂõæËÆ∫]]></content>
      <categories>
        <category>ÁÆóÊ≥ï</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>ÂõæËÆ∫</tag>
        <tag>ÊúÄÁü≠Ë∑Ø</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ÊúÄÁü≠Ë∑Ø--Dijkstra]]></title>
    <url>%2F2019%2F07%2F25%2F%E6%9C%80%E7%9F%AD%E8%B7%AF--Dijkstra%2F</url>
    <content type="text"><![CDATA[ÊúÄÁü≠Ë∑Ø‚ÄìDijkstraDijkstraÊòØÂçïÊ∫êÊúÄÁü≠Ë∑ØÁÆóÊ≥ïÔºåÁî®‰∫éÊ±ÇÊ≠£ÊùÉÂõæÊ∫êÁÇπÂà∞ÊØè‰∏™È°∂ÁÇπÁöÑÊúÄÁü≠Ë∑Ø„ÄÇDijkstraÁî®Âà∞‰∫Ü‰∏Ä‰∫õBFSÁöÑÊÄùÊÉ≥ ÁÆóÊ≥ïÊ≠•È™§ ÂàùÂßãÂåñdisÊï∞ÁªÑÂíåvisÊï∞ÁªÑ„ÄÇ dis[i]Ë°®Á§∫Ê∫êÁÇπÂà∞Á¨¨i‰∏™ÁÇπÁöÑË∑ùÁ¶ªÔºåÂàùÂßãÂåñ‰∏∫INFÔºåË°®Á§∫Êó†Á©∑Â§ß„ÄÇÔºàINF‰∏∫Ëá™Â∑±ÂÆö‰πâÔºâ vis[i]Êï∞ÁªÑË°®Á§∫Á¨¨i‰∏™ÁÇπÁöÑÊúÄÁü≠Ë∑ØÊòØÂê¶Áî®‰∫éÂ§ÑÁêÜËøáÊú™Ê±ÇÂá∫ÊúÄÁü≠Ë∑ØÁöÑÁÇπ„ÄÇÔºàÂΩìÁî®‰ºòÂÖàÈòüÂàóÁöÑÊó∂ÂÄôÂàô‰∏çÁî®visÊï∞ÁªÑÔºâ ÊâæÂá∫ÂΩìÂâçÊúÄÁü≠dis[i]ÔºåÂπ∂‰∏îvis[i]‰∏∫falseÁöÑÁÇπ„ÄÇÂ¶ÇÊûúÊâæ‰∏çÂà∞ÔºåÂàôÊúÄÁü≠Ë∑ØÊ±ÇËß£ÂÆåÊàêÔºåÁÆóÊ≥ïÁªìÊùü„ÄÇ ‰ª§vis[i]‰∏∫trueÔºåË°®Á§∫Â∑≤Áªè‰ΩøÁî®ËøáËØ•ÊúÄÁü≠Ë∑ØÂ§ÑÁêÜÂÖ∂dis[i]ÔºåÈò≤Ê≠¢ÈáçÂ§ç‰ΩøÁî®„ÄÇ‰æùÊ¨°ÈÅçÂéÜÂÖ∂‰ΩôÊâÄÊúâÁÇπÔºå‰ª§dis[j] = min(dis[j], dis[i]+w[i] [j]) w[i] [j]Ë°®Á§∫ÁÇπiÂà∞ÁÇπjÁöÑË∑ùÁ¶ª„ÄÇËøô‰∏ÄÊ≠•Ë°®Á§∫Ê∫êÁÇπÂà∞iÂä†‰∏äiÂà∞jÁöÑË∑ùÁ¶ªÂíåÊ∫êÁÇπÂà∞jÁöÑË∑ùÁ¶ªÂì™‰∏™Â∞è„ÄÇ ÁÆóÊ≥ïÂÆûÁé∞ÈÇªÊé•Áü©ÈòµÁâàÊó∂Èó¥Â§çÊùÇÂ∫¶‰∏∫O(n*n) n‰∏∫È°∂ÁÇπÊï∞ 123456789101112131415161718192021222324252627void dijkstra(int n, int s)//1.&#123; for(int i=0; i&lt;n; i++)//2. &#123; dis[i] = w[s][i]; vis[i] = false; &#125; dis[s] = 0; for(int i=0; i&lt;n; i++)//3. &#123; int mn = INF, x; for(int j=0; j&lt;n; j++)//4. if(!vis[j] &amp;&amp; dis[j]&lt;mn) &#123; mn = dis[j]; x=j; &#125; if(mn==INF)//5. return; vis[x] = true;//6. for(int j=0; j&lt;n; j++) dis[j] = min(dis[j], dis[x]+w[x][j]); &#125;&#125; Ê≥®ÈáäÔºö n‰∏∫ÁªìÁÇπ‰∏™Êï∞Ôºås‰∏∫Ê∫êÁÇπ„ÄÇ ÂàùÂßãÂåñdisÊï∞ÁªÑÂíåvisÊï∞ÁªÑ ‰æùÊ¨°ÈÅçÂéÜÊØè‰∏™ÁªìÁÇπ ÊâæÂá∫ÂΩìÂÖàÊú™‰ΩøÁî®ËøáÁöÑÊúÄÁü≠Ë∑ØÔºåÂπ∂Êää‰∏ãÊ†áÂ≠òÂÖ•x Â¶ÇÊûúÂÖ®ÈÉ®‰ΩøÁî®ËøáÂàôÁÆóÊ≥ïÁªìÊùü vis[x]ËÆæ‰∏∫trueÔºåÊØîËæÉdis[j]Âíådis[x]+w[x] [j]ÁöÑÂ§ßÂ∞è ‰ºòÂÖàÈòüÂàóÁâàÁî®‰ºòÂÖàÈòüÂàó‰ºòÂåñdijkstraÂ§ßÈÉ®ÂàÜÊó∂Èó¥‰ºò‰∫éÊôÆÈÄöÁâàÔºå‰ΩÜÊòØÂú®ÂÆåÂÖ®ÂõæÊó∂ÊôÆÈÄöÁâàÊõ¥Â•Ω„ÄÇ Êó∂Èó¥Â§çÊùÇÂ∫¶ÔºöO((m+n)logm) ÂÖ∂‰∏≠n‰∏∫È°∂ÁÇπÊï∞Ôºåm‰∏∫ËæπÊï∞„ÄÇÊâÄ‰ª•ÂΩìÂÆåÂÖ®ÂõæÊó∂ÊôÆÈÄöÁâàÊõ¥Â•Ω„ÄÇ 1234567891011121314151617181920212223242526272829303132333435363738394041int dis[maxn];vector&lt;pair&lt;int, int&gt; &gt; G[maxn];//1.void add_eage(int s, int t, int w)&#123; G[s].push_back(make_pair(w, t));//2. G[t].push_back(make_pair(w, s));//3.&#125;void init(int n)//4.&#123; for(int i=0; i&lt;n; i++) G[i].clear();&#125;void dijkstra(int n, int s)&#123; for(int i=0; i&lt;n; i++)//5. dis[i] = (i==s)?0:INF; priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt; &gt;, greater&lt;pair&lt;int, int&gt; &gt; &gt; q;//6. q.push(make_pair(dis[s], s));//7. while(!q.empty()) &#123; pair&lt;int, int&gt; p = q.top(); int x = p.second;//8. q.pop(); for(int i=0; i&lt;G[x].size(); i++) &#123; int y=G[x][i].second, w=G[x][i].first;//9. if(dis[x]+w&lt;dis[y])//10. &#123; dis[y] = dis[x]+w; q.push(make_pair(dis[y], y)); &#125; &#125; &#125;&#125; Ê≥®ÈáäÔºö Â≠òÊîæpairÁöÑvectorÁî®Êù•Â≠òÊîæËæπÂíåËæπÊùÉÔºåÂõ†‰∏∫pairÊØîËæÉÂ§ßÂ∞èÊòØfirst‰ºòÂÖàÔºåÊâÄ‰ª•pairÁöÑfirstÊîæÁöÑÊòØÊùÉÈáç„ÄÇG[i] [j]Â≠òÊîæÁöÑÊòØÂíåÁªìÁÇπiÁõ∏ËøûÁöÑÁ¨¨jÊù°Ëæπ„ÄÇG[i] [j].secondÂ≠òÊîæÁöÑÊòØÂíåÁªìÁÇπiÁõ∏ËøûÁöÑÁ¨¨jÊù°ËæπÁöÑÂè¶‰∏Ä‰∏™Á´ØÁÇπ„ÄÇG[i] [j].firstÂ≠òÊîæÁöÑÊòØÂíåÁªìÁÇπiÁõ∏ËøûÁöÑÁ¨¨jÊù°ËæπÁöÑÊùÉÈáç„ÄÇmaxn‰∏∫Ëá™Â∑±ÂÆö‰πâÁöÑÂ∏∏Èáè„ÄÇ Â∞ÜËæπÊ∑ªÂä†Ëá≥vector‰∏≠Ôºås„ÄÅw„ÄÅt ËØ¥ÊòéÂêå‰∏ä„ÄÇ Êó†ÂêëÂõæÁöÑËæπÊòØÊó†ÂêëÁöÑÔºåÊâÄ‰ª•ÈúÄË¶ÅÂú®G[s]ÂíåG[w]‰∏≠ÈÉΩÂä†ÂÖ•‰∏ÄÊù°Ëæπ„ÄÇÊúâÂêëÂõæ‰∏çÈúÄË¶ÅËøô‰∏ÄÊ≠•„ÄÇ ÂàùÂßãÂåñvectorÔºåÊ∏ÖÁ©∫ÊâÄÊúâÂÖàÂâçÂä†ÂÖ•ÁöÑËæπ„ÄÇ ÂàùÂßãÂåñdisÊï∞ÁªÑÔºåÂ∞ÜÊ∫êÁÇπÂà∞Ê∫êÁÇπÁöÑË∑ùÁ¶ªËÆæÁΩÆ‰∏∫0ÔºåÂÖ∂‰ªñÁöÑËÆæÁΩÆ‰∏∫INF(Ëá™Â∑±ÂÆö‰πâ)„ÄÇ ÂÆö‰πâ‰ºòÂÖàÈòüÂàóÔºåÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞‰∏∫Êï∞ÊçÆÁ±ªÂûãÔºåÊØîËæÉpairÁ±ªÂûãÔºåpairÁöÑfirst‰ºòÂÖà„ÄÇÁ¨¨‰∫å‰∏™ÂèÇÊï∞‰∏∫Â≠òÂÇ®ÂÆπÂô®ÔºåÂíåÂÖàÂâçÂ≠òËæπÁöÑvectorÂÆö‰πâÁõ∏Âêå„ÄÇÁ¨¨‰∏â‰∏™ÂèÇÊï∞Ë°®Á§∫Â∞èÈ°∂Â†Ü(greater‰∏∫Â∞èÈ°∂Â†ÜÔºåless‰∏∫Â§ßÈ°∂Â†Ü)„ÄÇ Â∞ÜÊ∫êÁÇπÂéãÂÖ•ÈòüÂàó„ÄÇ xÂ≠òÊîæÂΩìÂâçÊú™ËÆøÈóÆËøáÁöÑÊùÉÂÄºÊúÄÂ∞èËæπÁöÑ‰∏ÄÁ´ØÁªìÁÇπÁºñÂè∑„ÄÇ ‰æùÊ¨°ÈÅçÂéÜ‰∏éxÁõ∏ËøûÁöÑËæπÔºåyË°®Á§∫‰∏éxÁõ∏ËøûÁöÑËæπÁöÑÂè¶‰∏ÄÁ´ØÁªìÁÇπÁºñÂè∑„ÄÇwË°®Á§∫xÂà∞yË∑ØÂæÑÊùÉÈáç ËØ•Ê≠•È™§ÈÄöÈÇªÊé•Áü©ÈòµdijkstraÁõ∏‰ºº Ê®°Êùø‰æãÈ¢òhdoj1874 ÂèÇËÄÉ Â§úÊ∑±‰∫∫ÈùôÂÜôÁÆóÊ≥ïÔºàÂõõÔºâ- ÊúÄÁü≠Ë∑ØÂíåÂ∑ÆÂàÜÁ∫¶Êùü dijkstraÂá†Â§ßÊ®°ÊùøÔºàËøôÈáåÈù¢ÁöÑ‰ºòÂÖàÈòüÂàóÊ®°ÊùøÂ•ΩÂÉèÊó∂ÈîôÁöÑÔºåÊàëÂè™ÂèÇËÄÉ‰∫Ü‰ªñÁöÑstlÁî®Ê≥ïÔºâ C++ pairÁöÑÊØîËæÉÂ§ßÂ∞è]]></content>
      <categories>
        <category>ÁÆóÊ≥ï</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>ÂõæËÆ∫</tag>
        <tag>ÊúÄÁü≠Ë∑Ø</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Âπ∂Êü•ÈõÜ]]></title>
    <url>%2F2019%2F07%2F22%2F%E5%B9%B6%E6%9F%A5%E9%9B%86%2F</url>
    <content type="text"><![CDATA[Âπ∂Êü•ÈõÜÂπ∂Êü•ÈõÜÊòØ‰∏ÄÁßçÊ†ëÂûãÊï∞ÊçÆÁªìÊûÑÔºåÁî®‰∫éÊü•Êâæ‰∏çÁõ∏‰∫§ÁöÑÂ≠êÈõÜÔºåÂπ∂Â∞Ü‰ªñ‰ª¨ÂêàÂπ∂Âú®‰∏ÄËµ∑ÔºåÁÆÄÁß∞Âπ∂Êü•ÈõÜ„ÄÇÂπ∂Êü•ÈõÜÂàÜ‰∏∫ÊãÜÂàÜ„ÄÅÊü•ÊâæÂíåÂêàÂπ∂‰∏â‰∏™Êìç‰Ωú„ÄÇ Âπ∂Êü•ÈõÜÊü•Êâæ preÊï∞ÁªÑËÆ∞ÂΩïÊâÄÊúâÁªìÁÇπÁöÑÂâçÈ©±ÁªìÁÇπÔºåÊ†πËäÇÁÇπÁöÑÂâçÈ©±ÁªìÁÇπÊòØÂÆÉËá™Â∑± findÂáΩÊï∞ÂÖàÊâæÂà∞xÁöÑÊ†πËäÇÁÇπ 12345678int pre[1000];//1.int find(int x)//2.&#123; int r=x; while ( pre[r] != r )//3. r=pre[r]; return r ;&#125; Ê≥®ÈáäÔºö ËÆ∞ÂΩïÂâçÈ©±ÁªìÁÇπ Êü•ÊâæÊ†πËäÇÁÇπ ÊâæÂà∞Ê†πËäÇÁÇπ r ÂêàÂπ∂ joinÂáΩÊï∞ÂÖàÊâæÂà∞‰∏§‰∏™ÂèòÈáèÁöÑÊ†πËäÇÁÇπ ‚Äã Â¶ÇÊûú‰ªñ‰ª¨Áõ∏ÂêåÂàôËØ¥Êòé‰∏§‰∏™ÂèòÈáèÂú®Âêå‰∏Ä‰∏™ÈõÜÂêà‰∏≠ ‚Äã Â¶ÇÊûú‰∏çÂêåÂàôÂ∞ÜÂÖ∂‰∏≠‰∏Ä‰∏™Ê†πËäÇÁÇπËÆæÁΩÆ‰∏∫Âè¶Â§ñ‰∏Ä‰∏™Ê†πËäÇÁÇπÁöÑÂâçÈ©± 123456void join(int x,int y)//1.&#123; int fx=find(x),fy=find(y); if(fx!=fy) pre[fx ]=fy;&#125; Ê≥®ÈáäÔºö Âà§Êñ≠x yÊòØÂê¶ËøûÈÄöÔºåÂ¶ÇÊûúÂ∑≤ÁªèËøûÈÄöÔºåÂ∞±‰∏çÁî®ÁÆ°‰∫Ü Â¶ÇÊûú‰∏çËøûÈÄöÔºåÂ∞±ÊääÂÆÉ‰ª¨ÊâÄÂú®ÁöÑËøûÈÄöÂàÜÊîØÂêàÂπ∂Ëµ∑„ÄÇ Âπ∂Êü•ÈõÜÁöÑ‰ºòÂåñË∑ØÂæÑÂéãÁº©Ë∑ØÂæÑÂéãÁº©ÊòØÂú®ÂØªÊâæÊ†πÁªìÁÇπÁöÑËøáÁ®ã‰∏≠ÔºåÂ∞ÜÂ≠êÈõÜ‰∏≠ÊâÄÊúâÁöÑÁÇπÁöÑÂâçÈ©±ËÆæÁΩÆ‰∏∫Ê†πÁªìÁÇπ„ÄÇ ‰∏∫‰ªÄ‰πàË¶ÅËøõË°åË∑ØÂæÑÂéãÁº©Âë¢ÔºüÂõ†‰∏∫Âú®Âπ∂Êü•ÈõÜÂêàÂπ∂ËøáÁ®ã‰∏≠Ôºå‰ªñÊúâÂèØËÉΩÂèòÊàê‰∏Ä‰∏™ÂçïÈìæË°®ÔºåËøôÊ†∑ÊØèÊ¨°ÂØªÊâæÊ†πÁªìÁÇπË¶ÅÈÅçÂéÜÂ≠êÈõÜ‰∏≠ÊâÄÊúâÁöÑÁªìÁÇπ„ÄÇËøõË°åË∑ØÂæÑÂéãÁº©‰πãÂêéÔºåÊØèÊ¨°ÂØªÊâæÊ†πÁªìÁÇπÂè™ÈúÄËÆøÈóÆ‰ªñÁöÑÁà∂ÁªìÁÇπÂ∞±ÂèØÊâæÂà∞Ê†πÁªìÁÇπ„ÄÇ ‰ºòÂåñÂêéÁöÑfindÂáΩÊï∞Ôºö 12345678910111213141516int pre[1000 ];int find(int x) &#123; int r=x; while ( pre[r] != r ) r=pre[r]; int i=x , j ; while( i != r )//1. &#123; j = pre[ i ];//2. pre[ i ]= r ;//3. i=j; &#125; return r ;&#125; Ê≥®ÈáäÔºö Ë∑ØÂæÑÂéãÁº© Âú®ÊîπÂèò‰∏äÁ∫ß‰πãÂâçÁî®‰∏¥Êó∂ÂèòÈáèjËÆ∞ÂΩï‰∏ã‰ªñÁöÑÂÄº Êää‰∏äÁ∫ßÊîπ‰∏∫Ê†πËäÇÁÇπ ÊåâÁß©(Rank)ÂêàÂπ∂ÊåâÁß©ÂêàÂπ∂Â∞±ÊòØÂú®ÂêàÂπ∂ËøáÁ®ã‰∏≠Â∞ÜÂÖÉÁ¥†ÊâÄÂú®Ê∑±Â∫¶Â∞èÁöÑÈõÜÂêàÂêàÂπ∂Âà∞ÂÖÉÁ¥†ÊâÄÂú®Ê∑±Â∫¶Â§ßÁöÑÈõÜÂêà ‰∏∫‰ªÄ‰πàË¶ÅÊåâÁß©ÂêàÂπ∂Âë¢ÔºüÂõ†‰∏∫Â¶ÇÊûúÂ∞ÜÂÖÉÁ¥†Ê∑±Â∫¶Â§ßÁöÑÈõÜÂêàÂêàÂπ∂Âà∞Â∞èÁöÑÈõÜÂêàÔºåÈÇ£‰πàÂêàÂπ∂ÂêéÁöÑÈõÜÂêàÊ∑±Â∫¶ÂàôÁ≠â‰∫éËæÉÂ§ßÁöÑÊ∑±Â∫¶Âä†‰∏Ä„ÄÇÂ¶ÇÊûúÂ∞ÜÊ∑±Â∫¶Â∞èÁöÑÈõÜÂêàÂêàÂπ∂Âà∞Ê∑±Â∫¶Â§ßÁöÑÈõÜÂêàÔºåÂàôÂêàÂπ∂ÂêéÁöÑÈõÜÂêàÊ∑±Â∫¶‰∏çÂèò„ÄÇ ‰ºòÂåñÂêéÁöÑjoinÂáΩÊï∞Ôºö 12345678910111213void join(int x, int y)&#123; int fx=find(x),fy=find(y); if(rank[fx]&gt;rank[fy])//1. pre[fy] = pre[fx];//2. else &#123; pre[fx] = fy; if(rank[fx]==rank[fy])//3. rank[fy]++; &#125;&#125; Ê≥®ÈáäÔºö rankÊï∞ÁªÑ‰∏∫ÂΩìÂâçÁªìÁÇπÁß©ÁöÑÂÄº Âè™ÈúÄË¶ÅÊØîËæÉÊ†πÁªìÁÇπÁöÑrankÂÄºÂ∞±Â§ü‰∫Ü ‰øÆÊîπÊó∂‰πüÂè™Áî®‰øÆÊîπÊ†πÁªìÁÇπÁöÑrankÂÄº Âπ∂Êü•ÈõÜÁöÑÁ≤æÁÆÄÂÆûÁé∞12345678910void init(int n) &#123; for(int i=1; i&lt;=n; i++) pre[i]=i; &#125;int find(int x) &#123; return pre[x]=x?x:pre[x]=get(pre[x]); &#125;//1.void join(int x, int y) &#123; pre[get(x)] = get[y]; &#125;void join(int x, int y)&#123;//2. pre[rank[find(x)&gt;rank[find(y)?find(y):find(x)] = pre[rank[find(x)&gt;rank[find(y)?find(x):find(y)]; if(rank[find(x)]==rank[find(y)]) rank[find(y)]++;&#125; Ê≥®ÈáäÔºö Ê†πÁªìÁÇπÁöÑpre‰∏∫0„ÄÇ Â∏¶Áß©ÂêàÂπ∂ÔºåËøòÊ≤°È™åËØÅÔºå‰∏çËÉΩÁ°ÆÂÆöÂØπÈîô„ÄÇ ÂèÇËÄÉÔºö Áª¥Âü∫ÁôæÁßëÔºöÂπ∂Êü•ÈõÜ Âπ∂Êü•ÈõÜËØ¶Ëß£‚Äî‚ÄîÂõæÊñáËß£ËØ¥ÔºåÁÆÄÂçïÊòìÊáÇÔºàËΩ¨Ôºâ Âπ∂Êü•ÈõÜÁ¨îËÆ∞&amp;Ê®°Êùø]]></content>
      <categories>
        <category>ÁÆóÊ≥ï</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>ÂõæËÆ∫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ÂèØ‰ª•ËØÑËÆ∫‰∫ÜÔºÅÔºÅÔºÅ]]></title>
    <url>%2F2018%2F11%2F02%2F%E5%8F%AF%E4%BB%A5%E8%AF%84%E8%AE%BA%E4%BA%86%EF%BC%81%EF%BC%81%EF%BC%81%2F</url>
    <content type="text"><![CDATA[Êù•ÂêêÊßΩÂêß]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello Word!]]></title>
    <url>%2F2018%2F11%2F01%2FHello-Word%2F</url>
    <content type="text"><![CDATA[HELLO WORD!!!]]></content>
  </entry>
</search>
